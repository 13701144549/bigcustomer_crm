#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class QudaoStatus:
  ENABLE = 0
  DISABLE = 1
  DELETED = 2

  _VALUES_TO_NAMES = {
    0: "ENABLE",
    1: "DISABLE",
    2: "DELETED",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 0,
    "DISABLE": 1,
    "DELETED": 2,
  }

class QudaoType:
  BAIPAI = 1
  LIANMING = 2
  PARTNER = 3
  DIRECT = 4
  QIANTAI = 5
  TELEMARKET = 6
  OVERSEAS = 7
  DAWANQU = 8
  BANK_COOPERATION = 9
  ADVERTISE = 10

  _VALUES_TO_NAMES = {
    1: "BAIPAI",
    2: "LIANMING",
    3: "PARTNER",
    4: "DIRECT",
    5: "QIANTAI",
    6: "TELEMARKET",
    7: "OVERSEAS",
    8: "DAWANQU",
    9: "BANK_COOPERATION",
    10: "ADVERTISE",
  }

  _NAMES_TO_VALUES = {
    "BAIPAI": 1,
    "LIANMING": 2,
    "PARTNER": 3,
    "DIRECT": 4,
    "QIANTAI": 5,
    "TELEMARKET": 6,
    "OVERSEAS": 7,
    "DAWANQU": 8,
    "BANK_COOPERATION": 9,
    "ADVERTISE": 10,
  }

class SettleCycle:
  REALTIME = 1
  MONTHLY = 2
  QUARTERLY = 3

  _VALUES_TO_NAMES = {
    1: "REALTIME",
    2: "MONTHLY",
    3: "QUARTERLY",
  }

  _NAMES_TO_VALUES = {
    "REALTIME": 1,
    "MONTHLY": 2,
    "QUARTERLY": 3,
  }

class ProductStatus:
  ENABLE = 0
  DISABLE = 1

  _VALUES_TO_NAMES = {
    0: "ENABLE",
    1: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 0,
    "DISABLE": 1,
  }

class ProductCate:
  TRADE_TYPE = 1
  ACTIVITY = 2

  _VALUES_TO_NAMES = {
    1: "TRADE_TYPE",
    2: "ACTIVITY",
  }

  _NAMES_TO_VALUES = {
    "TRADE_TYPE": 1,
    "ACTIVITY": 2,
  }

class MchntStatus:
  ENABLE = 0
  DISABLE = 1

  _VALUES_TO_NAMES = {
    0: "ENABLE",
    1: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 0,
    "DISABLE": 1,
  }

class SlsmStatus:
  ENABLE = 0
  DISABLE = 1

  _VALUES_TO_NAMES = {
    0: "ENABLE",
    1: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 0,
    "DISABLE": 1,
  }

class AnnounceStatus:
  ENABLE = 0
  DISABLE = 1

  _VALUES_TO_NAMES = {
    0: "ENABLE",
    1: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 0,
    "DISABLE": 1,
  }

class EntranceStatus:
  ENABLE = 1
  DISABLE = 2

  _VALUES_TO_NAMES = {
    1: "ENABLE",
    2: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 1,
    "DISABLE": 2,
  }

class RegionType:
  BUSINESS_REGION = 1
  HIGHTECH_REGION = 2
  OFFICE_BUILDING = 3
  COMMERCIAL_STREET = 4
  FOOD_STREET = 5
  COMPREHENSIVE_REGION = 6
  SCENIC_REGION = 7
  RESIDENTIAL_REGION = 8

  _VALUES_TO_NAMES = {
    1: "BUSINESS_REGION",
    2: "HIGHTECH_REGION",
    3: "OFFICE_BUILDING",
    4: "COMMERCIAL_STREET",
    5: "FOOD_STREET",
    6: "COMPREHENSIVE_REGION",
    7: "SCENIC_REGION",
    8: "RESIDENTIAL_REGION",
  }

  _NAMES_TO_VALUES = {
    "BUSINESS_REGION": 1,
    "HIGHTECH_REGION": 2,
    "OFFICE_BUILDING": 3,
    "COMMERCIAL_STREET": 4,
    "FOOD_STREET": 5,
    "COMPREHENSIVE_REGION": 6,
    "SCENIC_REGION": 7,
    "RESIDENTIAL_REGION": 8,
  }

class RegionOpenness:
  OPEN = 1
  SEMIOPEN = 2
  GATED = 3

  _VALUES_TO_NAMES = {
    1: "OPEN",
    2: "SEMIOPEN",
    3: "GATED",
  }

  _NAMES_TO_VALUES = {
    "OPEN": 1,
    "SEMIOPEN": 2,
    "GATED": 3,
  }

class OpAction:
  CREATE = 1
  EDIT = 2
  DELETE = 3
  AUDIT = 4
  SET_STATUS = 5

  _VALUES_TO_NAMES = {
    1: "CREATE",
    2: "EDIT",
    3: "DELETE",
    4: "AUDIT",
    5: "SET_STATUS",
  }

  _NAMES_TO_VALUES = {
    "CREATE": 1,
    "EDIT": 2,
    "DELETE": 3,
    "AUDIT": 4,
    "SET_STATUS": 5,
  }


class QudaoException(TException):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QudaoException')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BankInfo:
  """
  Attributes:
   - headbankname
   - bankuser
   - bankaccount
   - banktype
   - bankname
   - bankcode
   - bankProvince
   - bankCity
   - bankmobile
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'headbankname', None, None, ), # 1
    (2, TType.STRING, 'bankuser', None, None, ), # 2
    (3, TType.STRING, 'bankaccount', None, None, ), # 3
    (4, TType.I32, 'banktype', None, 1, ), # 4
    (5, TType.STRING, 'bankname', None, None, ), # 5
    (6, TType.STRING, 'bankcode', None, None, ), # 6
    (7, TType.STRING, 'bankProvince', None, "", ), # 7
    (8, TType.STRING, 'bankCity', None, "", ), # 8
    (9, TType.STRING, 'bankmobile', None, "", ), # 9
  )

  def __init__(self, headbankname=None, bankuser=None, bankaccount=None, banktype=thrift_spec[4][4], bankname=None, bankcode=None, bankProvince=thrift_spec[7][4], bankCity=thrift_spec[8][4], bankmobile=thrift_spec[9][4],):
    self.headbankname = headbankname
    self.bankuser = bankuser
    self.bankaccount = bankaccount
    self.banktype = banktype
    self.bankname = bankname
    self.bankcode = bankcode
    self.bankProvince = bankProvince
    self.bankCity = bankCity
    self.bankmobile = bankmobile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.headbankname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bankuser = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bankaccount = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.banktype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bankname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bankcode = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bankProvince = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bankCity = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bankmobile = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BankInfo')
    if self.headbankname is not None:
      oprot.writeFieldBegin('headbankname', TType.STRING, 1)
      oprot.writeString(self.headbankname)
      oprot.writeFieldEnd()
    if self.bankuser is not None:
      oprot.writeFieldBegin('bankuser', TType.STRING, 2)
      oprot.writeString(self.bankuser)
      oprot.writeFieldEnd()
    if self.bankaccount is not None:
      oprot.writeFieldBegin('bankaccount', TType.STRING, 3)
      oprot.writeString(self.bankaccount)
      oprot.writeFieldEnd()
    if self.banktype is not None:
      oprot.writeFieldBegin('banktype', TType.I32, 4)
      oprot.writeI32(self.banktype)
      oprot.writeFieldEnd()
    if self.bankname is not None:
      oprot.writeFieldBegin('bankname', TType.STRING, 5)
      oprot.writeString(self.bankname)
      oprot.writeFieldEnd()
    if self.bankcode is not None:
      oprot.writeFieldBegin('bankcode', TType.STRING, 6)
      oprot.writeString(self.bankcode)
      oprot.writeFieldEnd()
    if self.bankProvince is not None:
      oprot.writeFieldBegin('bankProvince', TType.STRING, 7)
      oprot.writeString(self.bankProvince)
      oprot.writeFieldEnd()
    if self.bankCity is not None:
      oprot.writeFieldBegin('bankCity', TType.STRING, 8)
      oprot.writeString(self.bankCity)
      oprot.writeFieldEnd()
    if self.bankmobile is not None:
      oprot.writeFieldBegin('bankmobile', TType.STRING, 9)
      oprot.writeString(self.bankmobile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.headbankname is None:
      raise TProtocol.TProtocolException(message='Required field headbankname is unset!')
    if self.bankuser is None:
      raise TProtocol.TProtocolException(message='Required field bankuser is unset!')
    if self.bankaccount is None:
      raise TProtocol.TProtocolException(message='Required field bankaccount is unset!')
    if self.banktype is None:
      raise TProtocol.TProtocolException(message='Required field banktype is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.headbankname)
    value = (value * 31) ^ hash(self.bankuser)
    value = (value * 31) ^ hash(self.bankaccount)
    value = (value * 31) ^ hash(self.banktype)
    value = (value * 31) ^ hash(self.bankname)
    value = (value * 31) ^ hash(self.bankcode)
    value = (value * 31) ^ hash(self.bankProvince)
    value = (value * 31) ^ hash(self.bankCity)
    value = (value * 31) ^ hash(self.bankmobile)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QudaoBaseInfo:
  """
  Attributes:
   - qd_uid
   - email
   - mobile
   - password
   - status
   - type
   - parent
   - level
   - slsm_uid
   - slsm_mobile
   - join_dtm
   - username
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'qd_uid', None, None, ), # 1
    (2, TType.STRING, 'email', None, None, ), # 2
    (3, TType.STRING, 'mobile', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.I32, 'type', None, None, ), # 6
    (7, TType.I64, 'parent', None, None, ), # 7
    (8, TType.I16, 'level', None, None, ), # 8
    (9, TType.I64, 'slsm_uid', None, None, ), # 9
    (10, TType.STRING, 'slsm_mobile', None, None, ), # 10
    (11, TType.STRING, 'join_dtm', None, None, ), # 11
    (12, TType.STRING, 'username', None, None, ), # 12
  )

  def __init__(self, qd_uid=None, email=None, mobile=None, password=None, status=None, type=None, parent=None, level=None, slsm_uid=None, slsm_mobile=None, join_dtm=None, username=None,):
    self.qd_uid = qd_uid
    self.email = email
    self.mobile = mobile
    self.password = password
    self.status = status
    self.type = type
    self.parent = parent
    self.level = level
    self.slsm_uid = slsm_uid
    self.slsm_mobile = slsm_mobile
    self.join_dtm = join_dtm
    self.username = username

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.email = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.password = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.parent = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.level = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.slsm_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.slsm_mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.username = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QudaoBaseInfo')
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 1)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 2)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 3)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 4)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 6)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.parent is not None:
      oprot.writeFieldBegin('parent', TType.I64, 7)
      oprot.writeI64(self.parent)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I16, 8)
      oprot.writeI16(self.level)
      oprot.writeFieldEnd()
    if self.slsm_uid is not None:
      oprot.writeFieldBegin('slsm_uid', TType.I64, 9)
      oprot.writeI64(self.slsm_uid)
      oprot.writeFieldEnd()
    if self.slsm_mobile is not None:
      oprot.writeFieldBegin('slsm_mobile', TType.STRING, 10)
      oprot.writeString(self.slsm_mobile)
      oprot.writeFieldEnd()
    if self.join_dtm is not None:
      oprot.writeFieldBegin('join_dtm', TType.STRING, 11)
      oprot.writeString(self.join_dtm)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 12)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field qd_uid is unset!')
    if self.email is None:
      raise TProtocol.TProtocolException(message='Required field email is unset!')
    if self.mobile is None:
      raise TProtocol.TProtocolException(message='Required field mobile is unset!')
    if self.password is None:
      raise TProtocol.TProtocolException(message='Required field password is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.qd_uid)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.mobile)
    value = (value * 31) ^ hash(self.password)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.parent)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.slsm_uid)
    value = (value * 31) ^ hash(self.slsm_mobile)
    value = (value * 31) ^ hash(self.join_dtm)
    value = (value * 31) ^ hash(self.username)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QudaoProfile:
  """
  Attributes:
   - qd_uid
   - name
   - short_name
   - legal_name
   - legal_idnumber
   - province
   - city
   - address
   - business_name
   - business_mobile
   - business_email
   - finance_name
   - finance_mobile
   - finance_email
   - logo_url
   - icon_url
   - business_license_url
   - bank_account_url
   - country
   - auth_province
   - auth_city
   - timezone
   - currency
   - manager_name
   - manager_mobile
   - service_manager_name
   - service_manager_mobile
   - mobile
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'qd_uid', None, None, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.STRING, 'short_name', None, "", ), # 3
    (4, TType.STRING, 'legal_name', None, None, ), # 4
    (5, TType.STRING, 'legal_idnumber', None, None, ), # 5
    (6, TType.STRING, 'province', None, None, ), # 6
    (7, TType.STRING, 'city', None, None, ), # 7
    (8, TType.STRING, 'address', None, None, ), # 8
    (9, TType.STRING, 'business_name', None, None, ), # 9
    (10, TType.STRING, 'business_mobile', None, None, ), # 10
    (11, TType.STRING, 'business_email', None, None, ), # 11
    (12, TType.STRING, 'finance_name', None, None, ), # 12
    (13, TType.STRING, 'finance_mobile', None, None, ), # 13
    (14, TType.STRING, 'finance_email', None, None, ), # 14
    (15, TType.STRING, 'logo_url', None, None, ), # 15
    (16, TType.STRING, 'icon_url', None, None, ), # 16
    (17, TType.STRING, 'business_license_url', None, None, ), # 17
    (18, TType.STRING, 'bank_account_url', None, None, ), # 18
    (19, TType.STRING, 'country', None, None, ), # 19
    (20, TType.STRING, 'auth_province', None, None, ), # 20
    (21, TType.STRING, 'auth_city', None, None, ), # 21
    (22, TType.STRING, 'timezone', None, None, ), # 22
    (23, TType.STRING, 'currency', None, None, ), # 23
    (24, TType.STRING, 'manager_name', None, None, ), # 24
    (25, TType.STRING, 'manager_mobile', None, None, ), # 25
    (26, TType.STRING, 'service_manager_name', None, None, ), # 26
    (27, TType.STRING, 'service_manager_mobile', None, None, ), # 27
    (28, TType.STRING, 'mobile', None, None, ), # 28
  )

  def __init__(self, qd_uid=None, name=thrift_spec[2][4], short_name=thrift_spec[3][4], legal_name=None, legal_idnumber=None, province=None, city=None, address=None, business_name=None, business_mobile=None, business_email=None, finance_name=None, finance_mobile=None, finance_email=None, logo_url=None, icon_url=None, business_license_url=None, bank_account_url=None, country=None, auth_province=None, auth_city=None, timezone=None, currency=None, manager_name=None, manager_mobile=None, service_manager_name=None, service_manager_mobile=None, mobile=None,):
    self.qd_uid = qd_uid
    self.name = name
    self.short_name = short_name
    self.legal_name = legal_name
    self.legal_idnumber = legal_idnumber
    self.province = province
    self.city = city
    self.address = address
    self.business_name = business_name
    self.business_mobile = business_mobile
    self.business_email = business_email
    self.finance_name = finance_name
    self.finance_mobile = finance_mobile
    self.finance_email = finance_email
    self.logo_url = logo_url
    self.icon_url = icon_url
    self.business_license_url = business_license_url
    self.bank_account_url = bank_account_url
    self.country = country
    self.auth_province = auth_province
    self.auth_city = auth_city
    self.timezone = timezone
    self.currency = currency
    self.manager_name = manager_name
    self.manager_mobile = manager_mobile
    self.service_manager_name = service_manager_name
    self.service_manager_mobile = service_manager_mobile
    self.mobile = mobile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.short_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.legal_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.legal_idnumber = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.business_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.business_mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.business_email = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.finance_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.finance_mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.finance_email = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.logo_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.icon_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.business_license_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.bank_account_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.country = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.auth_province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.auth_city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.timezone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.currency = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.manager_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.manager_mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.service_manager_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.service_manager_mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QudaoProfile')
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 1)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.short_name is not None:
      oprot.writeFieldBegin('short_name', TType.STRING, 3)
      oprot.writeString(self.short_name)
      oprot.writeFieldEnd()
    if self.legal_name is not None:
      oprot.writeFieldBegin('legal_name', TType.STRING, 4)
      oprot.writeString(self.legal_name)
      oprot.writeFieldEnd()
    if self.legal_idnumber is not None:
      oprot.writeFieldBegin('legal_idnumber', TType.STRING, 5)
      oprot.writeString(self.legal_idnumber)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 6)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 7)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 8)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.business_name is not None:
      oprot.writeFieldBegin('business_name', TType.STRING, 9)
      oprot.writeString(self.business_name)
      oprot.writeFieldEnd()
    if self.business_mobile is not None:
      oprot.writeFieldBegin('business_mobile', TType.STRING, 10)
      oprot.writeString(self.business_mobile)
      oprot.writeFieldEnd()
    if self.business_email is not None:
      oprot.writeFieldBegin('business_email', TType.STRING, 11)
      oprot.writeString(self.business_email)
      oprot.writeFieldEnd()
    if self.finance_name is not None:
      oprot.writeFieldBegin('finance_name', TType.STRING, 12)
      oprot.writeString(self.finance_name)
      oprot.writeFieldEnd()
    if self.finance_mobile is not None:
      oprot.writeFieldBegin('finance_mobile', TType.STRING, 13)
      oprot.writeString(self.finance_mobile)
      oprot.writeFieldEnd()
    if self.finance_email is not None:
      oprot.writeFieldBegin('finance_email', TType.STRING, 14)
      oprot.writeString(self.finance_email)
      oprot.writeFieldEnd()
    if self.logo_url is not None:
      oprot.writeFieldBegin('logo_url', TType.STRING, 15)
      oprot.writeString(self.logo_url)
      oprot.writeFieldEnd()
    if self.icon_url is not None:
      oprot.writeFieldBegin('icon_url', TType.STRING, 16)
      oprot.writeString(self.icon_url)
      oprot.writeFieldEnd()
    if self.business_license_url is not None:
      oprot.writeFieldBegin('business_license_url', TType.STRING, 17)
      oprot.writeString(self.business_license_url)
      oprot.writeFieldEnd()
    if self.bank_account_url is not None:
      oprot.writeFieldBegin('bank_account_url', TType.STRING, 18)
      oprot.writeString(self.bank_account_url)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 19)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.auth_province is not None:
      oprot.writeFieldBegin('auth_province', TType.STRING, 20)
      oprot.writeString(self.auth_province)
      oprot.writeFieldEnd()
    if self.auth_city is not None:
      oprot.writeFieldBegin('auth_city', TType.STRING, 21)
      oprot.writeString(self.auth_city)
      oprot.writeFieldEnd()
    if self.timezone is not None:
      oprot.writeFieldBegin('timezone', TType.STRING, 22)
      oprot.writeString(self.timezone)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 23)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.manager_name is not None:
      oprot.writeFieldBegin('manager_name', TType.STRING, 24)
      oprot.writeString(self.manager_name)
      oprot.writeFieldEnd()
    if self.manager_mobile is not None:
      oprot.writeFieldBegin('manager_mobile', TType.STRING, 25)
      oprot.writeString(self.manager_mobile)
      oprot.writeFieldEnd()
    if self.service_manager_name is not None:
      oprot.writeFieldBegin('service_manager_name', TType.STRING, 26)
      oprot.writeString(self.service_manager_name)
      oprot.writeFieldEnd()
    if self.service_manager_mobile is not None:
      oprot.writeFieldBegin('service_manager_mobile', TType.STRING, 27)
      oprot.writeString(self.service_manager_mobile)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 28)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field qd_uid is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.short_name is None:
      raise TProtocol.TProtocolException(message='Required field short_name is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.qd_uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.short_name)
    value = (value * 31) ^ hash(self.legal_name)
    value = (value * 31) ^ hash(self.legal_idnumber)
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.city)
    value = (value * 31) ^ hash(self.address)
    value = (value * 31) ^ hash(self.business_name)
    value = (value * 31) ^ hash(self.business_mobile)
    value = (value * 31) ^ hash(self.business_email)
    value = (value * 31) ^ hash(self.finance_name)
    value = (value * 31) ^ hash(self.finance_mobile)
    value = (value * 31) ^ hash(self.finance_email)
    value = (value * 31) ^ hash(self.logo_url)
    value = (value * 31) ^ hash(self.icon_url)
    value = (value * 31) ^ hash(self.business_license_url)
    value = (value * 31) ^ hash(self.bank_account_url)
    value = (value * 31) ^ hash(self.country)
    value = (value * 31) ^ hash(self.auth_province)
    value = (value * 31) ^ hash(self.auth_city)
    value = (value * 31) ^ hash(self.timezone)
    value = (value * 31) ^ hash(self.currency)
    value = (value * 31) ^ hash(self.manager_name)
    value = (value * 31) ^ hash(self.manager_mobile)
    value = (value * 31) ^ hash(self.service_manager_name)
    value = (value * 31) ^ hash(self.service_manager_mobile)
    value = (value * 31) ^ hash(self.mobile)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountInfo:
  """
  Attributes:
   - settle_cycle
   - settle_base_amt
   - wechat_fee_H5
   - alipay_fee_H5
   - jd_fee
   - qqwallet_fee
   - swipecard_fee
   - default_mchnt_fee
   - royalty_rule_id
   - wechat_fee_public
   - wechat_fee_sweep
   - wechat_fee_sdk
   - alipay_sweep
   - alipay_sdk
   - alipay_service
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'settle_cycle', None, None, ), # 1
    (2, TType.I64, 'settle_base_amt', None, None, ), # 2
    (3, TType.DOUBLE, 'wechat_fee_H5', None, None, ), # 3
    (4, TType.DOUBLE, 'alipay_fee_H5', None, None, ), # 4
    (5, TType.DOUBLE, 'jd_fee', None, None, ), # 5
    (6, TType.DOUBLE, 'qqwallet_fee', None, None, ), # 6
    (7, TType.DOUBLE, 'swipecard_fee', None, None, ), # 7
    (8, TType.DOUBLE, 'default_mchnt_fee', None, None, ), # 8
    (9, TType.STRING, 'royalty_rule_id', None, None, ), # 9
    (10, TType.DOUBLE, 'wechat_fee_public', None, None, ), # 10
    (11, TType.DOUBLE, 'wechat_fee_sweep', None, None, ), # 11
    (12, TType.DOUBLE, 'wechat_fee_sdk', None, None, ), # 12
    (13, TType.DOUBLE, 'alipay_sweep', None, None, ), # 13
    (14, TType.DOUBLE, 'alipay_sdk', None, None, ), # 14
    (15, TType.DOUBLE, 'alipay_service', None, None, ), # 15
  )

  def __init__(self, settle_cycle=None, settle_base_amt=None, wechat_fee_H5=None, alipay_fee_H5=None, jd_fee=None, qqwallet_fee=None, swipecard_fee=None, default_mchnt_fee=None, royalty_rule_id=None, wechat_fee_public=None, wechat_fee_sweep=None, wechat_fee_sdk=None, alipay_sweep=None, alipay_sdk=None, alipay_service=None,):
    self.settle_cycle = settle_cycle
    self.settle_base_amt = settle_base_amt
    self.wechat_fee_H5 = wechat_fee_H5
    self.alipay_fee_H5 = alipay_fee_H5
    self.jd_fee = jd_fee
    self.qqwallet_fee = qqwallet_fee
    self.swipecard_fee = swipecard_fee
    self.default_mchnt_fee = default_mchnt_fee
    self.royalty_rule_id = royalty_rule_id
    self.wechat_fee_public = wechat_fee_public
    self.wechat_fee_sweep = wechat_fee_sweep
    self.wechat_fee_sdk = wechat_fee_sdk
    self.alipay_sweep = alipay_sweep
    self.alipay_sdk = alipay_sdk
    self.alipay_service = alipay_service

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.settle_cycle = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.settle_base_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.wechat_fee_H5 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.alipay_fee_H5 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.jd_fee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.qqwallet_fee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.swipecard_fee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.default_mchnt_fee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.royalty_rule_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.wechat_fee_public = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.wechat_fee_sweep = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.wechat_fee_sdk = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.alipay_sweep = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.alipay_sdk = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.alipay_service = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountInfo')
    if self.settle_cycle is not None:
      oprot.writeFieldBegin('settle_cycle', TType.I32, 1)
      oprot.writeI32(self.settle_cycle)
      oprot.writeFieldEnd()
    if self.settle_base_amt is not None:
      oprot.writeFieldBegin('settle_base_amt', TType.I64, 2)
      oprot.writeI64(self.settle_base_amt)
      oprot.writeFieldEnd()
    if self.wechat_fee_H5 is not None:
      oprot.writeFieldBegin('wechat_fee_H5', TType.DOUBLE, 3)
      oprot.writeDouble(self.wechat_fee_H5)
      oprot.writeFieldEnd()
    if self.alipay_fee_H5 is not None:
      oprot.writeFieldBegin('alipay_fee_H5', TType.DOUBLE, 4)
      oprot.writeDouble(self.alipay_fee_H5)
      oprot.writeFieldEnd()
    if self.jd_fee is not None:
      oprot.writeFieldBegin('jd_fee', TType.DOUBLE, 5)
      oprot.writeDouble(self.jd_fee)
      oprot.writeFieldEnd()
    if self.qqwallet_fee is not None:
      oprot.writeFieldBegin('qqwallet_fee', TType.DOUBLE, 6)
      oprot.writeDouble(self.qqwallet_fee)
      oprot.writeFieldEnd()
    if self.swipecard_fee is not None:
      oprot.writeFieldBegin('swipecard_fee', TType.DOUBLE, 7)
      oprot.writeDouble(self.swipecard_fee)
      oprot.writeFieldEnd()
    if self.default_mchnt_fee is not None:
      oprot.writeFieldBegin('default_mchnt_fee', TType.DOUBLE, 8)
      oprot.writeDouble(self.default_mchnt_fee)
      oprot.writeFieldEnd()
    if self.royalty_rule_id is not None:
      oprot.writeFieldBegin('royalty_rule_id', TType.STRING, 9)
      oprot.writeString(self.royalty_rule_id)
      oprot.writeFieldEnd()
    if self.wechat_fee_public is not None:
      oprot.writeFieldBegin('wechat_fee_public', TType.DOUBLE, 10)
      oprot.writeDouble(self.wechat_fee_public)
      oprot.writeFieldEnd()
    if self.wechat_fee_sweep is not None:
      oprot.writeFieldBegin('wechat_fee_sweep', TType.DOUBLE, 11)
      oprot.writeDouble(self.wechat_fee_sweep)
      oprot.writeFieldEnd()
    if self.wechat_fee_sdk is not None:
      oprot.writeFieldBegin('wechat_fee_sdk', TType.DOUBLE, 12)
      oprot.writeDouble(self.wechat_fee_sdk)
      oprot.writeFieldEnd()
    if self.alipay_sweep is not None:
      oprot.writeFieldBegin('alipay_sweep', TType.DOUBLE, 13)
      oprot.writeDouble(self.alipay_sweep)
      oprot.writeFieldEnd()
    if self.alipay_sdk is not None:
      oprot.writeFieldBegin('alipay_sdk', TType.DOUBLE, 14)
      oprot.writeDouble(self.alipay_sdk)
      oprot.writeFieldEnd()
    if self.alipay_service is not None:
      oprot.writeFieldBegin('alipay_service', TType.DOUBLE, 15)
      oprot.writeDouble(self.alipay_service)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.settle_cycle is None:
      raise TProtocol.TProtocolException(message='Required field settle_cycle is unset!')
    if self.settle_base_amt is None:
      raise TProtocol.TProtocolException(message='Required field settle_base_amt is unset!')
    if self.wechat_fee_H5 is None:
      raise TProtocol.TProtocolException(message='Required field wechat_fee_H5 is unset!')
    if self.alipay_fee_H5 is None:
      raise TProtocol.TProtocolException(message='Required field alipay_fee_H5 is unset!')
    if self.jd_fee is None:
      raise TProtocol.TProtocolException(message='Required field jd_fee is unset!')
    if self.qqwallet_fee is None:
      raise TProtocol.TProtocolException(message='Required field qqwallet_fee is unset!')
    if self.swipecard_fee is None:
      raise TProtocol.TProtocolException(message='Required field swipecard_fee is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.settle_cycle)
    value = (value * 31) ^ hash(self.settle_base_amt)
    value = (value * 31) ^ hash(self.wechat_fee_H5)
    value = (value * 31) ^ hash(self.alipay_fee_H5)
    value = (value * 31) ^ hash(self.jd_fee)
    value = (value * 31) ^ hash(self.qqwallet_fee)
    value = (value * 31) ^ hash(self.swipecard_fee)
    value = (value * 31) ^ hash(self.default_mchnt_fee)
    value = (value * 31) ^ hash(self.royalty_rule_id)
    value = (value * 31) ^ hash(self.wechat_fee_public)
    value = (value * 31) ^ hash(self.wechat_fee_sweep)
    value = (value * 31) ^ hash(self.wechat_fee_sdk)
    value = (value * 31) ^ hash(self.alipay_sweep)
    value = (value * 31) ^ hash(self.alipay_sdk)
    value = (value * 31) ^ hash(self.alipay_service)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProductItem:
  """
  Attributes:
   - id
   - name
   - intro
   - available
   - memo
   - status
   - cate
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'intro', None, None, ), # 3
    (4, TType.I16, 'available', None, None, ), # 4
    (5, TType.STRING, 'memo', None, "", ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.I32, 'cate', None, None, ), # 7
  )

  def __init__(self, id=None, name=None, intro=None, available=None, memo=thrift_spec[5][4], status=None, cate=None,):
    self.id = id
    self.name = name
    self.intro = intro
    self.available = available
    self.memo = memo
    self.status = status
    self.cate = cate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.intro = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.available = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.cate = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProductItem')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 3)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I16, 4)
      oprot.writeI16(self.available)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 5)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.cate is not None:
      oprot.writeFieldBegin('cate', TType.I32, 7)
      oprot.writeI32(self.cate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.intro is None:
      raise TProtocol.TProtocolException(message='Required field intro is unset!')
    if self.available is None:
      raise TProtocol.TProtocolException(message='Required field available is unset!')
    if self.memo is None:
      raise TProtocol.TProtocolException(message='Required field memo is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.intro)
    value = (value * 31) ^ hash(self.available)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.cate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthArea:
  """
  Attributes:
   - province
   - city
   - county
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'province', None, None, ), # 1
    (2, TType.STRING, 'city', None, "", ), # 2
    (3, TType.STRING, 'county', None, "", ), # 3
  )

  def __init__(self, province=None, city=thrift_spec[2][4], county=thrift_spec[3][4],):
    self.province = province
    self.city = city
    self.county = county

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.county = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthArea')
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 1)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 2)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.county is not None:
      oprot.writeFieldBegin('county', TType.STRING, 3)
      oprot.writeString(self.county)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.province is None:
      raise TProtocol.TProtocolException(message='Required field province is unset!')
    if self.city is None:
      raise TProtocol.TProtocolException(message='Required field city is unset!')
    if self.county is None:
      raise TProtocol.TProtocolException(message='Required field county is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.city)
    value = (value * 31) ^ hash(self.county)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QudaoUser:
  """
  Attributes:
   - uid
   - base_info
   - profile
   - bank_info
   - account_info
   - product_list
   - auth_areas
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, None, ), # 1
    (2, TType.STRUCT, 'base_info', (QudaoBaseInfo, QudaoBaseInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'profile', (QudaoProfile, QudaoProfile.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'bank_info', (BankInfo, BankInfo.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'account_info', (AccountInfo, AccountInfo.thrift_spec), None, ), # 5
    (6, TType.LIST, 'product_list', (TType.STRUCT,(ProductItem, ProductItem.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'auth_areas', (TType.STRUCT,(AuthArea, AuthArea.thrift_spec)), None, ), # 7
  )

  def __init__(self, uid=None, base_info=None, profile=None, bank_info=None, account_info=None, product_list=None, auth_areas=None,):
    self.uid = uid
    self.base_info = base_info
    self.profile = profile
    self.bank_info = bank_info
    self.account_info = account_info
    self.product_list = product_list
    self.auth_areas = auth_areas

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.base_info = QudaoBaseInfo()
          self.base_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.profile = QudaoProfile()
          self.profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.bank_info = BankInfo()
          self.bank_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.account_info = AccountInfo()
          self.account_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.product_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ProductItem()
            _elem5.read(iprot)
            self.product_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.auth_areas = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = AuthArea()
            _elem11.read(iprot)
            self.auth_areas.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QudaoUser')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.base_info is not None:
      oprot.writeFieldBegin('base_info', TType.STRUCT, 2)
      self.base_info.write(oprot)
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRUCT, 3)
      self.profile.write(oprot)
      oprot.writeFieldEnd()
    if self.bank_info is not None:
      oprot.writeFieldBegin('bank_info', TType.STRUCT, 4)
      self.bank_info.write(oprot)
      oprot.writeFieldEnd()
    if self.account_info is not None:
      oprot.writeFieldBegin('account_info', TType.STRUCT, 5)
      self.account_info.write(oprot)
      oprot.writeFieldEnd()
    if self.product_list is not None:
      oprot.writeFieldBegin('product_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.product_list))
      for iter12 in self.product_list:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.auth_areas is not None:
      oprot.writeFieldBegin('auth_areas', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.auth_areas))
      for iter13 in self.auth_areas:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uid is None:
      raise TProtocol.TProtocolException(message='Required field uid is unset!')
    if self.base_info is None:
      raise TProtocol.TProtocolException(message='Required field base_info is unset!')
    if self.profile is None:
      raise TProtocol.TProtocolException(message='Required field profile is unset!')
    if self.bank_info is None:
      raise TProtocol.TProtocolException(message='Required field bank_info is unset!')
    if self.account_info is None:
      raise TProtocol.TProtocolException(message='Required field account_info is unset!')
    if self.product_list is None:
      raise TProtocol.TProtocolException(message='Required field product_list is unset!')
    if self.auth_areas is None:
      raise TProtocol.TProtocolException(message='Required field auth_areas is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.base_info)
    value = (value * 31) ^ hash(self.profile)
    value = (value * 31) ^ hash(self.bank_info)
    value = (value * 31) ^ hash(self.account_info)
    value = (value * 31) ^ hash(self.product_list)
    value = (value * 31) ^ hash(self.auth_areas)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SlsmUser:
  """
  Attributes:
   - slsm_uid
   - qd_uid
   - memo
   - status
   - join_dtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'slsm_uid', None, None, ), # 1
    (2, TType.I64, 'qd_uid', None, None, ), # 2
    (3, TType.STRING, 'memo', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.STRING, 'join_dtm', None, None, ), # 5
  )

  def __init__(self, slsm_uid=None, qd_uid=None, memo=None, status=None, join_dtm=None,):
    self.slsm_uid = slsm_uid
    self.qd_uid = qd_uid
    self.memo = memo
    self.status = status
    self.join_dtm = join_dtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.slsm_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SlsmUser')
    if self.slsm_uid is not None:
      oprot.writeFieldBegin('slsm_uid', TType.I64, 1)
      oprot.writeI64(self.slsm_uid)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 2)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 3)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.join_dtm is not None:
      oprot.writeFieldBegin('join_dtm', TType.STRING, 5)
      oprot.writeString(self.join_dtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.slsm_uid is None:
      raise TProtocol.TProtocolException(message='Required field slsm_uid is unset!')
    if self.qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field qd_uid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.slsm_uid)
    value = (value * 31) ^ hash(self.qd_uid)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.join_dtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MchntUser:
  """
  Attributes:
   - mchnt_uid
   - slsm_uid
   - qd_uid
   - memo
   - join_dtm
   - audit_status
   - audit_memo
   - audit_dtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mchnt_uid', None, None, ), # 1
    (2, TType.I64, 'slsm_uid', None, None, ), # 2
    (3, TType.I64, 'qd_uid', None, None, ), # 3
    (4, TType.STRING, 'memo', None, None, ), # 4
    (5, TType.STRING, 'join_dtm', None, None, ), # 5
    (6, TType.I16, 'audit_status', None, None, ), # 6
    (7, TType.STRING, 'audit_memo', None, None, ), # 7
    (8, TType.STRING, 'audit_dtm', None, None, ), # 8
  )

  def __init__(self, mchnt_uid=None, slsm_uid=None, qd_uid=None, memo=None, join_dtm=None, audit_status=None, audit_memo=None, audit_dtm=None,):
    self.mchnt_uid = mchnt_uid
    self.slsm_uid = slsm_uid
    self.qd_uid = qd_uid
    self.memo = memo
    self.join_dtm = join_dtm
    self.audit_status = audit_status
    self.audit_memo = audit_memo
    self.audit_dtm = audit_dtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mchnt_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.slsm_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.audit_status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.audit_memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.audit_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MchntUser')
    if self.mchnt_uid is not None:
      oprot.writeFieldBegin('mchnt_uid', TType.I64, 1)
      oprot.writeI64(self.mchnt_uid)
      oprot.writeFieldEnd()
    if self.slsm_uid is not None:
      oprot.writeFieldBegin('slsm_uid', TType.I64, 2)
      oprot.writeI64(self.slsm_uid)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 3)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 4)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.join_dtm is not None:
      oprot.writeFieldBegin('join_dtm', TType.STRING, 5)
      oprot.writeString(self.join_dtm)
      oprot.writeFieldEnd()
    if self.audit_status is not None:
      oprot.writeFieldBegin('audit_status', TType.I16, 6)
      oprot.writeI16(self.audit_status)
      oprot.writeFieldEnd()
    if self.audit_memo is not None:
      oprot.writeFieldBegin('audit_memo', TType.STRING, 7)
      oprot.writeString(self.audit_memo)
      oprot.writeFieldEnd()
    if self.audit_dtm is not None:
      oprot.writeFieldBegin('audit_dtm', TType.STRING, 8)
      oprot.writeString(self.audit_dtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_uid is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_uid is unset!')
    if self.slsm_uid is None:
      raise TProtocol.TProtocolException(message='Required field slsm_uid is unset!')
    if self.qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field qd_uid is unset!')
    if self.memo is None:
      raise TProtocol.TProtocolException(message='Required field memo is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mchnt_uid)
    value = (value * 31) ^ hash(self.slsm_uid)
    value = (value * 31) ^ hash(self.qd_uid)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.join_dtm)
    value = (value * 31) ^ hash(self.audit_status)
    value = (value * 31) ^ hash(self.audit_memo)
    value = (value * 31) ^ hash(self.audit_dtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryMeta:
  """
  Attributes:
   - offset
   - count
   - orderby
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'offset', None, 0, ), # 1
    (2, TType.I64, 'count', None, 100, ), # 2
    (3, TType.STRING, 'orderby', None, None, ), # 3
  )

  def __init__(self, offset=thrift_spec[1][4], count=thrift_spec[2][4], orderby=None,):
    self.offset = offset
    self.count = count
    self.orderby = orderby

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.offset = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderby = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryMeta')
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 1)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.orderby is not None:
      oprot.writeFieldBegin('orderby', TType.STRING, 3)
      oprot.writeString(self.orderby)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.offset)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.orderby)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QudaoQueryArg:
  """
  Attributes:
   - query_meta
   - parent_uid
   - name
   - status
   - s_join_dtm
   - e_join_dtm
   - types
   - auth_areas
   - statuses
   - countrys
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.I64, 'parent_uid', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.STRING, 's_join_dtm', None, None, ), # 5
    (6, TType.STRING, 'e_join_dtm', None, None, ), # 6
    (7, TType.LIST, 'types', (TType.I32,None), None, ), # 7
    (8, TType.STRING, 'auth_areas', None, None, ), # 8
    (9, TType.LIST, 'statuses', (TType.I32,None), None, ), # 9
    (10, TType.LIST, 'countrys', (TType.STRING,None), None, ), # 10
  )

  def __init__(self, query_meta=None, parent_uid=None, name=None, status=None, s_join_dtm=None, e_join_dtm=None, types=None, auth_areas=None, statuses=None, countrys=None,):
    self.query_meta = query_meta
    self.parent_uid = parent_uid
    self.name = name
    self.status = status
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.types = types
    self.auth_areas = auth_areas
    self.statuses = statuses
    self.countrys = countrys

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.parent_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.types = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32()
            self.types.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.auth_areas = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.statuses = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readI32()
            self.statuses.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.countrys = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = iprot.readString()
            self.countrys.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QudaoQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.parent_uid is not None:
      oprot.writeFieldBegin('parent_uid', TType.I64, 2)
      oprot.writeI64(self.parent_uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 5)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 6)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.types is not None:
      oprot.writeFieldBegin('types', TType.LIST, 7)
      oprot.writeListBegin(TType.I32, len(self.types))
      for iter32 in self.types:
        oprot.writeI32(iter32)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.auth_areas is not None:
      oprot.writeFieldBegin('auth_areas', TType.STRING, 8)
      oprot.writeString(self.auth_areas)
      oprot.writeFieldEnd()
    if self.statuses is not None:
      oprot.writeFieldBegin('statuses', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.statuses))
      for iter33 in self.statuses:
        oprot.writeI32(iter33)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.countrys is not None:
      oprot.writeFieldBegin('countrys', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.countrys))
      for iter34 in self.countrys:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.parent_uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.s_join_dtm)
    value = (value * 31) ^ hash(self.e_join_dtm)
    value = (value * 31) ^ hash(self.types)
    value = (value * 31) ^ hash(self.auth_areas)
    value = (value * 31) ^ hash(self.statuses)
    value = (value * 31) ^ hash(self.countrys)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MchntQueryArg:
  """
  Attributes:
   - query_meta
   - qd_uids
   - slsm_uids
   - mchnt_uids
   - s_join_dtm
   - e_join_dtm
   - audit_statuses
   - s_audit_dtm
   - e_audit_dtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'qd_uids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'slsm_uids', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'mchnt_uids', (TType.I64,None), None, ), # 4
    (5, TType.STRING, 's_join_dtm', None, None, ), # 5
    (6, TType.STRING, 'e_join_dtm', None, None, ), # 6
    (7, TType.LIST, 'audit_statuses', (TType.I16,None), None, ), # 7
    (8, TType.STRING, 's_audit_dtm', None, None, ), # 8
    (9, TType.STRING, 'e_audit_dtm', None, None, ), # 9
  )

  def __init__(self, query_meta=None, qd_uids=None, slsm_uids=None, mchnt_uids=None, s_join_dtm=None, e_join_dtm=None, audit_statuses=None, s_audit_dtm=None, e_audit_dtm=None,):
    self.query_meta = query_meta
    self.qd_uids = qd_uids
    self.slsm_uids = slsm_uids
    self.mchnt_uids = mchnt_uids
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.audit_statuses = audit_statuses
    self.s_audit_dtm = s_audit_dtm
    self.e_audit_dtm = e_audit_dtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.qd_uids = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI64()
            self.qd_uids.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.slsm_uids = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = iprot.readI64()
            self.slsm_uids.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.mchnt_uids = []
          (_etype50, _size47) = iprot.readListBegin()
          for _i51 in xrange(_size47):
            _elem52 = iprot.readI64()
            self.mchnt_uids.append(_elem52)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.audit_statuses = []
          (_etype56, _size53) = iprot.readListBegin()
          for _i57 in xrange(_size53):
            _elem58 = iprot.readI16()
            self.audit_statuses.append(_elem58)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.s_audit_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.e_audit_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MchntQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.qd_uids is not None:
      oprot.writeFieldBegin('qd_uids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.qd_uids))
      for iter59 in self.qd_uids:
        oprot.writeI64(iter59)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.slsm_uids is not None:
      oprot.writeFieldBegin('slsm_uids', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.slsm_uids))
      for iter60 in self.slsm_uids:
        oprot.writeI64(iter60)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mchnt_uids is not None:
      oprot.writeFieldBegin('mchnt_uids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.mchnt_uids))
      for iter61 in self.mchnt_uids:
        oprot.writeI64(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 5)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 6)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.audit_statuses is not None:
      oprot.writeFieldBegin('audit_statuses', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.audit_statuses))
      for iter62 in self.audit_statuses:
        oprot.writeI16(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_audit_dtm is not None:
      oprot.writeFieldBegin('s_audit_dtm', TType.STRING, 8)
      oprot.writeString(self.s_audit_dtm)
      oprot.writeFieldEnd()
    if self.e_audit_dtm is not None:
      oprot.writeFieldBegin('e_audit_dtm', TType.STRING, 9)
      oprot.writeString(self.e_audit_dtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.qd_uids)
    value = (value * 31) ^ hash(self.slsm_uids)
    value = (value * 31) ^ hash(self.mchnt_uids)
    value = (value * 31) ^ hash(self.s_join_dtm)
    value = (value * 31) ^ hash(self.e_join_dtm)
    value = (value * 31) ^ hash(self.audit_statuses)
    value = (value * 31) ^ hash(self.s_audit_dtm)
    value = (value * 31) ^ hash(self.e_audit_dtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SlsmQueryArg:
  """
  Attributes:
   - query_meta
   - qd_uids
   - slsm_uids
   - status
   - s_join_dtm
   - e_join_dtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'qd_uids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'slsm_uids', (TType.I64,None), None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.STRING, 's_join_dtm', None, None, ), # 5
    (6, TType.STRING, 'e_join_dtm', None, None, ), # 6
  )

  def __init__(self, query_meta=None, qd_uids=None, slsm_uids=None, status=None, s_join_dtm=None, e_join_dtm=None,):
    self.query_meta = query_meta
    self.qd_uids = qd_uids
    self.slsm_uids = slsm_uids
    self.status = status
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.qd_uids = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readI64()
            self.qd_uids.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.slsm_uids = []
          (_etype72, _size69) = iprot.readListBegin()
          for _i73 in xrange(_size69):
            _elem74 = iprot.readI64()
            self.slsm_uids.append(_elem74)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SlsmQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.qd_uids is not None:
      oprot.writeFieldBegin('qd_uids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.qd_uids))
      for iter75 in self.qd_uids:
        oprot.writeI64(iter75)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.slsm_uids is not None:
      oprot.writeFieldBegin('slsm_uids', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.slsm_uids))
      for iter76 in self.slsm_uids:
        oprot.writeI64(iter76)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 5)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 6)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.qd_uids)
    value = (value * 31) ^ hash(self.slsm_uids)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.s_join_dtm)
    value = (value * 31) ^ hash(self.e_join_dtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProdQueryArg:
  """
  Attributes:
   - query_meta
   - product_ids
   - cates
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'product_ids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'cates', (TType.I32,None), None, ), # 3
  )

  def __init__(self, query_meta=None, product_ids=None, cates=None,):
    self.query_meta = query_meta
    self.product_ids = product_ids
    self.cates = cates

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.product_ids = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = iprot.readI64()
            self.product_ids.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cates = []
          (_etype86, _size83) = iprot.readListBegin()
          for _i87 in xrange(_size83):
            _elem88 = iprot.readI32()
            self.cates.append(_elem88)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProdQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.product_ids is not None:
      oprot.writeFieldBegin('product_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.product_ids))
      for iter89 in self.product_ids:
        oprot.writeI64(iter89)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cates is not None:
      oprot.writeFieldBegin('cates', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.cates))
      for iter90 in self.cates:
        oprot.writeI32(iter90)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.product_ids)
    value = (value * 31) ^ hash(self.cates)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MchntRegisteredArg:
  """
  Attributes:
   - mchnt_uid
   - slsm_uid
   - audit_status
   - audit_memo
   - audit_dtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mchnt_uid', None, None, ), # 1
    (2, TType.I64, 'slsm_uid', None, None, ), # 2
    (3, TType.I16, 'audit_status', None, None, ), # 3
    (4, TType.STRING, 'audit_memo', None, None, ), # 4
    (5, TType.STRING, 'audit_dtm', None, None, ), # 5
  )

  def __init__(self, mchnt_uid=None, slsm_uid=None, audit_status=None, audit_memo=None, audit_dtm=None,):
    self.mchnt_uid = mchnt_uid
    self.slsm_uid = slsm_uid
    self.audit_status = audit_status
    self.audit_memo = audit_memo
    self.audit_dtm = audit_dtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mchnt_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.slsm_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.audit_status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.audit_memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.audit_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MchntRegisteredArg')
    if self.mchnt_uid is not None:
      oprot.writeFieldBegin('mchnt_uid', TType.I64, 1)
      oprot.writeI64(self.mchnt_uid)
      oprot.writeFieldEnd()
    if self.slsm_uid is not None:
      oprot.writeFieldBegin('slsm_uid', TType.I64, 2)
      oprot.writeI64(self.slsm_uid)
      oprot.writeFieldEnd()
    if self.audit_status is not None:
      oprot.writeFieldBegin('audit_status', TType.I16, 3)
      oprot.writeI16(self.audit_status)
      oprot.writeFieldEnd()
    if self.audit_memo is not None:
      oprot.writeFieldBegin('audit_memo', TType.STRING, 4)
      oprot.writeString(self.audit_memo)
      oprot.writeFieldEnd()
    if self.audit_dtm is not None:
      oprot.writeFieldBegin('audit_dtm', TType.STRING, 5)
      oprot.writeString(self.audit_dtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_uid is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_uid is unset!')
    if self.slsm_uid is None:
      raise TProtocol.TProtocolException(message='Required field slsm_uid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mchnt_uid)
    value = (value * 31) ^ hash(self.slsm_uid)
    value = (value * 31) ^ hash(self.audit_status)
    value = (value * 31) ^ hash(self.audit_memo)
    value = (value * 31) ^ hash(self.audit_dtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MchntRegisteredRet:
  """
  Attributes:
   - top_qd_uid
   - qd_uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'top_qd_uid', None, None, ), # 1
    (2, TType.I64, 'qd_uid', None, None, ), # 2
  )

  def __init__(self, top_qd_uid=None, qd_uid=None,):
    self.top_qd_uid = top_qd_uid
    self.qd_uid = qd_uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.top_qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MchntRegisteredRet')
    if self.top_qd_uid is not None:
      oprot.writeFieldBegin('top_qd_uid', TType.I64, 1)
      oprot.writeI64(self.top_qd_uid)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 2)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.top_qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field top_qd_uid is unset!')
    if self.qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field qd_uid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.top_qd_uid)
    value = (value * 31) ^ hash(self.qd_uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SlsmRegisteredArg:
  """
  Attributes:
   - slsm_uid
   - qd_uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'slsm_uid', None, None, ), # 1
    (2, TType.I64, 'qd_uid', None, None, ), # 2
  )

  def __init__(self, slsm_uid=None, qd_uid=None,):
    self.slsm_uid = slsm_uid
    self.qd_uid = qd_uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.slsm_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SlsmRegisteredArg')
    if self.slsm_uid is not None:
      oprot.writeFieldBegin('slsm_uid', TType.I64, 1)
      oprot.writeI64(self.slsm_uid)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 2)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.slsm_uid is None:
      raise TProtocol.TProtocolException(message='Required field slsm_uid is unset!')
    if self.qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field qd_uid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.slsm_uid)
    value = (value * 31) ^ hash(self.qd_uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SlsmRegisteredRet:
  """
  Attributes:
   - top_qd_uid
   - qd_uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'top_qd_uid', None, None, ), # 1
    (2, TType.I64, 'qd_uid', None, None, ), # 2
  )

  def __init__(self, top_qd_uid=None, qd_uid=None,):
    self.top_qd_uid = top_qd_uid
    self.qd_uid = qd_uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.top_qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SlsmRegisteredRet')
    if self.top_qd_uid is not None:
      oprot.writeFieldBegin('top_qd_uid', TType.I64, 1)
      oprot.writeI64(self.top_qd_uid)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 2)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.top_qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field top_qd_uid is unset!')
    if self.qd_uid is None:
      raise TProtocol.TProtocolException(message='Required field qd_uid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.top_qd_uid)
    value = (value * 31) ^ hash(self.qd_uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Announcement:
  """
  Attributes:
   - announce_id
   - title
   - content
   - create_time
   - istop
   - status
   - type
   - owner
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'announce_id', None, 0, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'content', None, None, ), # 3
    (4, TType.STRING, 'create_time', None, None, ), # 4
    (5, TType.I16, 'istop', None, 0, ), # 5
    (6, TType.I32, 'status', None,     0, ), # 6
    (7, TType.I16, 'type', None, 0, ), # 7
    (8, TType.I64, 'owner', None, None, ), # 8
  )

  def __init__(self, announce_id=thrift_spec[1][4], title=None, content=None, create_time=None, istop=thrift_spec[5][4], status=thrift_spec[6][4], type=thrift_spec[7][4], owner=None,):
    self.announce_id = announce_id
    self.title = title
    self.content = content
    self.create_time = create_time
    self.istop = istop
    self.status = status
    self.type = type
    self.owner = owner

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.announce_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.content = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.istop = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.owner = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Announcement')
    if self.announce_id is not None:
      oprot.writeFieldBegin('announce_id', TType.I64, 1)
      oprot.writeI64(self.announce_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 3)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 4)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.istop is not None:
      oprot.writeFieldBegin('istop', TType.I16, 5)
      oprot.writeI16(self.istop)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 7)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.I64, 8)
      oprot.writeI64(self.owner)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.announce_id is None:
      raise TProtocol.TProtocolException(message='Required field announce_id is unset!')
    if self.title is None:
      raise TProtocol.TProtocolException(message='Required field title is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    if self.create_time is None:
      raise TProtocol.TProtocolException(message='Required field create_time is unset!')
    if self.istop is None:
      raise TProtocol.TProtocolException(message='Required field istop is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.owner is None:
      raise TProtocol.TProtocolException(message='Required field owner is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.announce_id)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.istop)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.owner)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryAnnounceArg:
  """
  Attributes:
   - query_meta
   - qd_uid
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.I64, 'qd_uid', None, 0, ), # 2
    (3, TType.I32, 'status', None,     0, ), # 3
  )

  def __init__(self, query_meta=None, qd_uid=thrift_spec[2][4], status=thrift_spec[3][4],):
    self.query_meta = query_meta
    self.qd_uid = qd_uid
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryAnnounceArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 2)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.qd_uid)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoyaltyRuleItem:
  """
  Attributes:
   - min_trade_cnt
   - max_trade_cnt
   - discount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'min_trade_cnt', None, None, ), # 1
    (2, TType.I64, 'max_trade_cnt', None, None, ), # 2
    (3, TType.DOUBLE, 'discount', None, None, ), # 3
  )

  def __init__(self, min_trade_cnt=None, max_trade_cnt=None, discount=None,):
    self.min_trade_cnt = min_trade_cnt
    self.max_trade_cnt = max_trade_cnt
    self.discount = discount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.min_trade_cnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.max_trade_cnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoyaltyRuleItem')
    if self.min_trade_cnt is not None:
      oprot.writeFieldBegin('min_trade_cnt', TType.I64, 1)
      oprot.writeI64(self.min_trade_cnt)
      oprot.writeFieldEnd()
    if self.max_trade_cnt is not None:
      oprot.writeFieldBegin('max_trade_cnt', TType.I64, 2)
      oprot.writeI64(self.max_trade_cnt)
      oprot.writeFieldEnd()
    if self.discount is not None:
      oprot.writeFieldBegin('discount', TType.DOUBLE, 3)
      oprot.writeDouble(self.discount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.min_trade_cnt is None:
      raise TProtocol.TProtocolException(message='Required field min_trade_cnt is unset!')
    if self.max_trade_cnt is None:
      raise TProtocol.TProtocolException(message='Required field max_trade_cnt is unset!')
    if self.discount is None:
      raise TProtocol.TProtocolException(message='Required field discount is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.min_trade_cnt)
    value = (value * 31) ^ hash(self.max_trade_cnt)
    value = (value * 31) ^ hash(self.discount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoyaltyRule:
  """
  Attributes:
   - id
   - name
   - rules
   - min_trade_amt
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'rules', (TType.STRUCT,(RoyaltyRuleItem, RoyaltyRuleItem.thrift_spec)), None, ), # 3
    (4, TType.I64, 'min_trade_amt', None, None, ), # 4
    (5, TType.STRING, 'memo', None, None, ), # 5
  )

  def __init__(self, id=None, name=None, rules=None, min_trade_amt=None, memo=None,):
    self.id = id
    self.name = name
    self.rules = rules
    self.min_trade_amt = min_trade_amt
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.rules = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = RoyaltyRuleItem()
            _elem96.read(iprot)
            self.rules.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.min_trade_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoyaltyRule')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.rules is not None:
      oprot.writeFieldBegin('rules', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.rules))
      for iter97 in self.rules:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.min_trade_amt is not None:
      oprot.writeFieldBegin('min_trade_amt', TType.I64, 4)
      oprot.writeI64(self.min_trade_amt)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 5)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.rules is None:
      raise TProtocol.TProtocolException(message='Required field rules is unset!')
    if self.min_trade_amt is None:
      raise TProtocol.TProtocolException(message='Required field min_trade_amt is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.rules)
    value = (value * 31) ^ hash(self.min_trade_amt)
    value = (value * 31) ^ hash(self.memo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoyaltyRuleQueryArg:
  """
  Attributes:
   - query_meta
   - rule_ids
   - name
   - min_trade_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'rule_ids', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I64, 'min_trade_amt', None, None, ), # 4
  )

  def __init__(self, query_meta=None, rule_ids=None, name=None, min_trade_amt=None,):
    self.query_meta = query_meta
    self.rule_ids = rule_ids
    self.name = name
    self.min_trade_amt = min_trade_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.rule_ids = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = iprot.readString()
            self.rule_ids.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.min_trade_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoyaltyRuleQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.rule_ids is not None:
      oprot.writeFieldBegin('rule_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.rule_ids))
      for iter104 in self.rule_ids:
        oprot.writeString(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.min_trade_amt is not None:
      oprot.writeFieldBegin('min_trade_amt', TType.I64, 4)
      oprot.writeI64(self.min_trade_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.rule_ids)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.min_trade_amt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TrainingFile:
  """
  Attributes:
   - id
   - name
   - link
   - memo
   - create_time
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'link', None, None, ), # 3
    (4, TType.STRING, 'memo', None, None, ), # 4
    (5, TType.STRING, 'create_time', None, None, ), # 5
    (6, TType.I16, 'status', None, None, ), # 6
  )

  def __init__(self, id=None, name=None, link=None, memo=None, create_time=None, status=None,):
    self.id = id
    self.name = name
    self.link = link
    self.memo = memo
    self.create_time = create_time
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.link = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TrainingFile')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.link is not None:
      oprot.writeFieldBegin('link', TType.STRING, 3)
      oprot.writeString(self.link)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 4)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 5)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 6)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.link is None:
      raise TProtocol.TProtocolException(message='Required field link is unset!')
    if self.memo is None:
      raise TProtocol.TProtocolException(message='Required field memo is unset!')
    if self.create_time is None:
      raise TProtocol.TProtocolException(message='Required field create_time is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.link)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TrainingFileQueryArg:
  """
  Attributes:
   - query_meta
   - ids
   - name
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'ids', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I16, 'status', None, None, ), # 4
  )

  def __init__(self, query_meta=None, ids=None, name=None, status=None,):
    self.query_meta = query_meta
    self.ids = ids
    self.name = name
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ids = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = iprot.readI64()
            self.ids.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TrainingFileQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.ids is not None:
      oprot.writeFieldBegin('ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.ids))
      for iter111 in self.ids:
        oprot.writeI64(iter111)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 4)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.ids)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Region:
  """
  Attributes:
   - id
   - name
   - province
   - city
   - type
   - openness
   - create_time
   - status
   - audit_status
   - qd_uid
   - qd_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'province', None, None, ), # 3
    (4, TType.STRING, 'city', None, None, ), # 4
    (5, TType.I32, 'type', None, None, ), # 5
    (6, TType.I32, 'openness', None, None, ), # 6
    (7, TType.STRING, 'create_time', None, None, ), # 7
    (8, TType.I16, 'status', None, None, ), # 8
    (9, TType.I16, 'audit_status', None, None, ), # 9
    (10, TType.I64, 'qd_uid', None, None, ), # 10
    (11, TType.STRING, 'qd_name', None, None, ), # 11
  )

  def __init__(self, id=None, name=None, province=None, city=None, type=None, openness=None, create_time=None, status=None, audit_status=None, qd_uid=None, qd_name=None,):
    self.id = id
    self.name = name
    self.province = province
    self.city = city
    self.type = type
    self.openness = openness
    self.create_time = create_time
    self.status = status
    self.audit_status = audit_status
    self.qd_uid = qd_uid
    self.qd_name = qd_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.openness = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.audit_status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.qd_name = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Region')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 3)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 4)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.openness is not None:
      oprot.writeFieldBegin('openness', TType.I32, 6)
      oprot.writeI32(self.openness)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 7)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 8)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.audit_status is not None:
      oprot.writeFieldBegin('audit_status', TType.I16, 9)
      oprot.writeI16(self.audit_status)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 10)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    if self.qd_name is not None:
      oprot.writeFieldBegin('qd_name', TType.STRING, 11)
      oprot.writeString(self.qd_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.city)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.openness)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.audit_status)
    value = (value * 31) ^ hash(self.qd_uid)
    value = (value * 31) ^ hash(self.qd_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegionQueryArg:
  """
  Attributes:
   - query_meta
   - ids
   - name
   - province
   - city
   - type
   - openness
   - status
   - audit_status
   - s_join_dtm
   - e_join_dtm
   - qd_uid
   - qd_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'ids', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'province', None, None, ), # 4
    (5, TType.STRING, 'city', None, None, ), # 5
    (6, TType.LIST, 'type', (TType.I32,None), None, ), # 6
    (7, TType.LIST, 'openness', (TType.I32,None), None, ), # 7
    (8, TType.LIST, 'status', (TType.I16,None), None, ), # 8
    (9, TType.LIST, 'audit_status', (TType.I16,None), None, ), # 9
    (10, TType.STRING, 's_join_dtm', None, None, ), # 10
    (11, TType.STRING, 'e_join_dtm', None, None, ), # 11
    (12, TType.LIST, 'qd_uid', (TType.I64,None), None, ), # 12
    (13, TType.STRING, 'qd_name', None, None, ), # 13
  )

  def __init__(self, query_meta=None, ids=None, name=None, province=None, city=None, type=None, openness=None, status=None, audit_status=None, s_join_dtm=None, e_join_dtm=None, qd_uid=None, qd_name=None,):
    self.query_meta = query_meta
    self.ids = ids
    self.name = name
    self.province = province
    self.city = city
    self.type = type
    self.openness = openness
    self.status = status
    self.audit_status = audit_status
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.qd_uid = qd_uid
    self.qd_name = qd_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ids = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = iprot.readI64()
            self.ids.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.type = []
          (_etype121, _size118) = iprot.readListBegin()
          for _i122 in xrange(_size118):
            _elem123 = iprot.readI32()
            self.type.append(_elem123)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.openness = []
          (_etype127, _size124) = iprot.readListBegin()
          for _i128 in xrange(_size124):
            _elem129 = iprot.readI32()
            self.openness.append(_elem129)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.status = []
          (_etype133, _size130) = iprot.readListBegin()
          for _i134 in xrange(_size130):
            _elem135 = iprot.readI16()
            self.status.append(_elem135)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.audit_status = []
          (_etype139, _size136) = iprot.readListBegin()
          for _i140 in xrange(_size136):
            _elem141 = iprot.readI16()
            self.audit_status.append(_elem141)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.qd_uid = []
          (_etype145, _size142) = iprot.readListBegin()
          for _i146 in xrange(_size142):
            _elem147 = iprot.readI64()
            self.qd_uid.append(_elem147)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.qd_name = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegionQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.ids is not None:
      oprot.writeFieldBegin('ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.ids))
      for iter148 in self.ids:
        oprot.writeI64(iter148)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 4)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 5)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.type))
      for iter149 in self.type:
        oprot.writeI32(iter149)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.openness is not None:
      oprot.writeFieldBegin('openness', TType.LIST, 7)
      oprot.writeListBegin(TType.I32, len(self.openness))
      for iter150 in self.openness:
        oprot.writeI32(iter150)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 8)
      oprot.writeListBegin(TType.I16, len(self.status))
      for iter151 in self.status:
        oprot.writeI16(iter151)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.audit_status is not None:
      oprot.writeFieldBegin('audit_status', TType.LIST, 9)
      oprot.writeListBegin(TType.I16, len(self.audit_status))
      for iter152 in self.audit_status:
        oprot.writeI16(iter152)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 10)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 11)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.LIST, 12)
      oprot.writeListBegin(TType.I64, len(self.qd_uid))
      for iter153 in self.qd_uid:
        oprot.writeI64(iter153)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.qd_name is not None:
      oprot.writeFieldBegin('qd_name', TType.STRING, 13)
      oprot.writeString(self.qd_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.ids)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.city)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.openness)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.audit_status)
    value = (value * 31) ^ hash(self.s_join_dtm)
    value = (value * 31) ^ hash(self.e_join_dtm)
    value = (value * 31) ^ hash(self.qd_uid)
    value = (value * 31) ^ hash(self.qd_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OperationRecord:
  """
  Attributes:
   - id
   - action
   - resource_path
   - detail
   - opname
   - opuid
   - optime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'action', None, None, ), # 2
    (3, TType.STRING, 'resource_path', None, None, ), # 3
    (4, TType.STRING, 'detail', None, None, ), # 4
    (5, TType.STRING, 'opname', None, None, ), # 5
    (6, TType.I64, 'opuid', None, None, ), # 6
    (7, TType.STRING, 'optime', None, None, ), # 7
  )

  def __init__(self, id=None, action=None, resource_path=None, detail=None, opname=None, opuid=None, optime=None,):
    self.id = id
    self.action = action
    self.resource_path = resource_path
    self.detail = detail
    self.opname = opname
    self.opuid = opuid
    self.optime = optime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.action = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.resource_path = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.detail = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.opname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.opuid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.optime = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OperationRecord')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 2)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    if self.resource_path is not None:
      oprot.writeFieldBegin('resource_path', TType.STRING, 3)
      oprot.writeString(self.resource_path)
      oprot.writeFieldEnd()
    if self.detail is not None:
      oprot.writeFieldBegin('detail', TType.STRING, 4)
      oprot.writeString(self.detail)
      oprot.writeFieldEnd()
    if self.opname is not None:
      oprot.writeFieldBegin('opname', TType.STRING, 5)
      oprot.writeString(self.opname)
      oprot.writeFieldEnd()
    if self.opuid is not None:
      oprot.writeFieldBegin('opuid', TType.I64, 6)
      oprot.writeI64(self.opuid)
      oprot.writeFieldEnd()
    if self.optime is not None:
      oprot.writeFieldBegin('optime', TType.STRING, 7)
      oprot.writeString(self.optime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.action)
    value = (value * 31) ^ hash(self.resource_path)
    value = (value * 31) ^ hash(self.detail)
    value = (value * 31) ^ hash(self.opname)
    value = (value * 31) ^ hash(self.opuid)
    value = (value * 31) ^ hash(self.optime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OpRecordQueryArg:
  """
  Attributes:
   - query_meta
   - ids
   - action
   - resource_path
   - detail
   - opname
   - opuid
   - s_op_dtm
   - e_op_dtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'ids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'action', (TType.I32,None), None, ), # 3
    (4, TType.STRING, 'resource_path', None, None, ), # 4
    (5, TType.STRING, 'detail', None, None, ), # 5
    (6, TType.LIST, 'opname', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'opuid', (TType.I64,None), None, ), # 7
    (8, TType.STRING, 's_op_dtm', None, None, ), # 8
    (9, TType.STRING, 'e_op_dtm', None, None, ), # 9
  )

  def __init__(self, query_meta=None, ids=None, action=None, resource_path=None, detail=None, opname=None, opuid=None, s_op_dtm=None, e_op_dtm=None,):
    self.query_meta = query_meta
    self.ids = ids
    self.action = action
    self.resource_path = resource_path
    self.detail = detail
    self.opname = opname
    self.opuid = opuid
    self.s_op_dtm = s_op_dtm
    self.e_op_dtm = e_op_dtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ids = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = iprot.readI64()
            self.ids.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.action = []
          (_etype163, _size160) = iprot.readListBegin()
          for _i164 in xrange(_size160):
            _elem165 = iprot.readI32()
            self.action.append(_elem165)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.resource_path = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.detail = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.opname = []
          (_etype169, _size166) = iprot.readListBegin()
          for _i170 in xrange(_size166):
            _elem171 = iprot.readString()
            self.opname.append(_elem171)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.opuid = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in xrange(_size172):
            _elem177 = iprot.readI64()
            self.opuid.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.s_op_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.e_op_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OpRecordQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.ids is not None:
      oprot.writeFieldBegin('ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.ids))
      for iter178 in self.ids:
        oprot.writeI64(iter178)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.action))
      for iter179 in self.action:
        oprot.writeI32(iter179)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.resource_path is not None:
      oprot.writeFieldBegin('resource_path', TType.STRING, 4)
      oprot.writeString(self.resource_path)
      oprot.writeFieldEnd()
    if self.detail is not None:
      oprot.writeFieldBegin('detail', TType.STRING, 5)
      oprot.writeString(self.detail)
      oprot.writeFieldEnd()
    if self.opname is not None:
      oprot.writeFieldBegin('opname', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.opname))
      for iter180 in self.opname:
        oprot.writeString(iter180)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.opuid is not None:
      oprot.writeFieldBegin('opuid', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.opuid))
      for iter181 in self.opuid:
        oprot.writeI64(iter181)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_op_dtm is not None:
      oprot.writeFieldBegin('s_op_dtm', TType.STRING, 8)
      oprot.writeString(self.s_op_dtm)
      oprot.writeFieldEnd()
    if self.e_op_dtm is not None:
      oprot.writeFieldBegin('e_op_dtm', TType.STRING, 9)
      oprot.writeString(self.e_op_dtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.ids)
    value = (value * 31) ^ hash(self.action)
    value = (value * 31) ^ hash(self.resource_path)
    value = (value * 31) ^ hash(self.detail)
    value = (value * 31) ^ hash(self.opname)
    value = (value * 31) ^ hash(self.opuid)
    value = (value * 31) ^ hash(self.s_op_dtm)
    value = (value * 31) ^ hash(self.e_op_dtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Entrance:
  """
  Attributes:
   - id
   - module_name
   - qd_uid
   - status
   - create_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'module_name', None, None, ), # 2
    (3, TType.I64, 'qd_uid', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.STRING, 'create_time', None, None, ), # 5
  )

  def __init__(self, id=None, module_name=None, qd_uid=None, status=None, create_time=None,):
    self.id = id
    self.module_name = module_name
    self.qd_uid = qd_uid
    self.status = status
    self.create_time = create_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.module_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.qd_uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Entrance')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.module_name is not None:
      oprot.writeFieldBegin('module_name', TType.STRING, 2)
      oprot.writeString(self.module_name)
      oprot.writeFieldEnd()
    if self.qd_uid is not None:
      oprot.writeFieldBegin('qd_uid', TType.I64, 3)
      oprot.writeI64(self.qd_uid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 5)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.module_name)
    value = (value * 31) ^ hash(self.qd_uid)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.create_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EntranceQueryArg:
  """
  Attributes:
   - query_meta
   - ids
   - module_names
   - qd_uids
   - statuses
   - s_join_dtm
   - e_join_dtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'ids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'module_names', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'qd_uids', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'statuses', (TType.I32,None), None, ), # 5
    (6, TType.STRING, 's_join_dtm', None, None, ), # 6
    (7, TType.STRING, 'e_join_dtm', None, None, ), # 7
  )

  def __init__(self, query_meta=None, ids=None, module_names=None, qd_uids=None, statuses=None, s_join_dtm=None, e_join_dtm=None,):
    self.query_meta = query_meta
    self.ids = ids
    self.module_names = module_names
    self.qd_uids = qd_uids
    self.statuses = statuses
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ids = []
          (_etype185, _size182) = iprot.readListBegin()
          for _i186 in xrange(_size182):
            _elem187 = iprot.readI64()
            self.ids.append(_elem187)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.module_names = []
          (_etype191, _size188) = iprot.readListBegin()
          for _i192 in xrange(_size188):
            _elem193 = iprot.readString()
            self.module_names.append(_elem193)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.qd_uids = []
          (_etype197, _size194) = iprot.readListBegin()
          for _i198 in xrange(_size194):
            _elem199 = iprot.readI64()
            self.qd_uids.append(_elem199)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.statuses = []
          (_etype203, _size200) = iprot.readListBegin()
          for _i204 in xrange(_size200):
            _elem205 = iprot.readI32()
            self.statuses.append(_elem205)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EntranceQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.ids is not None:
      oprot.writeFieldBegin('ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.ids))
      for iter206 in self.ids:
        oprot.writeI64(iter206)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.module_names is not None:
      oprot.writeFieldBegin('module_names', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.module_names))
      for iter207 in self.module_names:
        oprot.writeString(iter207)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.qd_uids is not None:
      oprot.writeFieldBegin('qd_uids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.qd_uids))
      for iter208 in self.qd_uids:
        oprot.writeI64(iter208)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.statuses is not None:
      oprot.writeFieldBegin('statuses', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.statuses))
      for iter209 in self.statuses:
        oprot.writeI32(iter209)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 6)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 7)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.query_meta)
    value = (value * 31) ^ hash(self.ids)
    value = (value * 31) ^ hash(self.module_names)
    value = (value * 31) ^ hash(self.qd_uids)
    value = (value * 31) ^ hash(self.statuses)
    value = (value * 31) ^ hash(self.s_join_dtm)
    value = (value * 31) ^ hash(self.e_join_dtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
