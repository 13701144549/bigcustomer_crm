# coding=utf-8
import logging
import random
import unittest
import sys
import binascii

from bin.handler.huiyi.py8583.py8583 import Py8583
from bin.handler.huiyi.huiyi_spec import HuiyiSpec


log = logging.getLogger()

class TestIso8583(unittest.TestCase):

    def setUp(self):
        super(TestIso8583, self).setUp()
        self.py8583 = Py8583(HuiyiSpec())

    # def test_consistency(self):
    #     resp_str =  '30323030f23c46c1a8e09a100000000000000041313636323232373639393031303737373833303030303030303030303030303031303030303530363134353430333732303131333134353430333035303632333132343131313037313030313030313230383632323032393030303836363636303030303337363232323736393930313037373738333d32333132323036303030303039323830303030313631323731343732303131333030303030303038363232323230323431313130303030d6c7c4dcd6d5b6cbc8abd6a7b8b620202020202020202020202020202020202020202020202020203135364eed2fe263df3feb323630303030303030303030303030303136349f2608c13fefbbbde07f499f101307011703a00000010a010000000000849e93e79f3704eb0ee00a9f36020383950500000000009a031605069c01009f02060000000010005f2a02015682027c009f1a0201569f3303e0f0c89f3501228408a0000003330101029f090200209f6310303331303030303000000000000000009f1e0835303633313131319f03060000000000009f2701809f4104000000009f34030000003032303030303030360030303330303030303030303030303136303130303030303020203030303333364639353642374530'
    #     resp_str = binascii.unhexlify(resp_str)
    #
    #     self.py8583.parse(resp_str)
    #     build_str = self.py8583.build()
    #     # build_str= binascii.hexlify(build_str)
    #
    #     self.assertEqual(resp_str, build_str)


    def test_parse_valid(self):
        # 余额查询报文
        # resp_str = '2e01303333303939393930303030202020383838333030303020202030303030303030303030303030303030303030323030e23844c1a8e0981000000000000000413136363231303934383030303030303032393330313030303036313831303431333837363431383231303431333830363138353831323032313030303630383838383631303030303838383838313130303239363231303934383030303030303032393d3135313032303130303030303531363931303736343138323030303030303031363732313130313538313230303731b1b1bea9bfadcbbcc2fcbec6b5ead3d0cfdeb9abcbbe202020202020202020202020202020202020313536927ca8823192d61f323630303030303030303030303030303032303030303030323030303330303030303030303030303136303130303030303020203239343431374345303844303237'
        # 消费报文
        # resp_str = '2e01303334323939393930303030202020383838333030303020202030303030303030303030303030303030303030323030f23844c1a8e0981000000000000000413136363231303934383030303030303032393030313030303030303030303030343030303036313831303330323837363431373031303330323830363138353831323032313030303630383838383631303030303838383838313130303239363231303934383030303030303032393d3135313032303130303030303531363931303736343137303030303030303031363732313130313538313230303731b1b1bea9bfadcbbcc2fcbec6b5ead3d0cfdeb9abcbbe202020202020202020202020202020202020313536927ca8823192d61f323630303030303030303030303030303032303030303030323030303330303030303030303030303136303130303030303020203239343430374436413242353930'
        # 消费撤销
        # resp_str = '2e01303430333939393930303030202020383838333030303020202030303030303030303030303030303030303030323030f23844c1a8e0981800000040000000413136363231303934383030303030303032393230313030303030303030303030333130303036313831303339323037363431373931303339323030363138353831323032313030303630383838383631303030303838383838313130303239363231303934383030303030303032393d3135313032303130303030303531363931303736343137383030303030303031363732313130313538313230303731b1b1bea9bfadcbbcc2fcbec6b5ead3d0cfdeb9abcbbe202020202020202020202020202020202020313536927ca8823192d61f32363030303030303030303030303030303230303030303032303030333030303030303030303030313630303030303032393434313330363138303230303736343137383036313831303339303430303038383836313030303030303838383831313030303136303130303030303020203239343431343435343542443935'
        # 消费冲正报文
        # resp_str = '2e01303332373939393930303030202020383838333030303020202030303030303030303030303030303030303030343230f238448188e080100000004000000041313636323130393438303030303030303239303031303030303030303030303034303030303730323135333332373736343535393135333330393037303235383132303231303030383838383631303030303838383838313130303531383331353736343535383030303030303031363732313130313538313230303731b1b1bea9bfadcbbcc2fcbec6b5ead3d0cfdeb9abcbbe2020202020202020202020202020202020203135363032303030303030323030303330303030303030303030303230303736343535383037303231353333303930303038383836313030303030303838383831313030303136303130303030303020203239343832373937373837413232'

        # IC卡消费
        resp_str = '2e01303438323939393930303030202020383838333030303020202030303030303030303030303030303030303030323030f23c46c1a8e09a100000000000000041313636323134343431303030303130303935303030303030303030303030303030303031303730313137323532353736343438373137323532353037303133303130333939383035313030393030303630383838383836393030303838383838303031303239363231343434313030303031303039353d3330313032323030303030303531383231373736343438373030303030303030363736313130313339393830303030f6a6c3c0d7e3b0d9bbf5b5ea20202020202020202020202020202020202020202020202020202020313536f7d92993c163cc88323630303030303030303030303030303133309f3303e0e1c8950500800400009f1e0833433730333439369f101307000103a02012010a0100000888006b5259d79f2608a7c89db15f0db6c49f360201ee82027c009c01009f1a0201569a031507019f02060000000000015f2a0201569f03060000000000009f3501229f34034203009f37040e7e846e9f2701809f4104000000013032303030303030353030303330303030303030303030303136303130303030303020203130333130374639434230303142'

        resp_str = binascii.unhexlify(resp_str)
        resp_str = resp_str[46:]

        self.py8583.parse(resp_str)

    # def test_parse_invalid(self):
    #     resp_str =  '123421352345346457568678966324357579565763243454756732'
    #     resp_str = binascii.unhexlify(resp_str)
    #
    #     self.assertRaises(Exception, self.py8583.parse, resp_str)
    #
    #
    # def test_build_valid(self):
    #     pass

if __name__ == '__main__':
    log.setLevel('DEBUG')
    log.addHandler(logging.StreamHandler(sys.stdout))

    unittest.main()
