#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ServerError(Exception):
  """
  Attributes:
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, code=None, msg=None,):
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerError')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FundQueryParams:
  """
  Attributes:
   - start_date
   - end_date
   - userid
   - userids
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'start_date', None, None, ), # 1
    (2, TType.STRING, 'end_date', None, None, ), # 2
    (3, TType.I64, 'userid', None, None, ), # 3
    (4, TType.LIST, 'userids', (TType.I64,None), [
    ], ), # 4
    (5, TType.I64, 'limit', None, None, ), # 5
    (6, TType.I64, 'offset', None, None, ), # 6
  )

  def __init__(self, start_date=None, end_date=None, userid=None, userids=thrift_spec[4][4], limit=None, offset=None,):
    self.start_date = start_date
    self.end_date = end_date
    self.userid = userid
    if userids is self.thrift_spec[4][4]:
      userids = [
    ]
    self.userids = userids
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.start_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.end_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.userids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FundQueryParams')
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 1)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 2)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 3)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter6 in self.userids:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 5)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 6)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemitRecord:
  """
  Attributes:
   - userid
   - amt
   - biz_time
   - account_type_id
   - name
   - cardno
   - bank_name
   - bank_brch
   - bank_area
   - bank_city
   - bank_code
   - bank_type
   - remitback_id
   - id
   - remitback_memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'amt', None, None, ), # 2
    (3, TType.STRING, 'biz_time', None, None, ), # 3
    (4, TType.I64, 'account_type_id', None, None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.STRING, 'cardno', None, None, ), # 6
    (7, TType.STRING, 'bank_name', None, None, ), # 7
    (8, TType.STRING, 'bank_brch', None, None, ), # 8
    (9, TType.STRING, 'bank_area', None, None, ), # 9
    (10, TType.STRING, 'bank_city', None, None, ), # 10
    (11, TType.STRING, 'bank_code', None, None, ), # 11
    (12, TType.I64, 'bank_type', None, None, ), # 12
    (13, TType.I64, 'remitback_id', None, None, ), # 13
    (14, TType.I64, 'id', None, None, ), # 14
    (15, TType.STRING, 'remitback_memo', None, None, ), # 15
  )

  def __init__(self, userid=None, amt=None, biz_time=None, account_type_id=None, name=None, cardno=None, bank_name=None, bank_brch=None, bank_area=None, bank_city=None, bank_code=None, bank_type=None, remitback_id=None, id=None, remitback_memo=None,):
    self.userid = userid
    self.amt = amt
    self.biz_time = biz_time
    self.account_type_id = account_type_id
    self.name = name
    self.cardno = cardno
    self.bank_name = bank_name
    self.bank_brch = bank_brch
    self.bank_area = bank_area
    self.bank_city = bank_city
    self.bank_code = bank_code
    self.bank_type = bank_type
    self.remitback_id = remitback_id
    self.id = id
    self.remitback_memo = remitback_memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.biz_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.account_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cardno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bank_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bank_brch = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bank_area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.bank_city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.bank_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.bank_type = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.remitback_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.remitback_memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemitRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 2)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.biz_time is not None:
      oprot.writeFieldBegin('biz_time', TType.STRING, 3)
      oprot.writeString(self.biz_time)
      oprot.writeFieldEnd()
    if self.account_type_id is not None:
      oprot.writeFieldBegin('account_type_id', TType.I64, 4)
      oprot.writeI64(self.account_type_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.cardno is not None:
      oprot.writeFieldBegin('cardno', TType.STRING, 6)
      oprot.writeString(self.cardno)
      oprot.writeFieldEnd()
    if self.bank_name is not None:
      oprot.writeFieldBegin('bank_name', TType.STRING, 7)
      oprot.writeString(self.bank_name)
      oprot.writeFieldEnd()
    if self.bank_brch is not None:
      oprot.writeFieldBegin('bank_brch', TType.STRING, 8)
      oprot.writeString(self.bank_brch)
      oprot.writeFieldEnd()
    if self.bank_area is not None:
      oprot.writeFieldBegin('bank_area', TType.STRING, 9)
      oprot.writeString(self.bank_area)
      oprot.writeFieldEnd()
    if self.bank_city is not None:
      oprot.writeFieldBegin('bank_city', TType.STRING, 10)
      oprot.writeString(self.bank_city)
      oprot.writeFieldEnd()
    if self.bank_code is not None:
      oprot.writeFieldBegin('bank_code', TType.STRING, 11)
      oprot.writeString(self.bank_code)
      oprot.writeFieldEnd()
    if self.bank_type is not None:
      oprot.writeFieldBegin('bank_type', TType.I64, 12)
      oprot.writeI64(self.bank_type)
      oprot.writeFieldEnd()
    if self.remitback_id is not None:
      oprot.writeFieldBegin('remitback_id', TType.I64, 13)
      oprot.writeI64(self.remitback_id)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 14)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.remitback_memo is not None:
      oprot.writeFieldBegin('remitback_memo', TType.STRING, 15)
      oprot.writeString(self.remitback_memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SettleRecord:
  """
  Attributes:
   - userid
   - amt
   - num
   - fee
   - biz_time
   - chnl_id
   - account_type_id
   - trade_date
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'amt', None, None, ), # 2
    (3, TType.I64, 'num', None, None, ), # 3
    (4, TType.I64, 'fee', None, None, ), # 4
    (5, TType.STRING, 'biz_time', None, None, ), # 5
    (6, TType.I64, 'chnl_id', None, None, ), # 6
    (7, TType.I64, 'account_type_id', None, None, ), # 7
    (8, TType.STRING, 'trade_date', None, None, ), # 8
    (9, TType.I64, 'id', None, None, ), # 9
  )

  def __init__(self, userid=None, amt=None, num=None, fee=None, biz_time=None, chnl_id=None, account_type_id=None, trade_date=None, id=None,):
    self.userid = userid
    self.amt = amt
    self.num = num
    self.fee = fee
    self.biz_time = biz_time
    self.chnl_id = chnl_id
    self.account_type_id = account_type_id
    self.trade_date = trade_date
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.fee = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.biz_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.chnl_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.account_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.trade_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SettleRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 2)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I64, 3)
      oprot.writeI64(self.num)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 4)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    if self.biz_time is not None:
      oprot.writeFieldBegin('biz_time', TType.STRING, 5)
      oprot.writeString(self.biz_time)
      oprot.writeFieldEnd()
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.I64, 6)
      oprot.writeI64(self.chnl_id)
      oprot.writeFieldEnd()
    if self.account_type_id is not None:
      oprot.writeFieldBegin('account_type_id', TType.I64, 7)
      oprot.writeI64(self.account_type_id)
      oprot.writeFieldEnd()
    if self.trade_date is not None:
      oprot.writeFieldBegin('trade_date', TType.STRING, 8)
      oprot.writeString(self.trade_date)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 9)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeRecord:
  """
  Attributes:
   - userid
   - amt
   - fee
   - biz_sn
   - orig_biz_sn
   - chnl_id
   - trade_time
   - trade_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'amt', None, None, ), # 2
    (3, TType.I64, 'fee', None, None, ), # 3
    (4, TType.STRING, 'biz_sn', None, None, ), # 4
    (5, TType.STRING, 'orig_biz_sn', None, None, ), # 5
    (6, TType.I64, 'chnl_id', None, None, ), # 6
    (7, TType.STRING, 'trade_time', None, None, ), # 7
    (8, TType.STRING, 'trade_type', None, None, ), # 8
  )

  def __init__(self, userid=None, amt=None, fee=None, biz_sn=None, orig_biz_sn=None, chnl_id=None, trade_time=None, trade_type=None,):
    self.userid = userid
    self.amt = amt
    self.fee = fee
    self.biz_sn = biz_sn
    self.orig_biz_sn = orig_biz_sn
    self.chnl_id = chnl_id
    self.trade_time = trade_time
    self.trade_type = trade_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.fee = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.chnl_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.trade_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.trade_type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 2)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 3)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 4)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 5)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.I64, 6)
      oprot.writeI64(self.chnl_id)
      oprot.writeFieldEnd()
    if self.trade_time is not None:
      oprot.writeFieldBegin('trade_time', TType.STRING, 7)
      oprot.writeString(self.trade_time)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.STRING, 8)
      oprot.writeString(self.trade_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemitRuleArg:
  """
  Attributes:
   - cardno
   - name
   - amt
   - account_type_id
   - enable
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cardno', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I64, 'amt', None, None, ), # 3
    (4, TType.I32, 'account_type_id', None, None, ), # 4
    (5, TType.I32, 'enable', None, None, ), # 5
  )

  def __init__(self, cardno=None, name=None, amt=None, account_type_id=None, enable=None,):
    self.cardno = cardno
    self.name = name
    self.amt = amt
    self.account_type_id = account_type_id
    self.enable = enable

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cardno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.account_type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.enable = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemitRuleArg')
    if self.cardno is not None:
      oprot.writeFieldBegin('cardno', TType.STRING, 1)
      oprot.writeString(self.cardno)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 3)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.account_type_id is not None:
      oprot.writeFieldBegin('account_type_id', TType.I32, 4)
      oprot.writeI32(self.account_type_id)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I32, 5)
      oprot.writeI32(self.enable)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
