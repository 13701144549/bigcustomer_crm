#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from qudao import QudaoServer
from qudao.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i64 qd_register(QudaoUser user, i64 admin)')
  print('  void qd_set_status( uid_list, QudaoStatus status, i64 admin)')
  print('  void qd_update_base_info( base_infos, i64 admin)')
  print('  void qd_update_profile( profiles, i64 admin)')
  print('  void qd_update_auth_areas( auth_areas, i64 admin)')
  print('  void qd_update_account_info( account_infos, i64 admin)')
  print('  void qd_open_products( uid_list,  pid_list, i64 admin)')
  print('   qd_get_base_infos( uid_list)')
  print('   qd_get_profiles( uid_list)')
  print('   qd_get_account_infos( uid_list)')
  print('   qd_get_bank_infos( uid_list)')
  print('   qd_get_products( uid_list)')
  print('   qd_get( uid_list)')
  print('   qd_get_simple( uid_list)')
  print('   qd_query(QudaoQueryArg q)')
  print('   qd_get_hierarchy( uid_list, i16 max_hierarchy)')
  print('   qd_get_mchnt( uid_list, i16 max_hierarchy)')
  print('   qd_get_slsm( uid_list, i16 max_hierarchy)')
  print('  i64 qd_top_parent(i64 uid)')
  print('   qd_top_parents( uid_list)')
  print('  MchntRegisteredRet mchnt_on_registered(MchntRegisteredArg arg, i64 admin)')
  print('  MchntRegisteredRet mchnt_migrate(MchntRegisteredArg arg, i64 admin)')
  print('   mchnt_query(MchntQueryArg q)')
  print('  i64 mchnt_query_count(MchntQueryArg q)')
  print('   mchnt_get( uid_list)')
  print('  void mchnt_set_status( uid_list, MchntStatus status, i64 admin)')
  print('  SlsmRegisteredRet slsm_on_registered(SlsmRegisteredArg arg, i64 admin)')
  print('   slsm_query(SlsmQueryArg q)')
  print('   slsm_get( uid_list)')
  print('  void slsm_set_status( uid_list, SlsmStatus status, i64 admin)')
  print('  void slsm_transfer_mchnts( uid_list, i64 target_uid, i64 admin)')
  print('   slsm_get_qd_base_info( qd_uid_list)')
  print('  ProductItem prod_create(ProductItem item, i64 admin)')
  print('   prod_query(ProdQueryArg q)')
  print('   prod_get( pid_list)')
  print('  i64 announce_create(Announcement announce,  qd_uids, i64 admin)')
  print('  void announce_set_status( announce_ids, AnnounceStatus status, i64 admin)')
  print('   announce_query(QueryAnnounceArg q)')
  print('  i64 announce_query_count(QueryAnnounceArg q)')
  print('   announce_get( announce_ids)')
  print('  string royalty_rule_create(RoyaltyRule rule, i64 admin)')
  print('   royalty_rule_query(RoyaltyRuleQueryArg q)')
  print('   royalty_rule_get( rule_ids)')
  print('  i64 training_file_create(TrainingFile training_file, i64 admin)')
  print('  void training_file_set_status( ids, i16 status, i64 admin)')
  print('  void training_file_update( training_files, i64 admin)')
  print('   training_file_query(TrainingFileQueryArg q)')
  print('  i64 training_file_query_count(TrainingFileQueryArg q)')
  print('   training_file_get( file_ids)')
  print('  i64 region_create(Region region, i64 admin)')
  print('  void region_set_status( ids, i16 status, i64 admin)')
  print('  void region_audit( ids, i16 audit_status, i64 admin)')
  print('  void region_delete( ids, i64 admin)')
  print('  void region_update( regions, i64 admin)')
  print('   region_query(RegionQueryArg q)')
  print('  i64 region_query_count(RegionQueryArg q)')
  print('   region_get( region_ids)')
  print('  i64 oprecord_create(OperationRecord oprecord, i64 admin)')
  print('   oprecord_query(OpRecordQueryArg q)')
  print('  i64 oprecord_query_count(OpRecordQueryArg q)')
  print('   oprecord_get( ids)')
  print('  i64 entrance_create(Entrance entrance, i64 admin)')
  print('   entrance_query(EntranceQueryArg q)')
  print('  i64 entrance_query_count(EntranceQueryArg q)')
  print('   entrance_get( ids)')
  print('  void entrance_delete( ids, i64 admin)')
  print('  void ping()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = QudaoServer.Client(protocol)
transport.open()

if cmd == 'qd_register':
  if len(args) != 2:
    print('qd_register requires 2 args')
    sys.exit(1)
  pp.pprint(client.qd_register(eval(args[0]),eval(args[1]),))

elif cmd == 'qd_set_status':
  if len(args) != 3:
    print('qd_set_status requires 3 args')
    sys.exit(1)
  pp.pprint(client.qd_set_status(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'qd_update_base_info':
  if len(args) != 2:
    print('qd_update_base_info requires 2 args')
    sys.exit(1)
  pp.pprint(client.qd_update_base_info(eval(args[0]),eval(args[1]),))

elif cmd == 'qd_update_profile':
  if len(args) != 2:
    print('qd_update_profile requires 2 args')
    sys.exit(1)
  pp.pprint(client.qd_update_profile(eval(args[0]),eval(args[1]),))

elif cmd == 'qd_update_auth_areas':
  if len(args) != 2:
    print('qd_update_auth_areas requires 2 args')
    sys.exit(1)
  pp.pprint(client.qd_update_auth_areas(eval(args[0]),eval(args[1]),))

elif cmd == 'qd_update_account_info':
  if len(args) != 2:
    print('qd_update_account_info requires 2 args')
    sys.exit(1)
  pp.pprint(client.qd_update_account_info(eval(args[0]),eval(args[1]),))

elif cmd == 'qd_open_products':
  if len(args) != 3:
    print('qd_open_products requires 3 args')
    sys.exit(1)
  pp.pprint(client.qd_open_products(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'qd_get_base_infos':
  if len(args) != 1:
    print('qd_get_base_infos requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_get_base_infos(eval(args[0]),))

elif cmd == 'qd_get_profiles':
  if len(args) != 1:
    print('qd_get_profiles requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_get_profiles(eval(args[0]),))

elif cmd == 'qd_get_account_infos':
  if len(args) != 1:
    print('qd_get_account_infos requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_get_account_infos(eval(args[0]),))

elif cmd == 'qd_get_bank_infos':
  if len(args) != 1:
    print('qd_get_bank_infos requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_get_bank_infos(eval(args[0]),))

elif cmd == 'qd_get_products':
  if len(args) != 1:
    print('qd_get_products requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_get_products(eval(args[0]),))

elif cmd == 'qd_get':
  if len(args) != 1:
    print('qd_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_get(eval(args[0]),))

elif cmd == 'qd_get_simple':
  if len(args) != 1:
    print('qd_get_simple requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_get_simple(eval(args[0]),))

elif cmd == 'qd_query':
  if len(args) != 1:
    print('qd_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_query(eval(args[0]),))

elif cmd == 'qd_get_hierarchy':
  if len(args) != 2:
    print('qd_get_hierarchy requires 2 args')
    sys.exit(1)
  pp.pprint(client.qd_get_hierarchy(eval(args[0]),eval(args[1]),))

elif cmd == 'qd_get_mchnt':
  if len(args) != 2:
    print('qd_get_mchnt requires 2 args')
    sys.exit(1)
  pp.pprint(client.qd_get_mchnt(eval(args[0]),eval(args[1]),))

elif cmd == 'qd_get_slsm':
  if len(args) != 2:
    print('qd_get_slsm requires 2 args')
    sys.exit(1)
  pp.pprint(client.qd_get_slsm(eval(args[0]),eval(args[1]),))

elif cmd == 'qd_top_parent':
  if len(args) != 1:
    print('qd_top_parent requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_top_parent(eval(args[0]),))

elif cmd == 'qd_top_parents':
  if len(args) != 1:
    print('qd_top_parents requires 1 args')
    sys.exit(1)
  pp.pprint(client.qd_top_parents(eval(args[0]),))

elif cmd == 'mchnt_on_registered':
  if len(args) != 2:
    print('mchnt_on_registered requires 2 args')
    sys.exit(1)
  pp.pprint(client.mchnt_on_registered(eval(args[0]),eval(args[1]),))

elif cmd == 'mchnt_migrate':
  if len(args) != 2:
    print('mchnt_migrate requires 2 args')
    sys.exit(1)
  pp.pprint(client.mchnt_migrate(eval(args[0]),eval(args[1]),))

elif cmd == 'mchnt_query':
  if len(args) != 1:
    print('mchnt_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.mchnt_query(eval(args[0]),))

elif cmd == 'mchnt_query_count':
  if len(args) != 1:
    print('mchnt_query_count requires 1 args')
    sys.exit(1)
  pp.pprint(client.mchnt_query_count(eval(args[0]),))

elif cmd == 'mchnt_get':
  if len(args) != 1:
    print('mchnt_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.mchnt_get(eval(args[0]),))

elif cmd == 'mchnt_set_status':
  if len(args) != 3:
    print('mchnt_set_status requires 3 args')
    sys.exit(1)
  pp.pprint(client.mchnt_set_status(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'slsm_on_registered':
  if len(args) != 2:
    print('slsm_on_registered requires 2 args')
    sys.exit(1)
  pp.pprint(client.slsm_on_registered(eval(args[0]),eval(args[1]),))

elif cmd == 'slsm_query':
  if len(args) != 1:
    print('slsm_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.slsm_query(eval(args[0]),))

elif cmd == 'slsm_get':
  if len(args) != 1:
    print('slsm_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.slsm_get(eval(args[0]),))

elif cmd == 'slsm_set_status':
  if len(args) != 3:
    print('slsm_set_status requires 3 args')
    sys.exit(1)
  pp.pprint(client.slsm_set_status(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'slsm_transfer_mchnts':
  if len(args) != 3:
    print('slsm_transfer_mchnts requires 3 args')
    sys.exit(1)
  pp.pprint(client.slsm_transfer_mchnts(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'slsm_get_qd_base_info':
  if len(args) != 1:
    print('slsm_get_qd_base_info requires 1 args')
    sys.exit(1)
  pp.pprint(client.slsm_get_qd_base_info(eval(args[0]),))

elif cmd == 'prod_create':
  if len(args) != 2:
    print('prod_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.prod_create(eval(args[0]),eval(args[1]),))

elif cmd == 'prod_query':
  if len(args) != 1:
    print('prod_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.prod_query(eval(args[0]),))

elif cmd == 'prod_get':
  if len(args) != 1:
    print('prod_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.prod_get(eval(args[0]),))

elif cmd == 'announce_create':
  if len(args) != 3:
    print('announce_create requires 3 args')
    sys.exit(1)
  pp.pprint(client.announce_create(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'announce_set_status':
  if len(args) != 3:
    print('announce_set_status requires 3 args')
    sys.exit(1)
  pp.pprint(client.announce_set_status(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'announce_query':
  if len(args) != 1:
    print('announce_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.announce_query(eval(args[0]),))

elif cmd == 'announce_query_count':
  if len(args) != 1:
    print('announce_query_count requires 1 args')
    sys.exit(1)
  pp.pprint(client.announce_query_count(eval(args[0]),))

elif cmd == 'announce_get':
  if len(args) != 1:
    print('announce_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.announce_get(eval(args[0]),))

elif cmd == 'royalty_rule_create':
  if len(args) != 2:
    print('royalty_rule_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.royalty_rule_create(eval(args[0]),eval(args[1]),))

elif cmd == 'royalty_rule_query':
  if len(args) != 1:
    print('royalty_rule_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.royalty_rule_query(eval(args[0]),))

elif cmd == 'royalty_rule_get':
  if len(args) != 1:
    print('royalty_rule_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.royalty_rule_get(eval(args[0]),))

elif cmd == 'training_file_create':
  if len(args) != 2:
    print('training_file_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.training_file_create(eval(args[0]),eval(args[1]),))

elif cmd == 'training_file_set_status':
  if len(args) != 3:
    print('training_file_set_status requires 3 args')
    sys.exit(1)
  pp.pprint(client.training_file_set_status(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'training_file_update':
  if len(args) != 2:
    print('training_file_update requires 2 args')
    sys.exit(1)
  pp.pprint(client.training_file_update(eval(args[0]),eval(args[1]),))

elif cmd == 'training_file_query':
  if len(args) != 1:
    print('training_file_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.training_file_query(eval(args[0]),))

elif cmd == 'training_file_query_count':
  if len(args) != 1:
    print('training_file_query_count requires 1 args')
    sys.exit(1)
  pp.pprint(client.training_file_query_count(eval(args[0]),))

elif cmd == 'training_file_get':
  if len(args) != 1:
    print('training_file_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.training_file_get(eval(args[0]),))

elif cmd == 'region_create':
  if len(args) != 2:
    print('region_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.region_create(eval(args[0]),eval(args[1]),))

elif cmd == 'region_set_status':
  if len(args) != 3:
    print('region_set_status requires 3 args')
    sys.exit(1)
  pp.pprint(client.region_set_status(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'region_audit':
  if len(args) != 3:
    print('region_audit requires 3 args')
    sys.exit(1)
  pp.pprint(client.region_audit(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'region_delete':
  if len(args) != 2:
    print('region_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.region_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'region_update':
  if len(args) != 2:
    print('region_update requires 2 args')
    sys.exit(1)
  pp.pprint(client.region_update(eval(args[0]),eval(args[1]),))

elif cmd == 'region_query':
  if len(args) != 1:
    print('region_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.region_query(eval(args[0]),))

elif cmd == 'region_query_count':
  if len(args) != 1:
    print('region_query_count requires 1 args')
    sys.exit(1)
  pp.pprint(client.region_query_count(eval(args[0]),))

elif cmd == 'region_get':
  if len(args) != 1:
    print('region_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.region_get(eval(args[0]),))

elif cmd == 'oprecord_create':
  if len(args) != 2:
    print('oprecord_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.oprecord_create(eval(args[0]),eval(args[1]),))

elif cmd == 'oprecord_query':
  if len(args) != 1:
    print('oprecord_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.oprecord_query(eval(args[0]),))

elif cmd == 'oprecord_query_count':
  if len(args) != 1:
    print('oprecord_query_count requires 1 args')
    sys.exit(1)
  pp.pprint(client.oprecord_query_count(eval(args[0]),))

elif cmd == 'oprecord_get':
  if len(args) != 1:
    print('oprecord_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.oprecord_get(eval(args[0]),))

elif cmd == 'entrance_create':
  if len(args) != 2:
    print('entrance_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.entrance_create(eval(args[0]),eval(args[1]),))

elif cmd == 'entrance_query':
  if len(args) != 1:
    print('entrance_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.entrance_query(eval(args[0]),))

elif cmd == 'entrance_query_count':
  if len(args) != 1:
    print('entrance_query_count requires 1 args')
    sys.exit(1)
  pp.pprint(client.entrance_query_count(eval(args[0]),))

elif cmd == 'entrance_get':
  if len(args) != 1:
    print('entrance_get requires 1 args')
    sys.exit(1)
  pp.pprint(client.entrance_get(eval(args[0]),))

elif cmd == 'entrance_delete':
  if len(args) != 2:
    print('entrance_delete requires 2 args')
    sys.exit(1)
  pp.pprint(client.entrance_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
