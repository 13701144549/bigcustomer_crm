#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RealnameStatus:
  NEW = 1
  UPLOADED = 10
  FEERATIO_SET = 20
  CHNLBIND = 30

  _VALUES_TO_NAMES = {
    1: "NEW",
    10: "UPLOADED",
    20: "FEERATIO_SET",
    30: "CHNLBIND",
  }

  _NAMES_TO_VALUES = {
    "NEW": 1,
    "UPLOADED": 10,
    "FEERATIO_SET": 20,
    "CHNLBIND": 30,
  }

class BANK_TYPE:
  PERSONAL = 1
  CORPORATE = 2

  _VALUES_TO_NAMES = {
    1: "PERSONAL",
    2: "CORPORATE",
  }

  _NAMES_TO_VALUES = {
    "PERSONAL": 1,
    "CORPORATE": 2,
  }

class CardbindVerifyStatus:
  PASS = 1
  FAILED = 2
  NOACTION = 3

  _VALUES_TO_NAMES = {
    1: "PASS",
    2: "FAILED",
    3: "NOACTION",
  }

  _NAMES_TO_VALUES = {
    "PASS": 1,
    "FAILED": 2,
    "NOACTION": 3,
  }

class CardbindVerifyMode:
  URL = 1
  HTML = 2

  _VALUES_TO_NAMES = {
    1: "URL",
    2: "HTML",
  }

  _NAMES_TO_VALUES = {
    "URL": 1,
    "HTML": 2,
  }

class FeeRatioMode:
  PERCENT = 1
  FIXED = 2
  MIXED = 3

  _VALUES_TO_NAMES = {
    1: "PERCENT",
    2: "FIXED",
    3: "MIXED",
  }

  _NAMES_TO_VALUES = {
    "PERCENT": 1,
    "FIXED": 2,
    "MIXED": 3,
  }

class FeeRatioType:
  QD_BASIC = 1
  QD_MCHNT_DEFAULT = 2
  MCHNT = 3

  _VALUES_TO_NAMES = {
    1: "QD_BASIC",
    2: "QD_MCHNT_DEFAULT",
    3: "MCHNT",
  }

  _NAMES_TO_VALUES = {
    "QD_BASIC": 1,
    "QD_MCHNT_DEFAULT": 2,
    "MCHNT": 3,
  }

class PointType:
  YES = 1
  NO = 2

  _VALUES_TO_NAMES = {
    1: "YES",
    2: "NO",
  }

  _NAMES_TO_VALUES = {
    "YES": 1,
    "NO": 2,
  }

class FreezeType:
  NO = 1
  YES = 2

  _VALUES_TO_NAMES = {
    1: "NO",
    2: "YES",
  }

  _NAMES_TO_VALUES = {
    "NO": 1,
    "YES": 2,
  }

class SettleType:
  D0 = 1
  D1 = 2
  T0 = 3
  T1 = 4

  _VALUES_TO_NAMES = {
    1: "D0",
    2: "D1",
    3: "T0",
    4: "T1",
  }

  _NAMES_TO_VALUES = {
    "D0": 1,
    "D1": 2,
    "T0": 3,
    "T1": 4,
  }

class FeeMaxType:
  NO = 1
  YES = 2

  _VALUES_TO_NAMES = {
    1: "NO",
    2: "YES",
  }

  _NAMES_TO_VALUES = {
    "NO": 1,
    "YES": 2,
  }

class PayMethod:
  SMS_CODE = 1
  HTML = 2
  URL = 3
  NO_CODE = 4

  _VALUES_TO_NAMES = {
    1: "SMS_CODE",
    2: "HTML",
    3: "URL",
    4: "NO_CODE",
  }

  _NAMES_TO_VALUES = {
    "SMS_CODE": 1,
    "HTML": 2,
    "URL": 3,
    "NO_CODE": 4,
  }

class UserRole:
  SALESMAN = 1
  MCHNT = 2

  _VALUES_TO_NAMES = {
    1: "SALESMAN",
    2: "MCHNT",
  }

  _NAMES_TO_VALUES = {
    "SALESMAN": 1,
    "MCHNT": 2,
  }


class PayquickException(Exception):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PayquickException')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryMeta:
  """
  Attributes:
   - offset
   - count
   - orderby
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'offset', None, 0, ), # 1
    (2, TType.I64, 'count', None, 100, ), # 2
    (3, TType.STRING, 'orderby', None, None, ), # 3
  )

  def __init__(self, offset=thrift_spec[1][4], count=thrift_spec[2][4], orderby=None,):
    self.offset = offset
    self.count = count
    self.orderby = orderby

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderby = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryMeta')
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 1)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.orderby is not None:
      oprot.writeFieldBegin('orderby', TType.STRING, 3)
      oprot.writeString(self.orderby)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Card:
  """
  Attributes:
   - banktype
   - headbankname
   - bankname
   - bankuser
   - bankaccount
   - bankmobile
   - brchbank_code
   - bankProvince
   - bankCity
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'banktype', None, None, ), # 1
    (2, TType.STRING, 'headbankname', None, None, ), # 2
    (3, TType.STRING, 'bankname', None, None, ), # 3
    (4, TType.STRING, 'bankuser', None, None, ), # 4
    (5, TType.STRING, 'bankaccount', None, None, ), # 5
    (6, TType.STRING, 'bankmobile', None, None, ), # 6
    (7, TType.STRING, 'brchbank_code', None, None, ), # 7
    (8, TType.STRING, 'bankProvince', None, None, ), # 8
    (9, TType.STRING, 'bankCity', None, None, ), # 9
  )

  def __init__(self, banktype=None, headbankname=None, bankname=None, bankuser=None, bankaccount=None, bankmobile=None, brchbank_code=None, bankProvince=None, bankCity=None,):
    self.banktype = banktype
    self.headbankname = headbankname
    self.bankname = bankname
    self.bankuser = bankuser
    self.bankaccount = bankaccount
    self.bankmobile = bankmobile
    self.brchbank_code = brchbank_code
    self.bankProvince = bankProvince
    self.bankCity = bankCity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.banktype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.headbankname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bankname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.bankuser = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bankaccount = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bankmobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.brchbank_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bankProvince = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bankCity = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Card')
    if self.banktype is not None:
      oprot.writeFieldBegin('banktype', TType.I32, 1)
      oprot.writeI32(self.banktype)
      oprot.writeFieldEnd()
    if self.headbankname is not None:
      oprot.writeFieldBegin('headbankname', TType.STRING, 2)
      oprot.writeString(self.headbankname)
      oprot.writeFieldEnd()
    if self.bankname is not None:
      oprot.writeFieldBegin('bankname', TType.STRING, 3)
      oprot.writeString(self.bankname)
      oprot.writeFieldEnd()
    if self.bankuser is not None:
      oprot.writeFieldBegin('bankuser', TType.STRING, 4)
      oprot.writeString(self.bankuser)
      oprot.writeFieldEnd()
    if self.bankaccount is not None:
      oprot.writeFieldBegin('bankaccount', TType.STRING, 5)
      oprot.writeString(self.bankaccount)
      oprot.writeFieldEnd()
    if self.bankmobile is not None:
      oprot.writeFieldBegin('bankmobile', TType.STRING, 6)
      oprot.writeString(self.bankmobile)
      oprot.writeFieldEnd()
    if self.brchbank_code is not None:
      oprot.writeFieldBegin('brchbank_code', TType.STRING, 7)
      oprot.writeString(self.brchbank_code)
      oprot.writeFieldEnd()
    if self.bankProvince is not None:
      oprot.writeFieldBegin('bankProvince', TType.STRING, 8)
      oprot.writeString(self.bankProvince)
      oprot.writeFieldEnd()
    if self.bankCity is not None:
      oprot.writeFieldBegin('bankCity', TType.STRING, 9)
      oprot.writeString(self.bankCity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RealnameInfo:
  """
  Attributes:
   - userid
   - card
   - idnumber
   - src
   - status
   - idcard_front_url
   - idcard_back_url
   - bankcard_front_url
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRUCT, 'card', (Card, Card.thrift_spec), None, ), # 3
    (4, TType.STRING, 'idnumber', None, None, ), # 4
    (5, TType.STRING, 'src', None, None, ), # 5
    (6, TType.I16, 'status', None, 10, ), # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'idcard_front_url', None, None, ), # 20
    (21, TType.STRING, 'idcard_back_url', None, None, ), # 21
    (22, TType.STRING, 'bankcard_front_url', None, None, ), # 22
  )

  def __init__(self, userid=None, card=None, idnumber=None, src=None, status=thrift_spec[6][4], idcard_front_url=None, idcard_back_url=None, bankcard_front_url=None,):
    self.userid = userid
    self.card = card
    self.idnumber = idnumber
    self.src = src
    self.status = status
    self.idcard_front_url = idcard_front_url
    self.idcard_back_url = idcard_back_url
    self.bankcard_front_url = bankcard_front_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.card = Card()
          self.card.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.idcard_front_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.idcard_back_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.bankcard_front_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RealnameInfo')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.card is not None:
      oprot.writeFieldBegin('card', TType.STRUCT, 3)
      self.card.write(oprot)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 4)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 5)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 6)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.idcard_front_url is not None:
      oprot.writeFieldBegin('idcard_front_url', TType.STRING, 20)
      oprot.writeString(self.idcard_front_url)
      oprot.writeFieldEnd()
    if self.idcard_back_url is not None:
      oprot.writeFieldBegin('idcard_back_url', TType.STRING, 21)
      oprot.writeString(self.idcard_back_url)
      oprot.writeFieldEnd()
    if self.bankcard_front_url is not None:
      oprot.writeFieldBegin('bankcard_front_url', TType.STRING, 22)
      oprot.writeString(self.bankcard_front_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HaojinRealnameArg:
  """
  Attributes:
   - userid
   - idcard_front_url
   - idcard_back_url
   - bankcard_front_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'idcard_front_url', None, None, ), # 20
    (21, TType.STRING, 'idcard_back_url', None, None, ), # 21
    (22, TType.STRING, 'bankcard_front_url', None, None, ), # 22
  )

  def __init__(self, userid=None, idcard_front_url=None, idcard_back_url=None, bankcard_front_url=None,):
    self.userid = userid
    self.idcard_front_url = idcard_front_url
    self.idcard_back_url = idcard_back_url
    self.bankcard_front_url = bankcard_front_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.idcard_front_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.idcard_back_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.bankcard_front_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HaojinRealnameArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.idcard_front_url is not None:
      oprot.writeFieldBegin('idcard_front_url', TType.STRING, 20)
      oprot.writeString(self.idcard_front_url)
      oprot.writeFieldEnd()
    if self.idcard_back_url is not None:
      oprot.writeFieldBegin('idcard_back_url', TType.STRING, 21)
      oprot.writeString(self.idcard_back_url)
      oprot.writeFieldEnd()
    if self.bankcard_front_url is not None:
      oprot.writeFieldBegin('bankcard_front_url', TType.STRING, 22)
      oprot.writeString(self.bankcard_front_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.idcard_front_url is None:
      raise TProtocol.TProtocolException(message='Required field idcard_front_url is unset!')
    if self.idcard_back_url is None:
      raise TProtocol.TProtocolException(message='Required field idcard_back_url is unset!')
    if self.bankcard_front_url is None:
      raise TProtocol.TProtocolException(message='Required field bankcard_front_url is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardBind:
  """
  Attributes:
   - id
   - userid
   - card
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRUCT, 'card', (Card, Card.thrift_spec), None, ), # 3
  )

  def __init__(self, id=None, userid=None, card=None,):
    self.id = id
    self.userid = userid
    self.card = card

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.card = Card()
          self.card.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardBind')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.card is not None:
      oprot.writeFieldBegin('card', TType.STRUCT, 3)
      self.card.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Payway:
  """
  Attributes:
   - id
   - chnlid
   - title
   - point
   - settle_type
   - fee_mode
   - info
   - memo
   - enable
   - max_type
   - freeze_status
   - freeze_msg
   - limit_amt_min
   - limit_amt_max
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'chnlid', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.I32, 'point', None, None, ), # 4
    (5, TType.I32, 'settle_type', None, None, ), # 5
    (6, TType.I32, 'fee_mode', None, None, ), # 6
    (7, TType.STRING, 'info', None, None, ), # 7
    (8, TType.STRING, 'memo', None, None, ), # 8
    (9, TType.I64, 'enable', None, None, ), # 9
    (10, TType.I32, 'max_type', None, None, ), # 10
    (11, TType.I32, 'freeze_status', None, None, ), # 11
    (12, TType.STRING, 'freeze_msg', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'limit_amt_min', None, None, ), # 20
    (21, TType.I64, 'limit_amt_max', None, None, ), # 21
  )

  def __init__(self, id=None, chnlid=None, title=None, point=None, settle_type=None, fee_mode=None, info=None, memo=None, enable=None, max_type=None, freeze_status=None, freeze_msg=None, limit_amt_min=None, limit_amt_max=None,):
    self.id = id
    self.chnlid = chnlid
    self.title = title
    self.point = point
    self.settle_type = settle_type
    self.fee_mode = fee_mode
    self.info = info
    self.memo = memo
    self.enable = enable
    self.max_type = max_type
    self.freeze_status = freeze_status
    self.freeze_msg = freeze_msg
    self.limit_amt_min = limit_amt_min
    self.limit_amt_max = limit_amt_max

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.chnlid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.point = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.settle_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.fee_mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.enable = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.max_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.freeze_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.freeze_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.limit_amt_min = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.limit_amt_max = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Payway')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.chnlid is not None:
      oprot.writeFieldBegin('chnlid', TType.I64, 2)
      oprot.writeI64(self.chnlid)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.point is not None:
      oprot.writeFieldBegin('point', TType.I32, 4)
      oprot.writeI32(self.point)
      oprot.writeFieldEnd()
    if self.settle_type is not None:
      oprot.writeFieldBegin('settle_type', TType.I32, 5)
      oprot.writeI32(self.settle_type)
      oprot.writeFieldEnd()
    if self.fee_mode is not None:
      oprot.writeFieldBegin('fee_mode', TType.I32, 6)
      oprot.writeI32(self.fee_mode)
      oprot.writeFieldEnd()
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.STRING, 7)
      oprot.writeString(self.info)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 8)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I64, 9)
      oprot.writeI64(self.enable)
      oprot.writeFieldEnd()
    if self.max_type is not None:
      oprot.writeFieldBegin('max_type', TType.I32, 10)
      oprot.writeI32(self.max_type)
      oprot.writeFieldEnd()
    if self.freeze_status is not None:
      oprot.writeFieldBegin('freeze_status', TType.I32, 11)
      oprot.writeI32(self.freeze_status)
      oprot.writeFieldEnd()
    if self.freeze_msg is not None:
      oprot.writeFieldBegin('freeze_msg', TType.STRING, 12)
      oprot.writeString(self.freeze_msg)
      oprot.writeFieldEnd()
    if self.limit_amt_min is not None:
      oprot.writeFieldBegin('limit_amt_min', TType.I64, 20)
      oprot.writeI64(self.limit_amt_min)
      oprot.writeFieldEnd()
    if self.limit_amt_max is not None:
      oprot.writeFieldBegin('limit_amt_max', TType.I64, 21)
      oprot.writeI64(self.limit_amt_max)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PaywayFreezeArg:
  """
  Attributes:
   - payway_id_list
   - freeze_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'payway_id_list', (TType.I64,None), None, ), # 1
    (2, TType.STRING, 'freeze_msg', None, None, ), # 2
  )

  def __init__(self, payway_id_list=None, freeze_msg=None,):
    self.payway_id_list = payway_id_list
    self.freeze_msg = freeze_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.payway_id_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.payway_id_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.freeze_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PaywayFreezeArg')
    if self.payway_id_list is not None:
      oprot.writeFieldBegin('payway_id_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.payway_id_list))
      for iter6 in self.payway_id_list:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.freeze_msg is not None:
      oprot.writeFieldBegin('freeze_msg', TType.STRING, 2)
      oprot.writeString(self.freeze_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.payway_id_list is None:
      raise TProtocol.TProtocolException(message='Required field payway_id_list is unset!')
    if self.freeze_msg is None:
      raise TProtocol.TProtocolException(message='Required field freeze_msg is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PaywayUnFreezeArg:
  """
  Attributes:
   - payway_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'payway_id_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, payway_id_list=None,):
    self.payway_id_list = payway_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.payway_id_list = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.payway_id_list.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PaywayUnFreezeArg')
    if self.payway_id_list is not None:
      oprot.writeFieldBegin('payway_id_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.payway_id_list))
      for iter13 in self.payway_id_list:
        oprot.writeI64(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.payway_id_list is None:
      raise TProtocol.TProtocolException(message='Required field payway_id_list is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChnlBind:
  """
  Attributes:
   - id
   - userid
   - chnlid
   - available
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'chnlid', None, None, ), # 3
    (4, TType.I16, 'available', None, None, ), # 4
  )

  def __init__(self, id=None, userid=None, chnlid=None, available=None,):
    self.id = id
    self.userid = userid
    self.chnlid = chnlid
    self.available = available

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.chnlid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.available = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChnlBind')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.chnlid is not None:
      oprot.writeFieldBegin('chnlid', TType.I64, 3)
      oprot.writeI64(self.chnlid)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I16, 4)
      oprot.writeI16(self.available)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeRatio:
  """
  Attributes:
   - id
   - userid
   - payway_id
   - fee_type
   - fee_percent
   - fee_fix
   - memo
   - fee_max
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'payway_id', None, None, ), # 3
    (4, TType.I32, 'fee_type', None, None, ), # 4
    (5, TType.STRING, 'fee_percent', None, None, ), # 5
    (6, TType.I64, 'fee_fix', None, None, ), # 6
    (7, TType.STRING, 'memo', None, None, ), # 7
    (8, TType.I64, 'fee_max', None, None, ), # 8
  )

  def __init__(self, id=None, userid=None, payway_id=None, fee_type=None, fee_percent=None, fee_fix=None, memo=None, fee_max=None,):
    self.id = id
    self.userid = userid
    self.payway_id = payway_id
    self.fee_type = fee_type
    self.fee_percent = fee_percent
    self.fee_fix = fee_fix
    self.memo = memo
    self.fee_max = fee_max

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.payway_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.fee_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.fee_percent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.fee_fix = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.fee_max = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeRatio')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.payway_id is not None:
      oprot.writeFieldBegin('payway_id', TType.I64, 3)
      oprot.writeI64(self.payway_id)
      oprot.writeFieldEnd()
    if self.fee_type is not None:
      oprot.writeFieldBegin('fee_type', TType.I32, 4)
      oprot.writeI32(self.fee_type)
      oprot.writeFieldEnd()
    if self.fee_percent is not None:
      oprot.writeFieldBegin('fee_percent', TType.STRING, 5)
      oprot.writeString(self.fee_percent)
      oprot.writeFieldEnd()
    if self.fee_fix is not None:
      oprot.writeFieldBegin('fee_fix', TType.I64, 6)
      oprot.writeI64(self.fee_fix)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 7)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.fee_max is not None:
      oprot.writeFieldBegin('fee_max', TType.I64, 8)
      oprot.writeI64(self.fee_max)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Relation:
  """
  Attributes:
   - id
   - userid
   - inviter_uid
   - inviter_role
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'inviter_uid', None, None, ), # 3
    (4, TType.I32, 'inviter_role', None, None, ), # 4
    (5, TType.STRING, 'memo', None, None, ), # 5
  )

  def __init__(self, id=None, userid=None, inviter_uid=None, inviter_role=None, memo=None,):
    self.id = id
    self.userid = userid
    self.inviter_uid = inviter_uid
    self.inviter_role = inviter_role
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.inviter_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.inviter_role = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Relation')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.inviter_uid is not None:
      oprot.writeFieldBegin('inviter_uid', TType.I64, 3)
      oprot.writeI64(self.inviter_uid)
      oprot.writeFieldEnd()
    if self.inviter_role is not None:
      oprot.writeFieldBegin('inviter_role', TType.I32, 4)
      oprot.writeI32(self.inviter_role)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 5)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RealnameQueryArg:
  """
  Attributes:
   - query_meta
   - userid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 2
  )

  def __init__(self, query_meta=None, userid_list=None,):
    self.query_meta = query_meta
    self.userid_list = userid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI64();
            self.userid_list.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RealnameQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter20 in self.userid_list:
        oprot.writeI64(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardBindQueryArg:
  """
  Attributes:
   - query_meta
   - userid_list
   - bankaccount_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'bankaccount_list', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, query_meta=None, userid_list=None, bankaccount_list=None,):
    self.query_meta = query_meta
    self.userid_list = userid_list
    self.bankaccount_list = bankaccount_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI64();
            self.userid_list.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.bankaccount_list = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readString();
            self.bankaccount_list.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardBindQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter33 in self.userid_list:
        oprot.writeI64(iter33)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bankaccount_list is not None:
      oprot.writeFieldBegin('bankaccount_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.bankaccount_list))
      for iter34 in self.bankaccount_list:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardbindVerifyArg:
  """
  Attributes:
   - userid
   - payway_id
   - cardbind_id
   - redirect_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'payway_id', None, None, ), # 2
    (3, TType.I64, 'cardbind_id', None, None, ), # 3
    (4, TType.STRING, 'redirect_url', None, None, ), # 4
  )

  def __init__(self, userid=None, payway_id=None, cardbind_id=None, redirect_url=None,):
    self.userid = userid
    self.payway_id = payway_id
    self.cardbind_id = cardbind_id
    self.redirect_url = redirect_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.payway_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.cardbind_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.redirect_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardbindVerifyArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.payway_id is not None:
      oprot.writeFieldBegin('payway_id', TType.I64, 2)
      oprot.writeI64(self.payway_id)
      oprot.writeFieldEnd()
    if self.cardbind_id is not None:
      oprot.writeFieldBegin('cardbind_id', TType.I64, 3)
      oprot.writeI64(self.cardbind_id)
      oprot.writeFieldEnd()
    if self.redirect_url is not None:
      oprot.writeFieldBegin('redirect_url', TType.STRING, 4)
      oprot.writeString(self.redirect_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.payway_id is None:
      raise TProtocol.TProtocolException(message='Required field payway_id is unset!')
    if self.cardbind_id is None:
      raise TProtocol.TProtocolException(message='Required field cardbind_id is unset!')
    if self.redirect_url is None:
      raise TProtocol.TProtocolException(message='Required field redirect_url is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardbindVerifyRet:
  """
  Attributes:
   - mode
   - info
   - extra
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mode', None, None, ), # 1
    (2, TType.STRING, 'info', None, None, ), # 2
    (3, TType.STRING, 'extra', None, None, ), # 3
  )

  def __init__(self, mode=None, info=None, extra=None,):
    self.mode = mode
    self.info = info
    self.extra = extra

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.extra = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardbindVerifyRet')
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 1)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.STRING, 2)
      oprot.writeString(self.info)
      oprot.writeFieldEnd()
    if self.extra is not None:
      oprot.writeFieldBegin('extra', TType.STRING, 3)
      oprot.writeString(self.extra)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mode is None:
      raise TProtocol.TProtocolException(message='Required field mode is unset!')
    if self.info is None:
      raise TProtocol.TProtocolException(message='Required field info is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardbindVerifyCheckArg:
  """
  Attributes:
   - userid
   - payway_id
   - cardbind_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'payway_id', None, None, ), # 2
    (3, TType.I64, 'cardbind_id', None, None, ), # 3
  )

  def __init__(self, userid=None, payway_id=None, cardbind_id=None,):
    self.userid = userid
    self.payway_id = payway_id
    self.cardbind_id = cardbind_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.payway_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.cardbind_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardbindVerifyCheckArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.payway_id is not None:
      oprot.writeFieldBegin('payway_id', TType.I64, 2)
      oprot.writeI64(self.payway_id)
      oprot.writeFieldEnd()
    if self.cardbind_id is not None:
      oprot.writeFieldBegin('cardbind_id', TType.I64, 3)
      oprot.writeI64(self.cardbind_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.payway_id is None:
      raise TProtocol.TProtocolException(message='Required field payway_id is unset!')
    if self.cardbind_id is None:
      raise TProtocol.TProtocolException(message='Required field cardbind_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardbindVerifyCheckRet:
  """
  Attributes:
   - status
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, status=None, message=None,):
    self.status = status
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardbindVerifyCheckRet')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChnlBindQueryArg:
  """
  Attributes:
   - query_meta
   - userid_list
   - chnlid_list
   - available
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'chnlid_list', (TType.I64,None), None, ), # 3
    (4, TType.I16, 'available', None, None, ), # 4
  )

  def __init__(self, query_meta=None, userid_list=None, chnlid_list=None, available=None,):
    self.query_meta = query_meta
    self.userid_list = userid_list
    self.chnlid_list = chnlid_list
    self.available = available

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI64();
            self.userid_list.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.chnlid_list = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = iprot.readI64();
            self.chnlid_list.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.available = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChnlBindQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter47 in self.userid_list:
        oprot.writeI64(iter47)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chnlid_list is not None:
      oprot.writeFieldBegin('chnlid_list', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.chnlid_list))
      for iter48 in self.chnlid_list:
        oprot.writeI64(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I16, 4)
      oprot.writeI16(self.available)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChnlbindCreateRet:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChnlbindCreateRet')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PaywayQueryArg:
  """
  Attributes:
   - query_meta
   - chnlid_list
   - point_list
   - settle_type_list
   - fee_mode_list
   - enable
   - title
   - freeze_status_list
   - max_type_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'chnlid_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'point_list', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'settle_type_list', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'fee_mode_list', (TType.I32,None), None, ), # 5
    (6, TType.I16, 'enable', None, None, ), # 6
    (7, TType.STRING, 'title', None, None, ), # 7
    (8, TType.LIST, 'freeze_status_list', (TType.I32,None), None, ), # 8
    (9, TType.LIST, 'max_type_list', (TType.I32,None), None, ), # 9
  )

  def __init__(self, query_meta=None, chnlid_list=None, point_list=None, settle_type_list=None, fee_mode_list=None, enable=None, title=None, freeze_status_list=None, max_type_list=None,):
    self.query_meta = query_meta
    self.chnlid_list = chnlid_list
    self.point_list = point_list
    self.settle_type_list = settle_type_list
    self.fee_mode_list = fee_mode_list
    self.enable = enable
    self.title = title
    self.freeze_status_list = freeze_status_list
    self.max_type_list = max_type_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.chnlid_list = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readI64();
            self.chnlid_list.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.point_list = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readI64();
            self.point_list.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.settle_type_list = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = iprot.readI32();
            self.settle_type_list.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.fee_mode_list = []
          (_etype70, _size67) = iprot.readListBegin()
          for _i71 in xrange(_size67):
            _elem72 = iprot.readI32();
            self.fee_mode_list.append(_elem72)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.enable = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.freeze_status_list = []
          (_etype76, _size73) = iprot.readListBegin()
          for _i77 in xrange(_size73):
            _elem78 = iprot.readI32();
            self.freeze_status_list.append(_elem78)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.max_type_list = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = iprot.readI32();
            self.max_type_list.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PaywayQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.chnlid_list is not None:
      oprot.writeFieldBegin('chnlid_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.chnlid_list))
      for iter85 in self.chnlid_list:
        oprot.writeI64(iter85)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.point_list is not None:
      oprot.writeFieldBegin('point_list', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.point_list))
      for iter86 in self.point_list:
        oprot.writeI64(iter86)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.settle_type_list is not None:
      oprot.writeFieldBegin('settle_type_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.settle_type_list))
      for iter87 in self.settle_type_list:
        oprot.writeI32(iter87)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fee_mode_list is not None:
      oprot.writeFieldBegin('fee_mode_list', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.fee_mode_list))
      for iter88 in self.fee_mode_list:
        oprot.writeI32(iter88)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I16, 6)
      oprot.writeI16(self.enable)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 7)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.freeze_status_list is not None:
      oprot.writeFieldBegin('freeze_status_list', TType.LIST, 8)
      oprot.writeListBegin(TType.I32, len(self.freeze_status_list))
      for iter89 in self.freeze_status_list:
        oprot.writeI32(iter89)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.max_type_list is not None:
      oprot.writeFieldBegin('max_type_list', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.max_type_list))
      for iter90 in self.max_type_list:
        oprot.writeI32(iter90)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeRatioQueryArg:
  """
  Attributes:
   - query_meta
   - payway_id_list
   - userid_list
   - fee_type_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'payway_id_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'fee_type_list', (TType.I32,None), None, ), # 4
  )

  def __init__(self, query_meta=None, payway_id_list=None, userid_list=None, fee_type_list=None,):
    self.query_meta = query_meta
    self.payway_id_list = payway_id_list
    self.userid_list = userid_list
    self.fee_type_list = fee_type_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.payway_id_list = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = iprot.readI64();
            self.payway_id_list.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype100, _size97) = iprot.readListBegin()
          for _i101 in xrange(_size97):
            _elem102 = iprot.readI64();
            self.userid_list.append(_elem102)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.fee_type_list = []
          (_etype106, _size103) = iprot.readListBegin()
          for _i107 in xrange(_size103):
            _elem108 = iprot.readI32();
            self.fee_type_list.append(_elem108)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeRatioQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.payway_id_list is not None:
      oprot.writeFieldBegin('payway_id_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.payway_id_list))
      for iter109 in self.payway_id_list:
        oprot.writeI64(iter109)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter110 in self.userid_list:
        oprot.writeI64(iter110)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fee_type_list is not None:
      oprot.writeFieldBegin('fee_type_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.fee_type_list))
      for iter111 in self.fee_type_list:
        oprot.writeI32(iter111)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeRatioSyncQudaoArg:
  """
  Attributes:
   - mchnt_uid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'mchnt_uid_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, mchnt_uid_list=None,):
    self.mchnt_uid_list = mchnt_uid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.mchnt_uid_list = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = iprot.readI64();
            self.mchnt_uid_list.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeRatioSyncQudaoArg')
    if self.mchnt_uid_list is not None:
      oprot.writeFieldBegin('mchnt_uid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.mchnt_uid_list))
      for iter118 in self.mchnt_uid_list:
        oprot.writeI64(iter118)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_uid_list is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_uid_list is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeRatioSync2ChnlArg:
  """
  Attributes:
   - feeratio_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'feeratio_id_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, feeratio_id_list=None,):
    self.feeratio_id_list = feeratio_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.feeratio_id_list = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = iprot.readI64();
            self.feeratio_id_list.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeRatioSync2ChnlArg')
    if self.feeratio_id_list is not None:
      oprot.writeFieldBegin('feeratio_id_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.feeratio_id_list))
      for iter125 in self.feeratio_id_list:
        oprot.writeI64(iter125)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.feeratio_id_list is None:
      raise TProtocol.TProtocolException(message='Required field feeratio_id_list is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeRatioSync2ChnlRet:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeRatioSync2ChnlRet')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RelationQueryArg:
  """
  Attributes:
   - query_meta
   - userid
   - inviter_uid_list
   - inviter_role_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userid', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'inviter_uid_list', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'inviter_role_list', (TType.I32,None), None, ), # 4
  )

  def __init__(self, query_meta=None, userid=None, inviter_uid_list=None, inviter_role_list=None,):
    self.query_meta = query_meta
    self.userid = userid
    self.inviter_uid_list = inviter_uid_list
    self.inviter_role_list = inviter_role_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userid = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = iprot.readI64();
            self.userid.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.inviter_uid_list = []
          (_etype135, _size132) = iprot.readListBegin()
          for _i136 in xrange(_size132):
            _elem137 = iprot.readI64();
            self.inviter_uid_list.append(_elem137)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.inviter_role_list = []
          (_etype141, _size138) = iprot.readListBegin()
          for _i142 in xrange(_size138):
            _elem143 = iprot.readI32();
            self.inviter_role_list.append(_elem143)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RelationQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userid))
      for iter144 in self.userid:
        oprot.writeI64(iter144)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.inviter_uid_list is not None:
      oprot.writeFieldBegin('inviter_uid_list', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.inviter_uid_list))
      for iter145 in self.inviter_uid_list:
        oprot.writeI64(iter145)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.inviter_role_list is not None:
      oprot.writeFieldBegin('inviter_role_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.inviter_role_list))
      for iter146 in self.inviter_role_list:
        oprot.writeI32(iter146)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
