#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import PayquickServer
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  RealnameInfo realname_create(RealnameInfo info, i64 admin)'
  print '   realname_query(RealnameQueryArg q)'
  print '   realname_get( l)'
  print '  RealnameInfo realname_haojin_create(HaojinRealnameArg info, i64 admin)'
  print '  CardBind cardbind_create(CardBind info, i64 admin)'
  print '   cardbind_query(CardBindQueryArg q)'
  print '   cardbind_get( l)'
  print '  CardbindVerifyRet cardbind_verify(CardbindVerifyArg arg, i64 admin)'
  print '  CardbindVerifyCheckRet cardbind_verify_check(CardbindVerifyCheckArg arg)'
  print '   chnlbind_query(ChnlBindQueryArg q)'
  print '   chnlbind_get( l)'
  print '  ChnlbindCreateRet chnlbind_create(ChnlBind info, i64 admin)'
  print '  Payway payway_create(Payway info, i64 admin)'
  print '   payway_query(PaywayQueryArg q)'
  print '   payway_get( l)'
  print '  Payway payway_update(Payway info, i64 admin)'
  print '  void payway_freeze(PaywayFreezeArg q, i64 admin)'
  print '  void payway_unfreeze(PaywayUnFreezeArg q, i64 admin)'
  print '  FeeRatio feeratio_create(FeeRatio info, i64 admin)'
  print '   feeratio_query(FeeRatioQueryArg q)'
  print '   feeratio_get( l)'
  print '  FeeRatio feeratio_update(FeeRatio info, i64 admin)'
  print '   feeratio_sync_qudao(FeeRatioSyncQudaoArg arg, i64 admin)'
  print '  FeeRatioSync2ChnlRet feeratio_sync2chnl(FeeRatioSync2ChnlArg arg, i64 admin)'
  print '  Relation relation_create(Relation info, i64 admin)'
  print '   relation_query(RelationQueryArg q)'
  print '   relation_get( l)'
  print '  void ping()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = PayquickServer.Client(protocol)
transport.open()

if cmd == 'realname_create':
  if len(args) != 2:
    print 'realname_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.realname_create(eval(args[0]),eval(args[1]),))

elif cmd == 'realname_query':
  if len(args) != 1:
    print 'realname_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.realname_query(eval(args[0]),))

elif cmd == 'realname_get':
  if len(args) != 1:
    print 'realname_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.realname_get(eval(args[0]),))

elif cmd == 'realname_haojin_create':
  if len(args) != 2:
    print 'realname_haojin_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.realname_haojin_create(eval(args[0]),eval(args[1]),))

elif cmd == 'cardbind_create':
  if len(args) != 2:
    print 'cardbind_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.cardbind_create(eval(args[0]),eval(args[1]),))

elif cmd == 'cardbind_query':
  if len(args) != 1:
    print 'cardbind_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.cardbind_query(eval(args[0]),))

elif cmd == 'cardbind_get':
  if len(args) != 1:
    print 'cardbind_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.cardbind_get(eval(args[0]),))

elif cmd == 'cardbind_verify':
  if len(args) != 2:
    print 'cardbind_verify requires 2 args'
    sys.exit(1)
  pp.pprint(client.cardbind_verify(eval(args[0]),eval(args[1]),))

elif cmd == 'cardbind_verify_check':
  if len(args) != 1:
    print 'cardbind_verify_check requires 1 args'
    sys.exit(1)
  pp.pprint(client.cardbind_verify_check(eval(args[0]),))

elif cmd == 'chnlbind_query':
  if len(args) != 1:
    print 'chnlbind_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.chnlbind_query(eval(args[0]),))

elif cmd == 'chnlbind_get':
  if len(args) != 1:
    print 'chnlbind_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.chnlbind_get(eval(args[0]),))

elif cmd == 'chnlbind_create':
  if len(args) != 2:
    print 'chnlbind_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.chnlbind_create(eval(args[0]),eval(args[1]),))

elif cmd == 'payway_create':
  if len(args) != 2:
    print 'payway_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.payway_create(eval(args[0]),eval(args[1]),))

elif cmd == 'payway_query':
  if len(args) != 1:
    print 'payway_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.payway_query(eval(args[0]),))

elif cmd == 'payway_get':
  if len(args) != 1:
    print 'payway_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.payway_get(eval(args[0]),))

elif cmd == 'payway_update':
  if len(args) != 2:
    print 'payway_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.payway_update(eval(args[0]),eval(args[1]),))

elif cmd == 'payway_freeze':
  if len(args) != 2:
    print 'payway_freeze requires 2 args'
    sys.exit(1)
  pp.pprint(client.payway_freeze(eval(args[0]),eval(args[1]),))

elif cmd == 'payway_unfreeze':
  if len(args) != 2:
    print 'payway_unfreeze requires 2 args'
    sys.exit(1)
  pp.pprint(client.payway_unfreeze(eval(args[0]),eval(args[1]),))

elif cmd == 'feeratio_create':
  if len(args) != 2:
    print 'feeratio_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.feeratio_create(eval(args[0]),eval(args[1]),))

elif cmd == 'feeratio_query':
  if len(args) != 1:
    print 'feeratio_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.feeratio_query(eval(args[0]),))

elif cmd == 'feeratio_get':
  if len(args) != 1:
    print 'feeratio_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.feeratio_get(eval(args[0]),))

elif cmd == 'feeratio_update':
  if len(args) != 2:
    print 'feeratio_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.feeratio_update(eval(args[0]),eval(args[1]),))

elif cmd == 'feeratio_sync_qudao':
  if len(args) != 2:
    print 'feeratio_sync_qudao requires 2 args'
    sys.exit(1)
  pp.pprint(client.feeratio_sync_qudao(eval(args[0]),eval(args[1]),))

elif cmd == 'feeratio_sync2chnl':
  if len(args) != 2:
    print 'feeratio_sync2chnl requires 2 args'
    sys.exit(1)
  pp.pprint(client.feeratio_sync2chnl(eval(args[0]),eval(args[1]),))

elif cmd == 'relation_create':
  if len(args) != 2:
    print 'relation_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.relation_create(eval(args[0]),eval(args[1]),))

elif cmd == 'relation_query':
  if len(args) != 1:
    print 'relation_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.relation_query(eval(args[0]),))

elif cmd == 'relation_get':
  if len(args) != 1:
    print 'relation_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.relation_get(eval(args[0]),))

elif cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
