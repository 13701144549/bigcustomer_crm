#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class MessageSendType:
  INSTANT = 1
  TIMING = 2

  _VALUES_TO_NAMES = {
    1: "INSTANT",
    2: "TIMING",
  }

  _NAMES_TO_VALUES = {
    "INSTANT": 1,
    "TIMING": 2,
  }

class MessageSendStatus:
  PENDING = 1
  DONE = 2

  _VALUES_TO_NAMES = {
    1: "PENDING",
    2: "DONE",
  }

  _NAMES_TO_VALUES = {
    "PENDING": 1,
    "DONE": 2,
  }

class MessageReadStatus:
  UNREAD = 1
  READ = 2

  _VALUES_TO_NAMES = {
    1: "UNREAD",
    2: "READ",
  }

  _NAMES_TO_VALUES = {
    "UNREAD": 1,
    "READ": 2,
  }

class MessageBindStatus:
  BIND = 1
  UNBIND = 2

  _VALUES_TO_NAMES = {
    1: "BIND",
    2: "UNBIND",
  }

  _NAMES_TO_VALUES = {
    "BIND": 1,
    "UNBIND": 2,
  }

class MessageSpecType:
  ALLUSERS = 1
  UPLOADFILE = 2
  CUSTOM = 3

  _VALUES_TO_NAMES = {
    1: "ALLUSERS",
    2: "UPLOADFILE",
    3: "CUSTOM",
  }

  _NAMES_TO_VALUES = {
    "ALLUSERS": 1,
    "UPLOADFILE": 2,
    "CUSTOM": 3,
  }

class MessageStatus:
  ENABLE = 1
  DISABLE = 2

  _VALUES_TO_NAMES = {
    1: "ENABLE",
    2: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 1,
    "DISABLE": 2,
  }

class MessagePush:
  ENABLE = 1
  DISABLE = 2

  _VALUES_TO_NAMES = {
    1: "ENABLE",
    2: "DISABLE",
  }

  _NAMES_TO_VALUES = {
    "ENABLE": 1,
    "DISABLE": 2,
  }


class SalesmanException(Exception):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SalesmanException')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Message:
  """
  Attributes:
   - message_id
   - title
   - brief
   - content
   - ispush
   - send_type
   - send_time
   - create_time
   - pushlink
   - status
   - send_status
   - spec_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'message_id', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'brief', None, None, ), # 3
    (4, TType.STRING, 'content', None, None, ), # 4
    (5, TType.I32, 'ispush', None, None, ), # 5
    (6, TType.I32, 'send_type', None, None, ), # 6
    (7, TType.STRING, 'send_time', None, None, ), # 7
    (8, TType.STRING, 'create_time', None, None, ), # 8
    (9, TType.STRING, 'pushlink', None, None, ), # 9
    (10, TType.I32, 'status', None, None, ), # 10
    (11, TType.I32, 'send_status', None, None, ), # 11
    (12, TType.I32, 'spec_type', None, None, ), # 12
  )

  def __init__(self, message_id=None, title=None, brief=None, content=None, ispush=None, send_type=None, send_time=None, create_time=None, pushlink=None, status=None, send_status=None, spec_type=None,):
    self.message_id = message_id
    self.title = title
    self.brief = brief
    self.content = content
    self.ispush = ispush
    self.send_type = send_type
    self.send_time = send_time
    self.create_time = create_time
    self.pushlink = pushlink
    self.status = status
    self.send_status = send_status
    self.spec_type = spec_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.message_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.brief = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.ispush = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.send_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.send_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.create_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.pushlink = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.send_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.spec_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Message')
    if self.message_id is not None:
      oprot.writeFieldBegin('message_id', TType.I64, 1)
      oprot.writeI64(self.message_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.brief is not None:
      oprot.writeFieldBegin('brief', TType.STRING, 3)
      oprot.writeString(self.brief)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 4)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.ispush is not None:
      oprot.writeFieldBegin('ispush', TType.I32, 5)
      oprot.writeI32(self.ispush)
      oprot.writeFieldEnd()
    if self.send_type is not None:
      oprot.writeFieldBegin('send_type', TType.I32, 6)
      oprot.writeI32(self.send_type)
      oprot.writeFieldEnd()
    if self.send_time is not None:
      oprot.writeFieldBegin('send_time', TType.STRING, 7)
      oprot.writeString(self.send_time)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 8)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.pushlink is not None:
      oprot.writeFieldBegin('pushlink', TType.STRING, 9)
      oprot.writeString(self.pushlink)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 10)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.send_status is not None:
      oprot.writeFieldBegin('send_status', TType.I32, 11)
      oprot.writeI32(self.send_status)
      oprot.writeFieldEnd()
    if self.spec_type is not None:
      oprot.writeFieldBegin('spec_type', TType.I32, 12)
      oprot.writeI32(self.spec_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MessageBindInfo:
  """
  Attributes:
   - bind_id
   - slsm_uid
   - message_id
   - read_status
   - bind_status
   - create_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bind_id', None, None, ), # 1
    (2, TType.I64, 'slsm_uid', None, None, ), # 2
    (3, TType.I64, 'message_id', None, None, ), # 3
    (4, TType.I32, 'read_status', None, None, ), # 4
    (5, TType.I32, 'bind_status', None, None, ), # 5
    (6, TType.STRING, 'create_time', None, None, ), # 6
  )

  def __init__(self, bind_id=None, slsm_uid=None, message_id=None, read_status=None, bind_status=None, create_time=None,):
    self.bind_id = bind_id
    self.slsm_uid = slsm_uid
    self.message_id = message_id
    self.read_status = read_status
    self.bind_status = bind_status
    self.create_time = create_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bind_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.slsm_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.message_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.read_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.bind_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.create_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MessageBindInfo')
    if self.bind_id is not None:
      oprot.writeFieldBegin('bind_id', TType.I64, 1)
      oprot.writeI64(self.bind_id)
      oprot.writeFieldEnd()
    if self.slsm_uid is not None:
      oprot.writeFieldBegin('slsm_uid', TType.I64, 2)
      oprot.writeI64(self.slsm_uid)
      oprot.writeFieldEnd()
    if self.message_id is not None:
      oprot.writeFieldBegin('message_id', TType.I64, 3)
      oprot.writeI64(self.message_id)
      oprot.writeFieldEnd()
    if self.read_status is not None:
      oprot.writeFieldBegin('read_status', TType.I32, 4)
      oprot.writeI32(self.read_status)
      oprot.writeFieldEnd()
    if self.bind_status is not None:
      oprot.writeFieldBegin('bind_status', TType.I32, 5)
      oprot.writeI32(self.bind_status)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 6)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryMeta:
  """
  Attributes:
   - offset
   - count
   - orderby
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'offset', None, 0, ), # 1
    (2, TType.I64, 'count', None, 100, ), # 2
    (3, TType.STRING, 'orderby', None, None, ), # 3
  )

  def __init__(self, offset=thrift_spec[1][4], count=thrift_spec[2][4], orderby=None,):
    self.offset = offset
    self.count = count
    self.orderby = orderby

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderby = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryMeta')
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 1)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.orderby is not None:
      oprot.writeFieldBegin('orderby', TType.STRING, 3)
      oprot.writeString(self.orderby)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MessageQueryArg:
  """
  Attributes:
   - query_meta
   - message_ids
   - title
   - ispush
   - create_start_time
   - create_end_time
   - send_start_time
   - send_end_time
   - send_status
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'message_ids', (TType.I64,None), None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.I32, 'ispush', None, None, ), # 4
    (5, TType.STRING, 'create_start_time', None, None, ), # 5
    (6, TType.STRING, 'create_end_time', None, None, ), # 6
    (7, TType.STRING, 'send_start_time', None, None, ), # 7
    (8, TType.STRING, 'send_end_time', None, None, ), # 8
    (9, TType.I32, 'send_status', None, None, ), # 9
    (10, TType.I32, 'status', None, None, ), # 10
  )

  def __init__(self, query_meta=None, message_ids=None, title=None, ispush=None, create_start_time=None, create_end_time=None, send_start_time=None, send_end_time=None, send_status=None, status=None,):
    self.query_meta = query_meta
    self.message_ids = message_ids
    self.title = title
    self.ispush = ispush
    self.create_start_time = create_start_time
    self.create_end_time = create_end_time
    self.send_start_time = send_start_time
    self.send_end_time = send_end_time
    self.send_status = send_status
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.message_ids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.message_ids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.ispush = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.create_start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.create_end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.send_start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.send_end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.send_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MessageQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.message_ids is not None:
      oprot.writeFieldBegin('message_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.message_ids))
      for iter6 in self.message_ids:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.ispush is not None:
      oprot.writeFieldBegin('ispush', TType.I32, 4)
      oprot.writeI32(self.ispush)
      oprot.writeFieldEnd()
    if self.create_start_time is not None:
      oprot.writeFieldBegin('create_start_time', TType.STRING, 5)
      oprot.writeString(self.create_start_time)
      oprot.writeFieldEnd()
    if self.create_end_time is not None:
      oprot.writeFieldBegin('create_end_time', TType.STRING, 6)
      oprot.writeString(self.create_end_time)
      oprot.writeFieldEnd()
    if self.send_start_time is not None:
      oprot.writeFieldBegin('send_start_time', TType.STRING, 7)
      oprot.writeString(self.send_start_time)
      oprot.writeFieldEnd()
    if self.send_end_time is not None:
      oprot.writeFieldBegin('send_end_time', TType.STRING, 8)
      oprot.writeString(self.send_end_time)
      oprot.writeFieldEnd()
    if self.send_status is not None:
      oprot.writeFieldBegin('send_status', TType.I32, 9)
      oprot.writeI32(self.send_status)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 10)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MessageBindQueryArg:
  """
  Attributes:
   - query_meta
   - bind_ids
   - slsm_uids
   - message_ids
   - read_status
   - bind_status
   - create_start_time
   - create_end_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'bind_ids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'slsm_uids', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'message_ids', (TType.I64,None), None, ), # 4
    (5, TType.I32, 'read_status', None, None, ), # 5
    (6, TType.I32, 'bind_status', None, None, ), # 6
    (7, TType.STRING, 'create_start_time', None, None, ), # 7
    (8, TType.STRING, 'create_end_time', None, None, ), # 8
  )

  def __init__(self, query_meta=None, bind_ids=None, slsm_uids=None, message_ids=None, read_status=None, bind_status=None, create_start_time=None, create_end_time=None,):
    self.query_meta = query_meta
    self.bind_ids = bind_ids
    self.slsm_uids = slsm_uids
    self.message_ids = message_ids
    self.read_status = read_status
    self.bind_status = bind_status
    self.create_start_time = create_start_time
    self.create_end_time = create_end_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.bind_ids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.bind_ids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.slsm_uids = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readI64();
            self.slsm_uids.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.message_ids = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = iprot.readI64();
            self.message_ids.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.read_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.bind_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.create_start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.create_end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MessageBindQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.bind_ids is not None:
      oprot.writeFieldBegin('bind_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.bind_ids))
      for iter25 in self.bind_ids:
        oprot.writeI64(iter25)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.slsm_uids is not None:
      oprot.writeFieldBegin('slsm_uids', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.slsm_uids))
      for iter26 in self.slsm_uids:
        oprot.writeI64(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.message_ids is not None:
      oprot.writeFieldBegin('message_ids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.message_ids))
      for iter27 in self.message_ids:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.read_status is not None:
      oprot.writeFieldBegin('read_status', TType.I32, 5)
      oprot.writeI32(self.read_status)
      oprot.writeFieldEnd()
    if self.bind_status is not None:
      oprot.writeFieldBegin('bind_status', TType.I32, 6)
      oprot.writeI32(self.bind_status)
      oprot.writeFieldEnd()
    if self.create_start_time is not None:
      oprot.writeFieldBegin('create_start_time', TType.STRING, 7)
      oprot.writeString(self.create_start_time)
      oprot.writeFieldEnd()
    if self.create_end_time is not None:
      oprot.writeFieldBegin('create_end_time', TType.STRING, 8)
      oprot.writeString(self.create_end_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
