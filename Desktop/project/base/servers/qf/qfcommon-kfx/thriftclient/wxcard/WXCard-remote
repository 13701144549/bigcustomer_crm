#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import WXCard
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i64 ping()'
  print '  string auth_event(MPEvent me)'
  print '  string realname_event(MPEvent me)'
  print '  Merchant merchant_create(Merchant merchant, i64 admin)'
  print '   merchant_query(MerchantQueryArg q)'
  print '  i64 merchant_query_count(MerchantQueryArg q)'
  print '   merchant_get( merchant_ids)'
  print '  void merchant_update( merchant_info, i64 admin)'
  print '   cardtpl_query(CardtplQueryArg q)'
  print '  i64 cardtpl_query_count(CardtplQueryArg q)'
  print '   cardtpl_get( cardtpl_ids)'
  print '  void cardtpl_update( cardtpl_update_info, i64 admin)'
  print '  void cardtpl_manual_make(CardtplManualMakeInfo c, i64 admin)'
  print '   card_query(CardQueryArg q)'
  print '  i64 card_query_count(CardQueryArg q)'
  print '   card_get( card_ids)'
  print '  void card_interface_active(CardInterfaceActiveInfo c, i64 admin)'
  print '  string pay_gift_card(string card_id)'
  print '   get_card_list(string openid, string appid)'
  print '  string get_cardcode_by_openid(string openid, string card_id)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = WXCard.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'auth_event':
  if len(args) != 1:
    print 'auth_event requires 1 args'
    sys.exit(1)
  pp.pprint(client.auth_event(eval(args[0]),))

elif cmd == 'realname_event':
  if len(args) != 1:
    print 'realname_event requires 1 args'
    sys.exit(1)
  pp.pprint(client.realname_event(eval(args[0]),))

elif cmd == 'merchant_create':
  if len(args) != 2:
    print 'merchant_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.merchant_create(eval(args[0]),eval(args[1]),))

elif cmd == 'merchant_query':
  if len(args) != 1:
    print 'merchant_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.merchant_query(eval(args[0]),))

elif cmd == 'merchant_query_count':
  if len(args) != 1:
    print 'merchant_query_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.merchant_query_count(eval(args[0]),))

elif cmd == 'merchant_get':
  if len(args) != 1:
    print 'merchant_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.merchant_get(eval(args[0]),))

elif cmd == 'merchant_update':
  if len(args) != 2:
    print 'merchant_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.merchant_update(eval(args[0]),eval(args[1]),))

elif cmd == 'cardtpl_query':
  if len(args) != 1:
    print 'cardtpl_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.cardtpl_query(eval(args[0]),))

elif cmd == 'cardtpl_query_count':
  if len(args) != 1:
    print 'cardtpl_query_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.cardtpl_query_count(eval(args[0]),))

elif cmd == 'cardtpl_get':
  if len(args) != 1:
    print 'cardtpl_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.cardtpl_get(eval(args[0]),))

elif cmd == 'cardtpl_update':
  if len(args) != 2:
    print 'cardtpl_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.cardtpl_update(eval(args[0]),eval(args[1]),))

elif cmd == 'cardtpl_manual_make':
  if len(args) != 2:
    print 'cardtpl_manual_make requires 2 args'
    sys.exit(1)
  pp.pprint(client.cardtpl_manual_make(eval(args[0]),eval(args[1]),))

elif cmd == 'card_query':
  if len(args) != 1:
    print 'card_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_query(eval(args[0]),))

elif cmd == 'card_query_count':
  if len(args) != 1:
    print 'card_query_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_query_count(eval(args[0]),))

elif cmd == 'card_get':
  if len(args) != 1:
    print 'card_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_get(eval(args[0]),))

elif cmd == 'card_interface_active':
  if len(args) != 2:
    print 'card_interface_active requires 2 args'
    sys.exit(1)
  pp.pprint(client.card_interface_active(eval(args[0]),eval(args[1]),))

elif cmd == 'pay_gift_card':
  if len(args) != 1:
    print 'pay_gift_card requires 1 args'
    sys.exit(1)
  pp.pprint(client.pay_gift_card(args[0],))

elif cmd == 'get_card_list':
  if len(args) != 2:
    print 'get_card_list requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_card_list(args[0],args[1],))

elif cmd == 'get_cardcode_by_openid':
  if len(args) != 2:
    print 'get_cardcode_by_openid requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_cardcode_by_openid(args[0],args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
