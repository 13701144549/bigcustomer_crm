#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ERRCODE:
  INNER_SERVICE_ERR = 9500
  ACS_TOKEN = 9501
  EVENT_ERR = 9502
  THIRD_CALL_ERR = 9503
  DATA_ERR = 9504
  DB_ERR = 9505
  PARAM_ERR = 9506
  UNKNOWN_ERR = 9506
  UPIMG_ERR = 9507

  _VALUES_TO_NAMES = {
    9500: "INNER_SERVICE_ERR",
    9501: "ACS_TOKEN",
    9502: "EVENT_ERR",
    9503: "THIRD_CALL_ERR",
    9504: "DATA_ERR",
    9505: "DB_ERR",
    9506: "PARAM_ERR",
    9506: "UNKNOWN_ERR",
    9507: "UPIMG_ERR",
  }

  _NAMES_TO_VALUES = {
    "INNER_SERVICE_ERR": 9500,
    "ACS_TOKEN": 9501,
    "EVENT_ERR": 9502,
    "THIRD_CALL_ERR": 9503,
    "DATA_ERR": 9504,
    "DB_ERR": 9505,
    "PARAM_ERR": 9506,
    "UNKNOWN_ERR": 9506,
    "UPIMG_ERR": 9507,
  }

class MerchantStatus:
  CREATED = -1
  CHECKING = 0
  APPROVED = 1
  REJECTED = 2
  EXPIRED = 3
  SUBMIT_ERR = 4

  _VALUES_TO_NAMES = {
    -1: "CREATED",
    0: "CHECKING",
    1: "APPROVED",
    2: "REJECTED",
    3: "EXPIRED",
    4: "SUBMIT_ERR",
  }

  _NAMES_TO_VALUES = {
    "CREATED": -1,
    "CHECKING": 0,
    "APPROVED": 1,
    "REJECTED": 2,
    "EXPIRED": 3,
    "SUBMIT_ERR": 4,
  }

class CardtplStatus:
  CREATED = -1
  CHECKING = 0
  PASS = 1
  NOT_PASS = 2
  SUBMIT_ERR = 3

  _VALUES_TO_NAMES = {
    -1: "CREATED",
    0: "CHECKING",
    1: "PASS",
    2: "NOT_PASS",
    3: "SUBMIT_ERR",
  }

  _NAMES_TO_VALUES = {
    "CREATED": -1,
    "CHECKING": 0,
    "PASS": 1,
    "NOT_PASS": 2,
    "SUBMIT_ERR": 3,
  }

class CardStatus:
  CREATED = -1
  GOT_BUG_NOT_SYNC = 0
  GOT_AND_SYNC = 1

  _VALUES_TO_NAMES = {
    -1: "CREATED",
    0: "GOT_BUG_NOT_SYNC",
    1: "GOT_AND_SYNC",
  }

  _NAMES_TO_VALUES = {
    "CREATED": -1,
    "GOT_BUG_NOT_SYNC": 0,
    "GOT_AND_SYNC": 1,
  }

class CardActivateStatus:
  UNACTIVATED = 0
  ACTIVATED = 1

  _VALUES_TO_NAMES = {
    0: "UNACTIVATED",
    1: "ACTIVATED",
  }

  _NAMES_TO_VALUES = {
    "UNACTIVATED": 0,
    "ACTIVATED": 1,
  }

class CardActivateWay:
  AUTO_ACTIVATE = 0
  INTERFACE_ACTIVATE = 1

  _VALUES_TO_NAMES = {
    0: "AUTO_ACTIVATE",
    1: "INTERFACE_ACTIVATE",
  }

  _NAMES_TO_VALUES = {
    "AUTO_ACTIVATE": 0,
    "INTERFACE_ACTIVATE": 1,
  }

class CardType:
  MEMBER_CARD = 1

  _VALUES_TO_NAMES = {
    1: "MEMBER_CARD",
  }

  _NAMES_TO_VALUES = {
    "MEMBER_CARD": 1,
  }


class WXCardError(Exception):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.respcd = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WXCardError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.I64, 1)
      oprot.writeI64(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Merchant:
  """
  Attributes:
   - id
   - userid
   - merchant_id
   - wx_appid
   - status
   - reason
   - cachet
   - ctime
   - brand_name
   - logo_url
   - protocol_url
   - end_time
   - primary_category_id
   - secondary_category_id
   - app_id
   - agreement_media_url
   - operator_media_url
   - background_pic_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'merchant_id', None, None, ), # 3
    (4, TType.STRING, 'wx_appid', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.STRING, 'reason', None, "", ), # 6
    (7, TType.BOOL, 'cachet', None, None, ), # 7
    (8, TType.STRING, 'ctime', None, None, ), # 8
    None, # 9
    (10, TType.STRING, 'brand_name', None, None, ), # 10
    (11, TType.STRING, 'logo_url', None, None, ), # 11
    (12, TType.STRING, 'protocol_url', None, None, ), # 12
    (13, TType.STRING, 'end_time', None, None, ), # 13
    (14, TType.I64, 'primary_category_id', None, None, ), # 14
    (15, TType.I64, 'secondary_category_id', None, None, ), # 15
    (16, TType.STRING, 'app_id', None, None, ), # 16
    (17, TType.STRING, 'agreement_media_url', None, None, ), # 17
    (18, TType.STRING, 'operator_media_url', None, None, ), # 18
    (19, TType.STRING, 'background_pic_url', None, None, ), # 19
  )

  def __init__(self, id=None, userid=None, merchant_id=None, wx_appid=None, status=None, reason=thrift_spec[6][4], cachet=None, ctime=None, brand_name=None, logo_url=None, protocol_url=None, end_time=None, primary_category_id=None, secondary_category_id=None, app_id=None, agreement_media_url=None, operator_media_url=None, background_pic_url=None,):
    self.id = id
    self.userid = userid
    self.merchant_id = merchant_id
    self.wx_appid = wx_appid
    self.status = status
    self.reason = reason
    self.cachet = cachet
    self.ctime = ctime
    self.brand_name = brand_name
    self.logo_url = logo_url
    self.protocol_url = protocol_url
    self.end_time = end_time
    self.primary_category_id = primary_category_id
    self.secondary_category_id = secondary_category_id
    self.app_id = app_id
    self.agreement_media_url = agreement_media_url
    self.operator_media_url = operator_media_url
    self.background_pic_url = background_pic_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.merchant_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.wx_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.cachet = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.brand_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.logo_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.protocol_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.primary_category_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.secondary_category_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.app_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.agreement_media_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.operator_media_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.background_pic_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Merchant')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.I64, 3)
      oprot.writeI64(self.merchant_id)
      oprot.writeFieldEnd()
    if self.wx_appid is not None:
      oprot.writeFieldBegin('wx_appid', TType.STRING, 4)
      oprot.writeString(self.wx_appid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 6)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.cachet is not None:
      oprot.writeFieldBegin('cachet', TType.BOOL, 7)
      oprot.writeBool(self.cachet)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 8)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    if self.brand_name is not None:
      oprot.writeFieldBegin('brand_name', TType.STRING, 10)
      oprot.writeString(self.brand_name)
      oprot.writeFieldEnd()
    if self.logo_url is not None:
      oprot.writeFieldBegin('logo_url', TType.STRING, 11)
      oprot.writeString(self.logo_url)
      oprot.writeFieldEnd()
    if self.protocol_url is not None:
      oprot.writeFieldBegin('protocol_url', TType.STRING, 12)
      oprot.writeString(self.protocol_url)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 13)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.primary_category_id is not None:
      oprot.writeFieldBegin('primary_category_id', TType.I64, 14)
      oprot.writeI64(self.primary_category_id)
      oprot.writeFieldEnd()
    if self.secondary_category_id is not None:
      oprot.writeFieldBegin('secondary_category_id', TType.I64, 15)
      oprot.writeI64(self.secondary_category_id)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.STRING, 16)
      oprot.writeString(self.app_id)
      oprot.writeFieldEnd()
    if self.agreement_media_url is not None:
      oprot.writeFieldBegin('agreement_media_url', TType.STRING, 17)
      oprot.writeString(self.agreement_media_url)
      oprot.writeFieldEnd()
    if self.operator_media_url is not None:
      oprot.writeFieldBegin('operator_media_url', TType.STRING, 18)
      oprot.writeString(self.operator_media_url)
      oprot.writeFieldEnd()
    if self.background_pic_url is not None:
      oprot.writeFieldBegin('background_pic_url', TType.STRING, 19)
      oprot.writeString(self.background_pic_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    if self.wx_appid is None:
      raise TProtocol.TProtocolException(message='Required field wx_appid is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.reason is None:
      raise TProtocol.TProtocolException(message='Required field reason is unset!')
    if self.cachet is None:
      raise TProtocol.TProtocolException(message='Required field cachet is unset!')
    if self.brand_name is None:
      raise TProtocol.TProtocolException(message='Required field brand_name is unset!')
    if self.logo_url is None:
      raise TProtocol.TProtocolException(message='Required field logo_url is unset!')
    if self.protocol_url is None:
      raise TProtocol.TProtocolException(message='Required field protocol_url is unset!')
    if self.end_time is None:
      raise TProtocol.TProtocolException(message='Required field end_time is unset!')
    if self.primary_category_id is None:
      raise TProtocol.TProtocolException(message='Required field primary_category_id is unset!')
    if self.secondary_category_id is None:
      raise TProtocol.TProtocolException(message='Required field secondary_category_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardTpl:
  """
  Attributes:
   - userid
   - merchant_id
   - card_id
   - card_type
   - info
   - status
   - ctime
   - wx_appid
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'merchant_id', None, None, ), # 2
    (3, TType.STRING, 'card_id', None, None, ), # 3
    (4, TType.I32, 'card_type', None, None, ), # 4
    (5, TType.STRING, 'info', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.STRING, 'ctime', None, None, ), # 7
    (8, TType.STRING, 'wx_appid', None, None, ), # 8
    (9, TType.I64, 'id', None, None, ), # 9
  )

  def __init__(self, userid=None, merchant_id=None, card_id=None, card_type=None, info=None, status=None, ctime=None, wx_appid=None, id=None,):
    self.userid = userid
    self.merchant_id = merchant_id
    self.card_id = card_id
    self.card_type = card_type
    self.info = info
    self.status = status
    self.ctime = ctime
    self.wx_appid = wx_appid
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.merchant_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.card_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.card_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.wx_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardTpl')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.I64, 2)
      oprot.writeI64(self.merchant_id)
      oprot.writeFieldEnd()
    if self.card_id is not None:
      oprot.writeFieldBegin('card_id', TType.STRING, 3)
      oprot.writeString(self.card_id)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I32, 4)
      oprot.writeI32(self.card_type)
      oprot.writeFieldEnd()
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.STRING, 5)
      oprot.writeString(self.info)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 7)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    if self.wx_appid is not None:
      oprot.writeFieldBegin('wx_appid', TType.STRING, 8)
      oprot.writeString(self.wx_appid)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 9)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    if self.card_id is None:
      raise TProtocol.TProtocolException(message='Required field card_id is unset!')
    if self.card_type is None:
      raise TProtocol.TProtocolException(message='Required field card_type is unset!')
    if self.info is None:
      raise TProtocol.TProtocolException(message='Required field info is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.ctime is None:
      raise TProtocol.TProtocolException(message='Required field ctime is unset!')
    if self.wx_appid is None:
      raise TProtocol.TProtocolException(message='Required field wx_appid is unset!')
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Card:
  """
  Attributes:
   - id
   - userid
   - cid
   - cardtype
   - card_id
   - status
   - reason
   - card_owner
   - card_code
   - card_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'cid', None, None, ), # 3
    (4, TType.I32, 'cardtype', None, None, ), # 4
    (5, TType.STRING, 'card_id', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.STRING, 'reason', None, "", ), # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'card_owner', None, None, ), # 10
    (11, TType.STRING, 'card_code', None, None, ), # 11
    (12, TType.STRING, 'card_no', None, None, ), # 12
  )

  def __init__(self, id=None, userid=None, cid=None, cardtype=None, card_id=None, status=None, reason=thrift_spec[7][4], card_owner=None, card_code=None, card_no=None,):
    self.id = id
    self.userid = userid
    self.cid = cid
    self.cardtype = cardtype
    self.card_id = card_id
    self.status = status
    self.reason = reason
    self.card_owner = card_owner
    self.card_code = card_code
    self.card_no = card_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cardtype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.card_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.card_owner = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.card_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.card_no = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Card')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 3)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.cardtype is not None:
      oprot.writeFieldBegin('cardtype', TType.I32, 4)
      oprot.writeI32(self.cardtype)
      oprot.writeFieldEnd()
    if self.card_id is not None:
      oprot.writeFieldBegin('card_id', TType.STRING, 5)
      oprot.writeString(self.card_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 7)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.card_owner is not None:
      oprot.writeFieldBegin('card_owner', TType.STRING, 10)
      oprot.writeString(self.card_owner)
      oprot.writeFieldEnd()
    if self.card_code is not None:
      oprot.writeFieldBegin('card_code', TType.STRING, 11)
      oprot.writeString(self.card_code)
      oprot.writeFieldEnd()
    if self.card_no is not None:
      oprot.writeFieldBegin('card_no', TType.STRING, 12)
      oprot.writeString(self.card_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.cid is None:
      raise TProtocol.TProtocolException(message='Required field cid is unset!')
    if self.cardtype is None:
      raise TProtocol.TProtocolException(message='Required field cardtype is unset!')
    if self.card_id is None:
      raise TProtocol.TProtocolException(message='Required field card_id is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.reason is None:
      raise TProtocol.TProtocolException(message='Required field reason is unset!')
    if self.card_owner is None:
      raise TProtocol.TProtocolException(message='Required field card_owner is unset!')
    if self.card_code is None:
      raise TProtocol.TProtocolException(message='Required field card_code is unset!')
    if self.card_no is None:
      raise TProtocol.TProtocolException(message='Required field card_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryMeta:
  """
  Attributes:
   - offset
   - count
   - orderby
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'offset', None, 0, ), # 1
    (2, TType.I64, 'count', None, 100, ), # 2
    (3, TType.STRING, 'orderby', None, None, ), # 3
  )

  def __init__(self, offset=thrift_spec[1][4], count=thrift_spec[2][4], orderby=None,):
    self.offset = offset
    self.count = count
    self.orderby = orderby

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderby = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryMeta')
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 1)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.orderby is not None:
      oprot.writeFieldBegin('orderby', TType.STRING, 3)
      oprot.writeString(self.orderby)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MerchantQueryArg:
  """
  Attributes:
   - query_meta
   - userids
   - merchant_ids
   - wx_appids
   - status
   - s_ctime
   - e_ctime
   - s_utime
   - e_utime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'merchant_ids', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'wx_appids', (TType.STRING,None), None, ), # 4
    None, # 5
    (6, TType.LIST, 'status', (TType.I32,None), None, ), # 6
    (7, TType.STRING, 's_ctime', None, None, ), # 7
    (8, TType.STRING, 'e_ctime', None, None, ), # 8
    (9, TType.STRING, 's_utime', None, None, ), # 9
    (10, TType.STRING, 'e_utime', None, None, ), # 10
  )

  def __init__(self, query_meta=None, userids=None, merchant_ids=None, wx_appids=None, status=None, s_ctime=None, e_ctime=None, s_utime=None, e_utime=None,):
    self.query_meta = query_meta
    self.userids = userids
    self.merchant_ids = merchant_ids
    self.wx_appids = wx_appids
    self.status = status
    self.s_ctime = s_ctime
    self.e_ctime = e_ctime
    self.s_utime = s_utime
    self.e_utime = e_utime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.userids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.merchant_ids = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.merchant_ids.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.wx_appids = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.wx_appids.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.status = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI32();
            self.status.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.s_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.e_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.s_utime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.e_utime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MerchantQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter24 in self.userids:
        oprot.writeI64(iter24)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.merchant_ids is not None:
      oprot.writeFieldBegin('merchant_ids', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.merchant_ids))
      for iter25 in self.merchant_ids:
        oprot.writeI64(iter25)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.wx_appids is not None:
      oprot.writeFieldBegin('wx_appids', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.wx_appids))
      for iter26 in self.wx_appids:
        oprot.writeString(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.status))
      for iter27 in self.status:
        oprot.writeI32(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_ctime is not None:
      oprot.writeFieldBegin('s_ctime', TType.STRING, 7)
      oprot.writeString(self.s_ctime)
      oprot.writeFieldEnd()
    if self.e_ctime is not None:
      oprot.writeFieldBegin('e_ctime', TType.STRING, 8)
      oprot.writeString(self.e_ctime)
      oprot.writeFieldEnd()
    if self.s_utime is not None:
      oprot.writeFieldBegin('s_utime', TType.STRING, 9)
      oprot.writeString(self.s_utime)
      oprot.writeFieldEnd()
    if self.e_utime is not None:
      oprot.writeFieldBegin('e_utime', TType.STRING, 10)
      oprot.writeString(self.e_utime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardtplQueryArg:
  """
  Attributes:
   - query_meta
   - userids
   - cardids
   - mchnt_ids
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userids', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'cardids', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'mchnt_ids', (TType.I64,None), None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
  )

  def __init__(self, query_meta=None, userids=None, cardids=None, mchnt_ids=None, status=None,):
    self.query_meta = query_meta
    self.userids = userids
    self.cardids = cardids
    self.mchnt_ids = mchnt_ids
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userids = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI64();
            self.userids.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cardids = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = iprot.readString();
            self.cardids.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.mchnt_ids = []
          (_etype43, _size40) = iprot.readListBegin()
          for _i44 in xrange(_size40):
            _elem45 = iprot.readI64();
            self.mchnt_ids.append(_elem45)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardtplQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter46 in self.userids:
        oprot.writeI64(iter46)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cardids is not None:
      oprot.writeFieldBegin('cardids', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.cardids))
      for iter47 in self.cardids:
        oprot.writeString(iter47)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mchnt_ids is not None:
      oprot.writeFieldBegin('mchnt_ids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.mchnt_ids))
      for iter48 in self.mchnt_ids:
        oprot.writeI64(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardQueryArg:
  """
  Attributes:
   - query_meta
   - card_nos
   - card_ids
   - cids
   - userids
   - status
   - s_ctime
   - e_ctime
   - s_utime
   - e_utime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'card_nos', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'card_ids', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'cids', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'userids', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'status', (TType.I32,None), None, ), # 6
    (7, TType.STRING, 's_ctime', None, None, ), # 7
    (8, TType.STRING, 'e_ctime', None, None, ), # 8
    (9, TType.STRING, 's_utime', None, None, ), # 9
    (10, TType.STRING, 'e_utime', None, None, ), # 10
  )

  def __init__(self, query_meta=None, card_nos=None, card_ids=None, cids=None, userids=None, status=None, s_ctime=None, e_ctime=None, s_utime=None, e_utime=None,):
    self.query_meta = query_meta
    self.card_nos = card_nos
    self.card_ids = card_ids
    self.cids = cids
    self.userids = userids
    self.status = status
    self.s_ctime = s_ctime
    self.e_ctime = e_ctime
    self.s_utime = s_utime
    self.e_utime = e_utime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.card_nos = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readString();
            self.card_nos.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.card_ids = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readString();
            self.card_ids.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.cids = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = iprot.readI64();
            self.cids.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.userids = []
          (_etype70, _size67) = iprot.readListBegin()
          for _i71 in xrange(_size67):
            _elem72 = iprot.readI64();
            self.userids.append(_elem72)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.status = []
          (_etype76, _size73) = iprot.readListBegin()
          for _i77 in xrange(_size73):
            _elem78 = iprot.readI32();
            self.status.append(_elem78)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.s_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.e_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.s_utime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.e_utime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.card_nos is not None:
      oprot.writeFieldBegin('card_nos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.card_nos))
      for iter79 in self.card_nos:
        oprot.writeString(iter79)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.card_ids is not None:
      oprot.writeFieldBegin('card_ids', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.card_ids))
      for iter80 in self.card_ids:
        oprot.writeString(iter80)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cids is not None:
      oprot.writeFieldBegin('cids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.cids))
      for iter81 in self.cids:
        oprot.writeI64(iter81)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter82 in self.userids:
        oprot.writeI64(iter82)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.status))
      for iter83 in self.status:
        oprot.writeI32(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_ctime is not None:
      oprot.writeFieldBegin('s_ctime', TType.STRING, 7)
      oprot.writeString(self.s_ctime)
      oprot.writeFieldEnd()
    if self.e_ctime is not None:
      oprot.writeFieldBegin('e_ctime', TType.STRING, 8)
      oprot.writeString(self.e_ctime)
      oprot.writeFieldEnd()
    if self.s_utime is not None:
      oprot.writeFieldBegin('s_utime', TType.STRING, 9)
      oprot.writeString(self.s_utime)
      oprot.writeFieldEnd()
    if self.e_utime is not None:
      oprot.writeFieldBegin('e_utime', TType.STRING, 10)
      oprot.writeString(self.e_utime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MPEvent:
  """
  Attributes:
   - appid
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appid', None, None, ), # 1
    (2, TType.STRING, 'data', None, None, ), # 2
  )

  def __init__(self, appid=None, data=None,):
    self.appid = appid
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MPEvent')
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 1)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 2)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appid is None:
      raise TProtocol.TProtocolException(message='Required field appid is unset!')
    if self.data is None:
      raise TProtocol.TProtocolException(message='Required field data is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardtplUpdateInfo:
  """
  Attributes:
   - logo_url
   - background_pic_url
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'logo_url', None, None, ), # 2
    (3, TType.STRING, 'background_pic_url', None, None, ), # 3
  )

  def __init__(self, logo_url=None, background_pic_url=None,):
    self.logo_url = logo_url
    self.background_pic_url = background_pic_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.logo_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.background_pic_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardtplUpdateInfo')
    if self.logo_url is not None:
      oprot.writeFieldBegin('logo_url', TType.STRING, 2)
      oprot.writeString(self.logo_url)
      oprot.writeFieldEnd()
    if self.background_pic_url is not None:
      oprot.writeFieldBegin('background_pic_url', TType.STRING, 3)
      oprot.writeString(self.background_pic_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MerchantUpdateInfo:
  """
  Attributes:
   - brand_name
   - logo_url
   - protocol_url
   - end_time
   - primary_category_id
   - secondary_category_id
   - app_id
   - agreement_media_url
   - operator_media_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'brand_name', None, None, ), # 1
    (2, TType.STRING, 'logo_url', None, None, ), # 2
    (3, TType.STRING, 'protocol_url', None, None, ), # 3
    (4, TType.I64, 'end_time', None, None, ), # 4
    (5, TType.I64, 'primary_category_id', None, None, ), # 5
    (6, TType.I64, 'secondary_category_id', None, None, ), # 6
    (7, TType.STRING, 'app_id', None, None, ), # 7
    (8, TType.STRING, 'agreement_media_url', None, None, ), # 8
    (9, TType.STRING, 'operator_media_url', None, None, ), # 9
  )

  def __init__(self, brand_name=None, logo_url=None, protocol_url=None, end_time=None, primary_category_id=None, secondary_category_id=None, app_id=None, agreement_media_url=None, operator_media_url=None,):
    self.brand_name = brand_name
    self.logo_url = logo_url
    self.protocol_url = protocol_url
    self.end_time = end_time
    self.primary_category_id = primary_category_id
    self.secondary_category_id = secondary_category_id
    self.app_id = app_id
    self.agreement_media_url = agreement_media_url
    self.operator_media_url = operator_media_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.brand_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.logo_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.protocol_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.end_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.primary_category_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.secondary_category_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.app_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.agreement_media_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.operator_media_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MerchantUpdateInfo')
    if self.brand_name is not None:
      oprot.writeFieldBegin('brand_name', TType.STRING, 1)
      oprot.writeString(self.brand_name)
      oprot.writeFieldEnd()
    if self.logo_url is not None:
      oprot.writeFieldBegin('logo_url', TType.STRING, 2)
      oprot.writeString(self.logo_url)
      oprot.writeFieldEnd()
    if self.protocol_url is not None:
      oprot.writeFieldBegin('protocol_url', TType.STRING, 3)
      oprot.writeString(self.protocol_url)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I64, 4)
      oprot.writeI64(self.end_time)
      oprot.writeFieldEnd()
    if self.primary_category_id is not None:
      oprot.writeFieldBegin('primary_category_id', TType.I64, 5)
      oprot.writeI64(self.primary_category_id)
      oprot.writeFieldEnd()
    if self.secondary_category_id is not None:
      oprot.writeFieldBegin('secondary_category_id', TType.I64, 6)
      oprot.writeI64(self.secondary_category_id)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.STRING, 7)
      oprot.writeString(self.app_id)
      oprot.writeFieldEnd()
    if self.agreement_media_url is not None:
      oprot.writeFieldBegin('agreement_media_url', TType.STRING, 8)
      oprot.writeString(self.agreement_media_url)
      oprot.writeFieldEnd()
    if self.operator_media_url is not None:
      oprot.writeFieldBegin('operator_media_url', TType.STRING, 9)
      oprot.writeString(self.operator_media_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardtplManualMakeInfo:
  """
  Attributes:
   - userid
   - merchant_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'merchant_id', None, None, ), # 2
  )

  def __init__(self, userid=None, merchant_id=None,):
    self.userid = userid
    self.merchant_id = merchant_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.merchant_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardtplManualMakeInfo')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.I64, 2)
      oprot.writeI64(self.merchant_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardInterfaceActiveInfo:
  """
  Attributes:
   - card_id
   - encrypt_code
   - openid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'card_id', None, None, ), # 1
    (2, TType.STRING, 'encrypt_code', None, None, ), # 2
    (3, TType.STRING, 'openid', None, None, ), # 3
  )

  def __init__(self, card_id=None, encrypt_code=None, openid=None,):
    self.card_id = card_id
    self.encrypt_code = encrypt_code
    self.openid = openid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.card_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.encrypt_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.openid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardInterfaceActiveInfo')
    if self.card_id is not None:
      oprot.writeFieldBegin('card_id', TType.STRING, 1)
      oprot.writeString(self.card_id)
      oprot.writeFieldEnd()
    if self.encrypt_code is not None:
      oprot.writeFieldBegin('encrypt_code', TType.STRING, 2)
      oprot.writeString(self.encrypt_code)
      oprot.writeFieldEnd()
    if self.openid is not None:
      oprot.writeFieldBegin('openid', TType.STRING, 3)
      oprot.writeString(self.openid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.card_id is None:
      raise TProtocol.TProtocolException(message='Required field card_id is unset!')
    if self.encrypt_code is None:
      raise TProtocol.TProtocolException(message='Required field encrypt_code is unset!')
    if self.openid is None:
      raise TProtocol.TProtocolException(message='Required field openid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
