#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FundSuspendReturn:
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FundSuspendReturn')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.respcd is None:
      raise TProtocol.TProtocolException(message='Required field respcd is unset!')
    if self.respmsg is None:
      raise TProtocol.TProtocolException(message='Required field respmsg is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RiskRecord:
  """
  Attributes:
   - userid
   - hand_type
   - amt
   - tag
   - sn
   - txcurrcd
   - risk_type
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I16, 'hand_type', None, None, ), # 2
    (3, TType.I64, 'amt', None, None, ), # 3
    (4, TType.I64, 'tag', None, None, ), # 4
    (5, TType.STRING, 'sn', None, None, ), # 5
    (6, TType.STRING, 'txcurrcd', None, None, ), # 6
    (7, TType.I16, 'risk_type', None, None, ), # 7
    (8, TType.STRING, 'memo', None, None, ), # 8
  )

  def __init__(self, userid=None, hand_type=None, amt=None, tag=None, sn=None, txcurrcd=None, risk_type=None, memo=None,):
    self.userid = userid
    self.hand_type = hand_type
    self.amt = amt
    self.tag = tag
    self.sn = sn
    self.txcurrcd = txcurrcd
    self.risk_type = risk_type
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.hand_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.tag = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.risk_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RiskRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.hand_type is not None:
      oprot.writeFieldBegin('hand_type', TType.I16, 2)
      oprot.writeI16(self.hand_type)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 3)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.tag is not None:
      oprot.writeFieldBegin('tag', TType.I64, 4)
      oprot.writeI64(self.tag)
      oprot.writeFieldEnd()
    if self.sn is not None:
      oprot.writeFieldBegin('sn', TType.STRING, 5)
      oprot.writeString(self.sn)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 6)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    if self.risk_type is not None:
      oprot.writeFieldBegin('risk_type', TType.I16, 7)
      oprot.writeI16(self.risk_type)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 8)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.hand_type is None:
      raise TProtocol.TProtocolException(message='Required field hand_type is unset!')
    if self.amt is None:
      raise TProtocol.TProtocolException(message='Required field amt is unset!')
    if self.tag is None:
      raise TProtocol.TProtocolException(message='Required field tag is unset!')
    if self.sn is None:
      raise TProtocol.TProtocolException(message='Required field sn is unset!')
    if self.txcurrcd is None:
      raise TProtocol.TProtocolException(message='Required field txcurrcd is unset!')
    if self.risk_type is None:
      raise TProtocol.TProtocolException(message='Required field risk_type is unset!')
    if self.memo is None:
      raise TProtocol.TProtocolException(message='Required field memo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
