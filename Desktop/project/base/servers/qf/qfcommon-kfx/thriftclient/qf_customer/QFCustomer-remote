#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from qf_customer import QFCustomer
from qf_customer.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string ping()')
  print('  LoginResult wx_login(i32 appid, Profile profile, LoginRecord login_info)')
  print('   get_profiles(i32 appid, string spec)')
  print('  i32 wx_logout(i32 appid, string openid)')
  print('  i32 get_user_id_by_openid(i32 appid, string openid)')
  print('   get_openids_by_user_ids(i32 appid,  user_ids)')
  print('  i32 app_save(App req_args)')
  print('  App app_query(AppQuery req_args)')
  print('  Profile wx_bind( wx_customers, Profile profile)')
  print('  WXCustomer wx_update(WXCustomer wx_customer)')
  print('  Profile profile_update(i32 cid, Profile profile)')
  print('  string get_openid_by_wxappid_and_customid(string wx_appid, i32 customid)')
  print('  Profile login(WXCustomer customer, Profile profile)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = QFCustomer.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'wx_login':
  if len(args) != 3:
    print('wx_login requires 3 args')
    sys.exit(1)
  pp.pprint(client.wx_login(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'get_profiles':
  if len(args) != 2:
    print('get_profiles requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_profiles(eval(args[0]),args[1],))

elif cmd == 'wx_logout':
  if len(args) != 2:
    print('wx_logout requires 2 args')
    sys.exit(1)
  pp.pprint(client.wx_logout(eval(args[0]),args[1],))

elif cmd == 'get_user_id_by_openid':
  if len(args) != 2:
    print('get_user_id_by_openid requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_user_id_by_openid(eval(args[0]),args[1],))

elif cmd == 'get_openids_by_user_ids':
  if len(args) != 2:
    print('get_openids_by_user_ids requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_openids_by_user_ids(eval(args[0]),eval(args[1]),))

elif cmd == 'app_save':
  if len(args) != 1:
    print('app_save requires 1 args')
    sys.exit(1)
  pp.pprint(client.app_save(eval(args[0]),))

elif cmd == 'app_query':
  if len(args) != 1:
    print('app_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.app_query(eval(args[0]),))

elif cmd == 'wx_bind':
  if len(args) != 2:
    print('wx_bind requires 2 args')
    sys.exit(1)
  pp.pprint(client.wx_bind(eval(args[0]),eval(args[1]),))

elif cmd == 'wx_update':
  if len(args) != 1:
    print('wx_update requires 1 args')
    sys.exit(1)
  pp.pprint(client.wx_update(eval(args[0]),))

elif cmd == 'profile_update':
  if len(args) != 2:
    print('profile_update requires 2 args')
    sys.exit(1)
  pp.pprint(client.profile_update(eval(args[0]),eval(args[1]),))

elif cmd == 'get_openid_by_wxappid_and_customid':
  if len(args) != 2:
    print('get_openid_by_wxappid_and_customid requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_openid_by_wxappid_and_customid(args[0],eval(args[1]),))

elif cmd == 'login':
  if len(args) != 2:
    print('login requires 2 args')
    sys.exit(1)
  pp.pprint(client.login(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
