#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ERRCODE:
  IMG_ERROR = 9000
  FIELD_LACK = 9001
  REMOTE_RESP_ERROR = 9002
  TIMEOUT_ERROR = 9003
  DB_ERROR = 9004
  USER_ERROR = 9005
  DATA_ERROR = 9006
  PARAM_ERROR = 9007
  IO_ERROR = 9008
  SERVER_ERROR = 9010
  DATA_NOT_EXIST = 9011

  _VALUES_TO_NAMES = {
    9000: "IMG_ERROR",
    9001: "FIELD_LACK",
    9002: "REMOTE_RESP_ERROR",
    9003: "TIMEOUT_ERROR",
    9004: "DB_ERROR",
    9005: "USER_ERROR",
    9006: "DATA_ERROR",
    9007: "PARAM_ERROR",
    9008: "IO_ERROR",
    9010: "SERVER_ERROR",
    9011: "DATA_NOT_EXIST",
  }

  _NAMES_TO_VALUES = {
    "IMG_ERROR": 9000,
    "FIELD_LACK": 9001,
    "REMOTE_RESP_ERROR": 9002,
    "TIMEOUT_ERROR": 9003,
    "DB_ERROR": 9004,
    "USER_ERROR": 9005,
    "DATA_ERROR": 9006,
    "PARAM_ERROR": 9007,
    "IO_ERROR": 9008,
    "SERVER_ERROR": 9010,
    "DATA_NOT_EXIST": 9011,
  }

class PAYTYPE:
  WEIXIN = 1
  ALIPAY = 2
  QPAY = 3
  QUICK = 4

  _VALUES_TO_NAMES = {
    1: "WEIXIN",
    2: "ALIPAY",
    3: "QPAY",
    4: "QUICK",
  }

  _NAMES_TO_VALUES = {
    "WEIXIN": 1,
    "ALIPAY": 2,
    "QPAY": 3,
    "QUICK": 4,
  }

class CHNLCODE:
  CITIC = 1
  CEB = 2
  FUIOU = 3
  ZXWC = 4
  HUIYI = 5
  HYQK = 6
  CITIC_ZERO_FEE = 7
  DAZE = 8
  WANGSHANG = 9
  DAZEPOINT = 10
  YEEPAY = 11
  HUITONG = 12
  WEIXIN = 13
  FUIOU_LVZHOU = 14
  HELIBAO = 15
  WEIXIN_LVZHOU = 16
  WSBLUESEA = 17
  XIANFENG = 18
  HUIYI_WEIXIN = 19
  LESHUA = 20

  _VALUES_TO_NAMES = {
    1: "CITIC",
    2: "CEB",
    3: "FUIOU",
    4: "ZXWC",
    5: "HUIYI",
    6: "HYQK",
    7: "CITIC_ZERO_FEE",
    8: "DAZE",
    9: "WANGSHANG",
    10: "DAZEPOINT",
    11: "YEEPAY",
    12: "HUITONG",
    13: "WEIXIN",
    14: "FUIOU_LVZHOU",
    15: "HELIBAO",
    16: "WEIXIN_LVZHOU",
    17: "WSBLUESEA",
    18: "XIANFENG",
    19: "HUIYI_WEIXIN",
    20: "LESHUA",
  }

  _NAMES_TO_VALUES = {
    "CITIC": 1,
    "CEB": 2,
    "FUIOU": 3,
    "ZXWC": 4,
    "HUIYI": 5,
    "HYQK": 6,
    "CITIC_ZERO_FEE": 7,
    "DAZE": 8,
    "WANGSHANG": 9,
    "DAZEPOINT": 10,
    "YEEPAY": 11,
    "HUITONG": 12,
    "WEIXIN": 13,
    "FUIOU_LVZHOU": 14,
    "HELIBAO": 15,
    "WEIXIN_LVZHOU": 16,
    "WSBLUESEA": 17,
    "XIANFENG": 18,
    "HUIYI_WEIXIN": 19,
    "LESHUA": 20,
  }

class CITIC_PIC_TYPE:
  IDCARD = 1
  LICENSE = 2
  ORGANIZE = 3
  USER_PROTO = 4
  SHOP = 5

  _VALUES_TO_NAMES = {
    1: "IDCARD",
    2: "LICENSE",
    3: "ORGANIZE",
    4: "USER_PROTO",
    5: "SHOP",
  }

  _NAMES_TO_VALUES = {
    "IDCARD": 1,
    "LICENSE": 2,
    "ORGANIZE": 3,
    "USER_PROTO": 4,
    "SHOP": 5,
  }

class PIC_TYPE:
  IDCARDFRONT = 1
  IDCARDBACK = 2
  LICENSEPHOTO = 3
  ORGPHOTO = 4
  TAXPHOTO = 5
  OPENLICENSE = 6
  SHOPPHOTO = 7
  GOODSPHOTO = 8
  IDCARDINHAND = 9
  DELEGATEAGREEMENT = 10
  PAYPOINT = 11
  AUTHBANKCARDFRONT = 12
  AUTHBANKCARDBACK = 13
  GROUPPHOTO = 14
  CHECKSTAND_WEIXIN = 15
  CHECKIN_WEIXIN = 16
  CHECKSTAND_ALIPAY = 17
  CHECKIN_ALIPAY = 18

  _VALUES_TO_NAMES = {
    1: "IDCARDFRONT",
    2: "IDCARDBACK",
    3: "LICENSEPHOTO",
    4: "ORGPHOTO",
    5: "TAXPHOTO",
    6: "OPENLICENSE",
    7: "SHOPPHOTO",
    8: "GOODSPHOTO",
    9: "IDCARDINHAND",
    10: "DELEGATEAGREEMENT",
    11: "PAYPOINT",
    12: "AUTHBANKCARDFRONT",
    13: "AUTHBANKCARDBACK",
    14: "GROUPPHOTO",
    15: "CHECKSTAND_WEIXIN",
    16: "CHECKIN_WEIXIN",
    17: "CHECKSTAND_ALIPAY",
    18: "CHECKIN_ALIPAY",
  }

  _NAMES_TO_VALUES = {
    "IDCARDFRONT": 1,
    "IDCARDBACK": 2,
    "LICENSEPHOTO": 3,
    "ORGPHOTO": 4,
    "TAXPHOTO": 5,
    "OPENLICENSE": 6,
    "SHOPPHOTO": 7,
    "GOODSPHOTO": 8,
    "IDCARDINHAND": 9,
    "DELEGATEAGREEMENT": 10,
    "PAYPOINT": 11,
    "AUTHBANKCARDFRONT": 12,
    "AUTHBANKCARDBACK": 13,
    "GROUPPHOTO": 14,
    "CHECKSTAND_WEIXIN": 15,
    "CHECKIN_WEIXIN": 16,
    "CHECKSTAND_ALIPAY": 17,
    "CHECKIN_ALIPAY": 18,
  }

class AddMchntState:
  DOING = 0
  SUCC = 1
  FAILED = 2
  WAIT_NOTIFY = 3
  CLOSED_MANUAL = 4
  WAIT_CHNL_1 = 5

  _VALUES_TO_NAMES = {
    0: "DOING",
    1: "SUCC",
    2: "FAILED",
    3: "WAIT_NOTIFY",
    4: "CLOSED_MANUAL",
    5: "WAIT_CHNL_1",
  }

  _NAMES_TO_VALUES = {
    "DOING": 0,
    "SUCC": 1,
    "FAILED": 2,
    "WAIT_NOTIFY": 3,
    "CLOSED_MANUAL": 4,
    "WAIT_CHNL_1": 5,
  }

class CHNLID:
  FUIOU = 37
  HUIYI = 32
  HUIYI_WEIXIN = 32
  HYQK = 46
  DAZE = 56
  WANGSHANG = 74
  DAZEPOINT = 80
  YEEPAY = 92
  HUITONG = 86
  WEIXIN = 20
  FUIOU_LVZHOU = 37
  HELIBAO = 118
  WEIXIN_LVZHOU = 20
  WSBLUESEA = 74
  XIANFENG = 133
  LESHUA = 157

  _VALUES_TO_NAMES = {
    37: "FUIOU",
    32: "HUIYI",
    32: "HUIYI_WEIXIN",
    46: "HYQK",
    56: "DAZE",
    74: "WANGSHANG",
    80: "DAZEPOINT",
    92: "YEEPAY",
    86: "HUITONG",
    20: "WEIXIN",
    37: "FUIOU_LVZHOU",
    118: "HELIBAO",
    20: "WEIXIN_LVZHOU",
    74: "WSBLUESEA",
    133: "XIANFENG",
    157: "LESHUA",
  }

  _NAMES_TO_VALUES = {
    "FUIOU": 37,
    "HUIYI": 32,
    "HUIYI_WEIXIN": 32,
    "HYQK": 46,
    "DAZE": 56,
    "WANGSHANG": 74,
    "DAZEPOINT": 80,
    "YEEPAY": 92,
    "HUITONG": 86,
    "WEIXIN": 20,
    "FUIOU_LVZHOU": 37,
    "HELIBAO": 118,
    "WEIXIN_LVZHOU": 20,
    "WSBLUESEA": 74,
    "XIANFENG": 133,
    "LESHUA": 157,
  }

class FeeType:
  T0 = 1
  T1 = 2

  _VALUES_TO_NAMES = {
    1: "T0",
    2: "T1",
  }

  _NAMES_TO_VALUES = {
    "T0": 1,
    "T1": 2,
  }

class SubscribeState:
  DOING = 0
  SUCC = 1
  FAILED = 2
  WAIT_NOTIFY = 3

  _VALUES_TO_NAMES = {
    0: "DOING",
    1: "SUCC",
    2: "FAILED",
    3: "WAIT_NOTIFY",
  }

  _NAMES_TO_VALUES = {
    "DOING": 0,
    "SUCC": 1,
    "FAILED": 2,
    "WAIT_NOTIFY": 3,
  }

class SubscribeType:
  REGISTER = 1
  SWITCHCHNL = 2
  APPENDCONF = 3

  _VALUES_TO_NAMES = {
    1: "REGISTER",
    2: "SWITCHCHNL",
    3: "APPENDCONF",
  }

  _NAMES_TO_VALUES = {
    "REGISTER": 1,
    "SWITCHCHNL": 2,
    "APPENDCONF": 3,
  }

class SettleMode:
  ToOtherBank = 1
  ToYLB = 2

  _VALUES_TO_NAMES = {
    1: "ToOtherBank",
    2: "ToYLB",
  }

  _NAMES_TO_VALUES = {
    "ToOtherBank": 1,
    "ToYLB": 2,
  }

class HelibaoAgreementStatus:
  INIT = 0
  WAIT = 1
  REFUSE = 2
  AUDITED = 3

  _VALUES_TO_NAMES = {
    0: "INIT",
    1: "WAIT",
    2: "REFUSE",
    3: "AUDITED",
  }

  _NAMES_TO_VALUES = {
    "INIT": 0,
    "WAIT": 1,
    "REFUSE": 2,
    "AUDITED": 3,
  }

class SmsType:
  OpenBankAccount = 1
  ChangeBankAccount = 2
  ChangeBankMobile = 3

  _VALUES_TO_NAMES = {
    1: "OpenBankAccount",
    2: "ChangeBankAccount",
    3: "ChangeBankMobile",
  }

  _NAMES_TO_VALUES = {
    "OpenBankAccount": 1,
    "ChangeBankAccount": 2,
    "ChangeBankMobile": 3,
  }

class ServiceType:
  OpenBankAccount = 1
  OpenYLB = 2
  QueryBankAccount = 3
  Weixin = 4
  Alipay = 5
  QueryWxMchntId = 6
  WeixinOasis = 7
  QueryRegisterResult = 8
  CreateActivity = 9
  NotifyResult = 10
  AppendWechatconfQuery = 11

  _VALUES_TO_NAMES = {
    1: "OpenBankAccount",
    2: "OpenYLB",
    3: "QueryBankAccount",
    4: "Weixin",
    5: "Alipay",
    6: "QueryWxMchntId",
    7: "WeixinOasis",
    8: "QueryRegisterResult",
    9: "CreateActivity",
    10: "NotifyResult",
    11: "AppendWechatconfQuery",
  }

  _NAMES_TO_VALUES = {
    "OpenBankAccount": 1,
    "OpenYLB": 2,
    "QueryBankAccount": 3,
    "Weixin": 4,
    "Alipay": 5,
    "QueryWxMchntId": 6,
    "WeixinOasis": 7,
    "QueryRegisterResult": 8,
    "CreateActivity": 9,
    "NotifyResult": 10,
    "AppendWechatconfQuery": 11,
  }

class CHNLBIND_SYNC_STATE:
  PROCESSING = 0
  SUCCESS = 1
  FAIL = 2
  WAIT = 3

  _VALUES_TO_NAMES = {
    0: "PROCESSING",
    1: "SUCCESS",
    2: "FAIL",
    3: "WAIT",
  }

  _NAMES_TO_VALUES = {
    "PROCESSING": 0,
    "SUCCESS": 1,
    "FAIL": 2,
    "WAIT": 3,
  }


class UpcertArg:
  """
  Attributes:
   - p_idcard_pic
   - r_idcard_pic
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'p_idcard_pic', None, None, ), # 1
    (2, TType.STRING, 'r_idcard_pic', None, None, ), # 2
  )

  def __init__(self, p_idcard_pic=None, r_idcard_pic=None,):
    self.p_idcard_pic = p_idcard_pic
    self.r_idcard_pic = r_idcard_pic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.p_idcard_pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.r_idcard_pic = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpcertArg')
    if self.p_idcard_pic is not None:
      oprot.writeFieldBegin('p_idcard_pic', TType.STRING, 1)
      oprot.writeString(self.p_idcard_pic)
      oprot.writeFieldEnd()
    if self.r_idcard_pic is not None:
      oprot.writeFieldBegin('r_idcard_pic', TType.STRING, 2)
      oprot.writeString(self.r_idcard_pic)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.p_idcard_pic is None:
      raise TProtocol.TProtocolException(message='Required field p_idcard_pic is unset!')
    if self.r_idcard_pic is None:
      raise TProtocol.TProtocolException(message='Required field r_idcard_pic is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryMeta:
  """
  Attributes:
   - offset
   - count
   - orderby
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'offset', None, 0, ), # 1
    (2, TType.I64, 'count', None, 100, ), # 2
    (3, TType.STRING, 'orderby', None, None, ), # 3
  )

  def __init__(self, offset=thrift_spec[1][4], count=thrift_spec[2][4], orderby=None,):
    self.offset = offset
    self.count = count
    self.orderby = orderby

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderby = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryMeta')
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 1)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.orderby is not None:
      oprot.writeFieldBegin('orderby', TType.STRING, 3)
      oprot.writeString(self.orderby)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PayConf:
  """
  Attributes:
   - paytype
   - bill_rate
   - extend
   - ft
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'paytype', None, None, ), # 1
    (2, TType.STRING, 'bill_rate', None, None, ), # 2
    (3, TType.STRING, 'extend', None, None, ), # 3
    (4, TType.I32, 'ft', None, None, ), # 4
  )

  def __init__(self, paytype=None, bill_rate=None, extend=None, ft=None,):
    self.paytype = paytype
    self.bill_rate = bill_rate
    self.extend = extend
    self.ft = ft

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.paytype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bill_rate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.ft = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PayConf')
    if self.paytype is not None:
      oprot.writeFieldBegin('paytype', TType.I32, 1)
      oprot.writeI32(self.paytype)
      oprot.writeFieldEnd()
    if self.bill_rate is not None:
      oprot.writeFieldBegin('bill_rate', TType.STRING, 2)
      oprot.writeString(self.bill_rate)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 3)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    if self.ft is not None:
      oprot.writeFieldBegin('ft', TType.I32, 4)
      oprot.writeI32(self.ft)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.paytype is None:
      raise TProtocol.TProtocolException(message='Required field paytype is unset!')
    if self.bill_rate is None:
      raise TProtocol.TProtocolException(message='Required field bill_rate is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PayConfEx:
  """
  Attributes:
   - payconfs
   - mchnt_id
   - chnlcode
   - trace_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'payconfs', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.I32, 'chnlcode', None, None, ), # 3
    (4, TType.STRING, 'trace_no', None, None, ), # 4
  )

  def __init__(self, payconfs=None, mchnt_id=None, chnlcode=None, trace_no=None,):
    self.payconfs = payconfs
    self.mchnt_id = mchnt_id
    self.chnlcode = chnlcode
    self.trace_no = trace_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.payconfs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = PayConf()
            _elem5.read(iprot)
            self.payconfs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PayConfEx')
    if self.payconfs is not None:
      oprot.writeFieldBegin('payconfs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.payconfs))
      for iter6 in self.payconfs:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 3)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 4)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.payconfs is None:
      raise TProtocol.TProtocolException(message='Required field payconfs is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BankInfo:
  """
  Attributes:
   - headbankname
   - bankuser
   - bankaccount
   - banktype
   - bankname
   - bankcode
   - bankProvince
   - bankCity
   - bankmobile
   - idnumber
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'headbankname', None, None, ), # 1
    (2, TType.STRING, 'bankuser', None, None, ), # 2
    (3, TType.STRING, 'bankaccount', None, None, ), # 3
    (4, TType.I32, 'banktype', None, None, ), # 4
    (5, TType.STRING, 'bankname', None, None, ), # 5
    (6, TType.STRING, 'bankcode', None, None, ), # 6
    (7, TType.STRING, 'bankProvince', None, None, ), # 7
    (8, TType.STRING, 'bankCity', None, None, ), # 8
    (9, TType.STRING, 'bankmobile', None, None, ), # 9
    (10, TType.STRING, 'idnumber', None, None, ), # 10
  )

  def __init__(self, headbankname=None, bankuser=None, bankaccount=None, banktype=None, bankname=None, bankcode=None, bankProvince=None, bankCity=None, bankmobile=None, idnumber=None,):
    self.headbankname = headbankname
    self.bankuser = bankuser
    self.bankaccount = bankaccount
    self.banktype = banktype
    self.bankname = bankname
    self.bankcode = bankcode
    self.bankProvince = bankProvince
    self.bankCity = bankCity
    self.bankmobile = bankmobile
    self.idnumber = idnumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.headbankname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bankuser = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bankaccount = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.banktype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bankname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bankcode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bankProvince = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bankCity = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bankmobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BankInfo')
    if self.headbankname is not None:
      oprot.writeFieldBegin('headbankname', TType.STRING, 1)
      oprot.writeString(self.headbankname)
      oprot.writeFieldEnd()
    if self.bankuser is not None:
      oprot.writeFieldBegin('bankuser', TType.STRING, 2)
      oprot.writeString(self.bankuser)
      oprot.writeFieldEnd()
    if self.bankaccount is not None:
      oprot.writeFieldBegin('bankaccount', TType.STRING, 3)
      oprot.writeString(self.bankaccount)
      oprot.writeFieldEnd()
    if self.banktype is not None:
      oprot.writeFieldBegin('banktype', TType.I32, 4)
      oprot.writeI32(self.banktype)
      oprot.writeFieldEnd()
    if self.bankname is not None:
      oprot.writeFieldBegin('bankname', TType.STRING, 5)
      oprot.writeString(self.bankname)
      oprot.writeFieldEnd()
    if self.bankcode is not None:
      oprot.writeFieldBegin('bankcode', TType.STRING, 6)
      oprot.writeString(self.bankcode)
      oprot.writeFieldEnd()
    if self.bankProvince is not None:
      oprot.writeFieldBegin('bankProvince', TType.STRING, 7)
      oprot.writeString(self.bankProvince)
      oprot.writeFieldEnd()
    if self.bankCity is not None:
      oprot.writeFieldBegin('bankCity', TType.STRING, 8)
      oprot.writeString(self.bankCity)
      oprot.writeFieldEnd()
    if self.bankmobile is not None:
      oprot.writeFieldBegin('bankmobile', TType.STRING, 9)
      oprot.writeString(self.bankmobile)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 10)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class User:
  """
  Attributes:
   - name
   - shopname
   - email
   - mobile
   - telephone
   - state
   - idnumber
   - province
   - city
   - mcc
   - address
   - longitude
   - latitude
   - jointime
   - risklevel
   - groupid
   - user_type
   - legalperson
   - businessaddr
   - licensenumber
   - licenseend_date
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'shopname', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.STRING, 'mobile', None, None, ), # 5
    (6, TType.STRING, 'telephone', None, None, ), # 6
    None, # 7
    (8, TType.I32, 'state', None, None, ), # 8
    (9, TType.STRING, 'idnumber', None, None, ), # 9
    (10, TType.STRING, 'province', None, None, ), # 10
    (11, TType.STRING, 'city', None, None, ), # 11
    (12, TType.STRING, 'mcc', None, None, ), # 12
    (13, TType.STRING, 'address', None, None, ), # 13
    (14, TType.DOUBLE, 'longitude', None, None, ), # 14
    (15, TType.DOUBLE, 'latitude', None, None, ), # 15
    None, # 16
    (17, TType.STRING, 'jointime', None, None, ), # 17
    (18, TType.I32, 'risklevel', None, None, ), # 18
    (19, TType.I32, 'groupid', None, None, ), # 19
    (20, TType.I32, 'user_type', None, None, ), # 20
    (21, TType.STRING, 'legalperson', None, None, ), # 21
    (22, TType.STRING, 'businessaddr', None, None, ), # 22
    (23, TType.STRING, 'licensenumber', None, None, ), # 23
    (24, TType.STRING, 'licenseend_date', None, None, ), # 24
  )

  def __init__(self, name=None, shopname=None, email=None, mobile=None, telephone=None, state=None, idnumber=None, province=None, city=None, mcc=None, address=None, longitude=None, latitude=None, jointime=None, risklevel=None, groupid=None, user_type=None, legalperson=None, businessaddr=None, licensenumber=None, licenseend_date=None,):
    self.name = name
    self.shopname = shopname
    self.email = email
    self.mobile = mobile
    self.telephone = telephone
    self.state = state
    self.idnumber = idnumber
    self.province = province
    self.city = city
    self.mcc = mcc
    self.address = address
    self.longitude = longitude
    self.latitude = latitude
    self.jointime = jointime
    self.risklevel = risklevel
    self.groupid = groupid
    self.user_type = user_type
    self.legalperson = legalperson
    self.businessaddr = businessaddr
    self.licensenumber = licensenumber
    self.licenseend_date = licenseend_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.shopname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.telephone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.province = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.mcc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.jointime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.risklevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.groupid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.user_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.legalperson = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.businessaddr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.licensenumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.licenseend_date = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.shopname is not None:
      oprot.writeFieldBegin('shopname', TType.STRING, 3)
      oprot.writeString(self.shopname)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 5)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.telephone is not None:
      oprot.writeFieldBegin('telephone', TType.STRING, 6)
      oprot.writeString(self.telephone)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 8)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 9)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 10)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 11)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.mcc is not None:
      oprot.writeFieldBegin('mcc', TType.STRING, 12)
      oprot.writeString(self.mcc)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 13)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 14)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 15)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.jointime is not None:
      oprot.writeFieldBegin('jointime', TType.STRING, 17)
      oprot.writeString(self.jointime)
      oprot.writeFieldEnd()
    if self.risklevel is not None:
      oprot.writeFieldBegin('risklevel', TType.I32, 18)
      oprot.writeI32(self.risklevel)
      oprot.writeFieldEnd()
    if self.groupid is not None:
      oprot.writeFieldBegin('groupid', TType.I32, 19)
      oprot.writeI32(self.groupid)
      oprot.writeFieldEnd()
    if self.user_type is not None:
      oprot.writeFieldBegin('user_type', TType.I32, 20)
      oprot.writeI32(self.user_type)
      oprot.writeFieldEnd()
    if self.legalperson is not None:
      oprot.writeFieldBegin('legalperson', TType.STRING, 21)
      oprot.writeString(self.legalperson)
      oprot.writeFieldEnd()
    if self.businessaddr is not None:
      oprot.writeFieldBegin('businessaddr', TType.STRING, 22)
      oprot.writeString(self.businessaddr)
      oprot.writeFieldEnd()
    if self.licensenumber is not None:
      oprot.writeFieldBegin('licensenumber', TType.STRING, 23)
      oprot.writeString(self.licensenumber)
      oprot.writeFieldEnd()
    if self.licenseend_date is not None:
      oprot.writeFieldBegin('licenseend_date', TType.STRING, 24)
      oprot.writeString(self.licenseend_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfile:
  """
  Attributes:
   - user
   - bankInfo
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRUCT, 'user', (User, User.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bankInfo', (BankInfo, BankInfo.thrift_spec), None, ), # 3
  )

  def __init__(self, user=None, bankInfo=None,):
    self.user = user
    self.bankInfo = bankInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRUCT:
          self.user = User()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bankInfo = BankInfo()
          self.bankInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfile')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 2)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    if self.bankInfo is not None:
      oprot.writeFieldBegin('bankInfo', TType.STRUCT, 3)
      self.bankInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddMchntRecord:
  """
  Attributes:
   - id
   - batch_id
   - out_trace_no
   - trace_no
   - userid
   - mchnt_id
   - chnlcode
   - src
   - extend
   - qf_mchnt_id
   - state
   - errmsg
   - ctime
   - utime
   - amtime
   - smid
   - wx_chnl_id
   - wx_mchnt_id
   - subscribe_appid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'batch_id', None, None, ), # 2
    (3, TType.STRING, 'out_trace_no', None, None, ), # 3
    (4, TType.STRING, 'trace_no', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'userid', None, None, ), # 10
    (11, TType.STRING, 'mchnt_id', None, None, ), # 11
    (12, TType.I32, 'chnlcode', None, None, ), # 12
    None, # 13
    (14, TType.STRING, 'src', None, None, ), # 14
    (15, TType.STRING, 'extend', None, None, ), # 15
    None, # 16
    (17, TType.STRING, 'qf_mchnt_id', None, None, ), # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'state', None, None, ), # 30
    (31, TType.STRING, 'errmsg', None, None, ), # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'ctime', None, None, ), # 50
    (51, TType.STRING, 'utime', None, None, ), # 51
    (52, TType.STRING, 'amtime', None, None, ), # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.STRING, 'smid', None, None, ), # 70
    (71, TType.STRING, 'wx_chnl_id', None, None, ), # 71
    (72, TType.STRING, 'wx_mchnt_id', None, None, ), # 72
    (73, TType.STRING, 'subscribe_appid', None, None, ), # 73
  )

  def __init__(self, id=None, batch_id=None, out_trace_no=None, trace_no=None, userid=None, mchnt_id=None, chnlcode=None, src=None, extend=None, qf_mchnt_id=None, state=None, errmsg=None, ctime=None, utime=None, amtime=None, smid=None, wx_chnl_id=None, wx_mchnt_id=None, subscribe_appid=None,):
    self.id = id
    self.batch_id = batch_id
    self.out_trace_no = out_trace_no
    self.trace_no = trace_no
    self.userid = userid
    self.mchnt_id = mchnt_id
    self.chnlcode = chnlcode
    self.src = src
    self.extend = extend
    self.qf_mchnt_id = qf_mchnt_id
    self.state = state
    self.errmsg = errmsg
    self.ctime = ctime
    self.utime = utime
    self.amtime = amtime
    self.smid = smid
    self.wx_chnl_id = wx_chnl_id
    self.wx_mchnt_id = wx_mchnt_id
    self.subscribe_appid = subscribe_appid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.batch_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.qf_mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.utime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.STRING:
          self.amtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRING:
          self.smid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 71:
        if ftype == TType.STRING:
          self.wx_chnl_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 72:
        if ftype == TType.STRING:
          self.wx_mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 73:
        if ftype == TType.STRING:
          self.subscribe_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddMchntRecord')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.batch_id is not None:
      oprot.writeFieldBegin('batch_id', TType.STRING, 2)
      oprot.writeString(self.batch_id)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 3)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 4)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 10)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 11)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 12)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 14)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 15)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    if self.qf_mchnt_id is not None:
      oprot.writeFieldBegin('qf_mchnt_id', TType.STRING, 17)
      oprot.writeString(self.qf_mchnt_id)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 30)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 31)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 50)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    if self.utime is not None:
      oprot.writeFieldBegin('utime', TType.STRING, 51)
      oprot.writeString(self.utime)
      oprot.writeFieldEnd()
    if self.amtime is not None:
      oprot.writeFieldBegin('amtime', TType.STRING, 52)
      oprot.writeString(self.amtime)
      oprot.writeFieldEnd()
    if self.smid is not None:
      oprot.writeFieldBegin('smid', TType.STRING, 70)
      oprot.writeString(self.smid)
      oprot.writeFieldEnd()
    if self.wx_chnl_id is not None:
      oprot.writeFieldBegin('wx_chnl_id', TType.STRING, 71)
      oprot.writeString(self.wx_chnl_id)
      oprot.writeFieldEnd()
    if self.wx_mchnt_id is not None:
      oprot.writeFieldBegin('wx_mchnt_id', TType.STRING, 72)
      oprot.writeString(self.wx_mchnt_id)
      oprot.writeFieldEnd()
    if self.subscribe_appid is not None:
      oprot.writeFieldBegin('subscribe_appid', TType.STRING, 73)
      oprot.writeString(self.subscribe_appid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeQueryArg:
  """
  Attributes:
   - query_meta
   - userid_list
   - mchnt_id_list
   - chnlcode_list
   - batch_id_list
   - out_trace_no_list
   - trace_no_list
   - src_list
   - state_list
   - subscribe_appid_list
   - s_ctime
   - e_ctime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'mchnt_id_list', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'chnlcode_list', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'batch_id_list', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'out_trace_no_list', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'trace_no_list', (TType.STRING,None), None, ), # 7
    (8, TType.LIST, 'src_list', (TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'state_list', (TType.I32,None), None, ), # 9
    (10, TType.LIST, 'subscribe_appid_list', (TType.STRING,None), None, ), # 10
    (11, TType.STRING, 's_ctime', None, None, ), # 11
    (12, TType.STRING, 'e_ctime', None, None, ), # 12
  )

  def __init__(self, query_meta=None, userid_list=None, mchnt_id_list=None, chnlcode_list=None, batch_id_list=None, out_trace_no_list=None, trace_no_list=None, src_list=None, state_list=None, subscribe_appid_list=None, s_ctime=None, e_ctime=None,):
    self.query_meta = query_meta
    self.userid_list = userid_list
    self.mchnt_id_list = mchnt_id_list
    self.chnlcode_list = chnlcode_list
    self.batch_id_list = batch_id_list
    self.out_trace_no_list = out_trace_no_list
    self.trace_no_list = trace_no_list
    self.src_list = src_list
    self.state_list = state_list
    self.subscribe_appid_list = subscribe_appid_list
    self.s_ctime = s_ctime
    self.e_ctime = e_ctime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.userid_list.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.mchnt_id_list = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString();
            self.mchnt_id_list.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.chnlcode_list = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = iprot.readI32();
            self.chnlcode_list.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.batch_id_list = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = iprot.readString();
            self.batch_id_list.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.out_trace_no_list = []
          (_etype34, _size31) = iprot.readListBegin()
          for _i35 in xrange(_size31):
            _elem36 = iprot.readString();
            self.out_trace_no_list.append(_elem36)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.trace_no_list = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = iprot.readString();
            self.trace_no_list.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.src_list = []
          (_etype46, _size43) = iprot.readListBegin()
          for _i47 in xrange(_size43):
            _elem48 = iprot.readString();
            self.src_list.append(_elem48)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.state_list = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readI32();
            self.state_list.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.subscribe_appid_list = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readString();
            self.subscribe_appid_list.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.s_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.e_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter61 in self.userid_list:
        oprot.writeI64(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mchnt_id_list is not None:
      oprot.writeFieldBegin('mchnt_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.mchnt_id_list))
      for iter62 in self.mchnt_id_list:
        oprot.writeString(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chnlcode_list is not None:
      oprot.writeFieldBegin('chnlcode_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.chnlcode_list))
      for iter63 in self.chnlcode_list:
        oprot.writeI32(iter63)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.batch_id_list is not None:
      oprot.writeFieldBegin('batch_id_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.batch_id_list))
      for iter64 in self.batch_id_list:
        oprot.writeString(iter64)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.out_trace_no_list is not None:
      oprot.writeFieldBegin('out_trace_no_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.out_trace_no_list))
      for iter65 in self.out_trace_no_list:
        oprot.writeString(iter65)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.trace_no_list is not None:
      oprot.writeFieldBegin('trace_no_list', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.trace_no_list))
      for iter66 in self.trace_no_list:
        oprot.writeString(iter66)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.src_list is not None:
      oprot.writeFieldBegin('src_list', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.src_list))
      for iter67 in self.src_list:
        oprot.writeString(iter67)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.state_list is not None:
      oprot.writeFieldBegin('state_list', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.state_list))
      for iter68 in self.state_list:
        oprot.writeI32(iter68)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.subscribe_appid_list is not None:
      oprot.writeFieldBegin('subscribe_appid_list', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.subscribe_appid_list))
      for iter69 in self.subscribe_appid_list:
        oprot.writeString(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_ctime is not None:
      oprot.writeFieldBegin('s_ctime', TType.STRING, 11)
      oprot.writeString(self.s_ctime)
      oprot.writeFieldEnd()
    if self.e_ctime is not None:
      oprot.writeFieldBegin('e_ctime', TType.STRING, 12)
      oprot.writeString(self.e_ctime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeAppidRecord:
  """
  Attributes:
   - id
   - batch_id
   - src
   - subscribe_type
   - userid
   - chnlcode
   - mchnt_id
   - wx_chnl_id
   - wx_mchnt_id
   - subscribe_appid
   - out_trace_no
   - trace_no
   - extend
   - state
   - errmsg
   - ctime
   - utime
   - result_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'batch_id', None, None, ), # 2
    (3, TType.STRING, 'src', None, None, ), # 3
    (4, TType.I32, 'subscribe_type', None, None, ), # 4
    (5, TType.I64, 'userid', None, None, ), # 5
    (6, TType.I32, 'chnlcode', None, None, ), # 6
    (7, TType.STRING, 'mchnt_id', None, None, ), # 7
    (8, TType.STRING, 'wx_chnl_id', None, None, ), # 8
    (9, TType.STRING, 'wx_mchnt_id', None, None, ), # 9
    (10, TType.STRING, 'subscribe_appid', None, None, ), # 10
    (11, TType.STRING, 'out_trace_no', None, None, ), # 11
    (12, TType.STRING, 'trace_no', None, None, ), # 12
    (13, TType.STRING, 'extend', None, None, ), # 13
    (14, TType.I32, 'state', None, None, ), # 14
    (15, TType.STRING, 'errmsg', None, None, ), # 15
    (16, TType.STRING, 'ctime', None, None, ), # 16
    (17, TType.STRING, 'utime', None, None, ), # 17
    (18, TType.STRING, 'result_time', None, None, ), # 18
  )

  def __init__(self, id=None, batch_id=None, src=None, subscribe_type=None, userid=None, chnlcode=None, mchnt_id=None, wx_chnl_id=None, wx_mchnt_id=None, subscribe_appid=None, out_trace_no=None, trace_no=None, extend=None, state=None, errmsg=None, ctime=None, utime=None, result_time=None,):
    self.id = id
    self.batch_id = batch_id
    self.src = src
    self.subscribe_type = subscribe_type
    self.userid = userid
    self.chnlcode = chnlcode
    self.mchnt_id = mchnt_id
    self.wx_chnl_id = wx_chnl_id
    self.wx_mchnt_id = wx_mchnt_id
    self.subscribe_appid = subscribe_appid
    self.out_trace_no = out_trace_no
    self.trace_no = trace_no
    self.extend = extend
    self.state = state
    self.errmsg = errmsg
    self.ctime = ctime
    self.utime = utime
    self.result_time = result_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.batch_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.subscribe_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.wx_chnl_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.wx_mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.subscribe_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.utime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.result_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeAppidRecord')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.batch_id is not None:
      oprot.writeFieldBegin('batch_id', TType.STRING, 2)
      oprot.writeString(self.batch_id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 3)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.subscribe_type is not None:
      oprot.writeFieldBegin('subscribe_type', TType.I32, 4)
      oprot.writeI32(self.subscribe_type)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 5)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 6)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 7)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.wx_chnl_id is not None:
      oprot.writeFieldBegin('wx_chnl_id', TType.STRING, 8)
      oprot.writeString(self.wx_chnl_id)
      oprot.writeFieldEnd()
    if self.wx_mchnt_id is not None:
      oprot.writeFieldBegin('wx_mchnt_id', TType.STRING, 9)
      oprot.writeString(self.wx_mchnt_id)
      oprot.writeFieldEnd()
    if self.subscribe_appid is not None:
      oprot.writeFieldBegin('subscribe_appid', TType.STRING, 10)
      oprot.writeString(self.subscribe_appid)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 11)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 12)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 13)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 14)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 15)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 16)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    if self.utime is not None:
      oprot.writeFieldBegin('utime', TType.STRING, 17)
      oprot.writeString(self.utime)
      oprot.writeFieldEnd()
    if self.result_time is not None:
      oprot.writeFieldBegin('result_time', TType.STRING, 18)
      oprot.writeString(self.result_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WechatConf:
  """
  Attributes:
   - mchnt_id
   - jsapipath
   - sub_appid
   - subscribe_appid
   - partner
   - cid
   - relationship
   - priority
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.STRING, 'jsapipath', None, None, ), # 2
    (3, TType.STRING, 'sub_appid', None, None, ), # 3
    (4, TType.STRING, 'subscribe_appid', None, None, ), # 4
    (5, TType.STRING, 'partner', None, None, ), # 5
    (6, TType.STRING, 'cid', None, None, ), # 6
    (7, TType.I32, 'relationship', None, None, ), # 7
    (8, TType.I64, 'priority', None, None, ), # 8
  )

  def __init__(self, mchnt_id=None, jsapipath=None, sub_appid=None, subscribe_appid=None, partner=None, cid=None, relationship=None, priority=None,):
    self.mchnt_id = mchnt_id
    self.jsapipath = jsapipath
    self.sub_appid = sub_appid
    self.subscribe_appid = subscribe_appid
    self.partner = partner
    self.cid = cid
    self.relationship = relationship
    self.priority = priority

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jsapipath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sub_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.subscribe_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.partner = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.relationship = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.priority = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WechatConf')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.jsapipath is not None:
      oprot.writeFieldBegin('jsapipath', TType.STRING, 2)
      oprot.writeString(self.jsapipath)
      oprot.writeFieldEnd()
    if self.sub_appid is not None:
      oprot.writeFieldBegin('sub_appid', TType.STRING, 3)
      oprot.writeString(self.sub_appid)
      oprot.writeFieldEnd()
    if self.subscribe_appid is not None:
      oprot.writeFieldBegin('subscribe_appid', TType.STRING, 4)
      oprot.writeString(self.subscribe_appid)
      oprot.writeFieldEnd()
    if self.partner is not None:
      oprot.writeFieldBegin('partner', TType.STRING, 5)
      oprot.writeString(self.partner)
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.STRING, 6)
      oprot.writeString(self.cid)
      oprot.writeFieldEnd()
    if self.relationship is not None:
      oprot.writeFieldBegin('relationship', TType.I32, 7)
      oprot.writeI32(self.relationship)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I64, 8)
      oprot.writeI64(self.priority)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewCITIC:
  """
  Attributes:
   - userid
   - payconf
   - indentity_photo
   - trace_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.LIST, 'payconf', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'indentity_photo', None, None, ), # 3
    (4, TType.STRING, 'trace_no', None, None, ), # 4
  )

  def __init__(self, userid=None, payconf=None, indentity_photo=None, trace_no=None,):
    self.userid = userid
    self.payconf = payconf
    self.indentity_photo = indentity_photo
    self.trace_no = trace_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.payconf = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = PayConf()
            _elem75.read(iprot)
            self.payconf.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.indentity_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewCITIC')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.payconf))
      for iter76 in self.payconf:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.indentity_photo is not None:
      oprot.writeFieldBegin('indentity_photo', TType.STRING, 3)
      oprot.writeString(self.indentity_photo)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 4)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.payconf is None:
      raise TProtocol.TProtocolException(message='Required field payconf is unset!')
    if self.indentity_photo is None:
      raise TProtocol.TProtocolException(message='Required field indentity_photo is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewCitic:
  """
  Attributes:
   - userid
   - chnlcode
   - indentity_photo
   - trace_no
   - license_photo
   - protocol_photo
   - org_photo
   - main_photo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I32, 'chnlcode', None, None, ), # 2
    (3, TType.STRING, 'indentity_photo', None, None, ), # 3
    (4, TType.STRING, 'trace_no', None, None, ), # 4
    (5, TType.STRING, 'license_photo', None, None, ), # 5
    (6, TType.STRING, 'protocol_photo', None, None, ), # 6
    (7, TType.STRING, 'org_photo', None, None, ), # 7
    (8, TType.STRING, 'main_photo', None, None, ), # 8
  )

  def __init__(self, userid=None, chnlcode=None, indentity_photo=None, trace_no=None, license_photo=None, protocol_photo=None, org_photo=None, main_photo=None,):
    self.userid = userid
    self.chnlcode = chnlcode
    self.indentity_photo = indentity_photo
    self.trace_no = trace_no
    self.license_photo = license_photo
    self.protocol_photo = protocol_photo
    self.org_photo = org_photo
    self.main_photo = main_photo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.indentity_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.license_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.protocol_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.org_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.main_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewCitic')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 2)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.indentity_photo is not None:
      oprot.writeFieldBegin('indentity_photo', TType.STRING, 3)
      oprot.writeString(self.indentity_photo)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 4)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.license_photo is not None:
      oprot.writeFieldBegin('license_photo', TType.STRING, 5)
      oprot.writeString(self.license_photo)
      oprot.writeFieldEnd()
    if self.protocol_photo is not None:
      oprot.writeFieldBegin('protocol_photo', TType.STRING, 6)
      oprot.writeString(self.protocol_photo)
      oprot.writeFieldEnd()
    if self.org_photo is not None:
      oprot.writeFieldBegin('org_photo', TType.STRING, 7)
      oprot.writeString(self.org_photo)
      oprot.writeFieldEnd()
    if self.main_photo is not None:
      oprot.writeFieldBegin('main_photo', TType.STRING, 8)
      oprot.writeString(self.main_photo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.indentity_photo is None:
      raise TProtocol.TProtocolException(message='Required field indentity_photo is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewReq:
  """
  Attributes:
   - userid
   - batch_id
   - src
   - chnlcode
   - trace_no
   - payconfs
   - wechat_conf
   - chnlbind_sync_time
   - link_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'batch_id', None, None, ), # 2
    (3, TType.STRING, 'src', None, None, ), # 3
    (4, TType.I32, 'chnlcode', None, None, ), # 4
    (5, TType.STRING, 'trace_no', None, None, ), # 5
    (6, TType.LIST, 'payconfs', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 6
    (7, TType.STRUCT, 'wechat_conf', (WechatConf, WechatConf.thrift_spec), None, ), # 7
    (8, TType.STRING, 'chnlbind_sync_time', None, None, ), # 8
    (9, TType.STRING, 'link_id', None, None, ), # 9
  )

  def __init__(self, userid=None, batch_id=None, src=None, chnlcode=None, trace_no=None, payconfs=None, wechat_conf=None, chnlbind_sync_time=None, link_id=None,):
    self.userid = userid
    self.batch_id = batch_id
    self.src = src
    self.chnlcode = chnlcode
    self.trace_no = trace_no
    self.payconfs = payconfs
    self.wechat_conf = wechat_conf
    self.chnlbind_sync_time = chnlbind_sync_time
    self.link_id = link_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.batch_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.payconfs = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = PayConf()
            _elem82.read(iprot)
            self.payconfs.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.wechat_conf = WechatConf()
          self.wechat_conf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.chnlbind_sync_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.link_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewReq')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.batch_id is not None:
      oprot.writeFieldBegin('batch_id', TType.STRING, 2)
      oprot.writeString(self.batch_id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 3)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 4)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 5)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.payconfs is not None:
      oprot.writeFieldBegin('payconfs', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.payconfs))
      for iter83 in self.payconfs:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.wechat_conf is not None:
      oprot.writeFieldBegin('wechat_conf', TType.STRUCT, 7)
      self.wechat_conf.write(oprot)
      oprot.writeFieldEnd()
    if self.chnlbind_sync_time is not None:
      oprot.writeFieldBegin('chnlbind_sync_time', TType.STRING, 8)
      oprot.writeString(self.chnlbind_sync_time)
      oprot.writeFieldEnd()
    if self.link_id is not None:
      oprot.writeFieldBegin('link_id', TType.STRING, 9)
      oprot.writeString(self.link_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.batch_id is None:
      raise TProtocol.TProtocolException(message='Required field batch_id is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreQueryReq:
  """
  Attributes:
   - userid
   - mchnt_id
   - chnlcode
   - trace_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.I32, 'chnlcode', None, None, ), # 3
    (4, TType.STRING, 'trace_no', None, None, ), # 4
  )

  def __init__(self, userid=None, mchnt_id=None, chnlcode=None, trace_no=None,):
    self.userid = userid
    self.mchnt_id = mchnt_id
    self.chnlcode = chnlcode
    self.trace_no = trace_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreQueryReq')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 3)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 4)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradePartner:
  """
  Attributes:
   - mchnt_id
   - chnlcode
   - trace_no
   - paytype
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.I32, 'chnlcode', None, None, ), # 2
    (3, TType.STRING, 'trace_no', None, None, ), # 3
    (4, TType.I32, 'paytype', None, None, ), # 4
  )

  def __init__(self, mchnt_id=None, chnlcode=None, trace_no=None, paytype=None,):
    self.mchnt_id = mchnt_id
    self.chnlcode = chnlcode
    self.trace_no = trace_no
    self.paytype = paytype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.paytype = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradePartner')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 2)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 3)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.paytype is not None:
      oprot.writeFieldBegin('paytype', TType.I32, 4)
      oprot.writeI32(self.paytype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    if self.paytype is None:
      raise TProtocol.TProtocolException(message='Required field paytype is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MchntReq:
  """
  Attributes:
   - userid
   - mchnt_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
  )

  def __init__(self, userid=None, mchnt_id=None,):
    self.userid = userid
    self.mchnt_id = mchnt_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MchntReq')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewCEB:
  """
  Attributes:
   - userid
   - english_name
   - post_code
   - payconf
   - indentity_photo
   - active_eleacc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'english_name', None, None, ), # 2
    (3, TType.STRING, 'post_code', None, None, ), # 3
    (4, TType.LIST, 'payconf', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'indentity_photo', None, None, ), # 5
    (6, TType.BOOL, 'active_eleacc', None, False, ), # 6
  )

  def __init__(self, userid=None, english_name=None, post_code=None, payconf=None, indentity_photo=None, active_eleacc=thrift_spec[6][4],):
    self.userid = userid
    self.english_name = english_name
    self.post_code = post_code
    self.payconf = payconf
    self.indentity_photo = indentity_photo
    self.active_eleacc = active_eleacc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.english_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.post_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.payconf = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = PayConf()
            _elem89.read(iprot)
            self.payconf.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.indentity_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.active_eleacc = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewCEB')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.english_name is not None:
      oprot.writeFieldBegin('english_name', TType.STRING, 2)
      oprot.writeString(self.english_name)
      oprot.writeFieldEnd()
    if self.post_code is not None:
      oprot.writeFieldBegin('post_code', TType.STRING, 3)
      oprot.writeString(self.post_code)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.payconf))
      for iter90 in self.payconf:
        iter90.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.indentity_photo is not None:
      oprot.writeFieldBegin('indentity_photo', TType.STRING, 5)
      oprot.writeString(self.indentity_photo)
      oprot.writeFieldEnd()
    if self.active_eleacc is not None:
      oprot.writeFieldBegin('active_eleacc', TType.BOOL, 6)
      oprot.writeBool(self.active_eleacc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.english_name is None:
      raise TProtocol.TProtocolException(message='Required field english_name is unset!')
    if self.post_code is None:
      raise TProtocol.TProtocolException(message='Required field post_code is unset!')
    if self.payconf is None:
      raise TProtocol.TProtocolException(message='Required field payconf is unset!')
    if self.indentity_photo is None:
      raise TProtocol.TProtocolException(message='Required field indentity_photo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewFY:
  """
  Attributes:
   - userid
   - payconf
   - settle_tp
   - tx_flag
   - tx_set_cd
   - acnt_artif_flag
   - link_mchnt_cd
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.LIST, 'payconf', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'settle_tp', None, "1", ), # 3
    (4, TType.STRING, 'tx_flag', None, "0", ), # 4
    (5, TType.STRING, 'tx_set_cd', None, "", ), # 5
    (6, TType.STRING, 'acnt_artif_flag', None, "1", ), # 6
    (7, TType.STRING, 'link_mchnt_cd', None, None, ), # 7
  )

  def __init__(self, userid=None, payconf=None, settle_tp=thrift_spec[3][4], tx_flag=thrift_spec[4][4], tx_set_cd=thrift_spec[5][4], acnt_artif_flag=thrift_spec[6][4], link_mchnt_cd=None,):
    self.userid = userid
    self.payconf = payconf
    self.settle_tp = settle_tp
    self.tx_flag = tx_flag
    self.tx_set_cd = tx_set_cd
    self.acnt_artif_flag = acnt_artif_flag
    self.link_mchnt_cd = link_mchnt_cd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.payconf = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = PayConf()
            _elem96.read(iprot)
            self.payconf.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.settle_tp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tx_flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.tx_set_cd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.acnt_artif_flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.link_mchnt_cd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewFY')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.payconf))
      for iter97 in self.payconf:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.settle_tp is not None:
      oprot.writeFieldBegin('settle_tp', TType.STRING, 3)
      oprot.writeString(self.settle_tp)
      oprot.writeFieldEnd()
    if self.tx_flag is not None:
      oprot.writeFieldBegin('tx_flag', TType.STRING, 4)
      oprot.writeString(self.tx_flag)
      oprot.writeFieldEnd()
    if self.tx_set_cd is not None:
      oprot.writeFieldBegin('tx_set_cd', TType.STRING, 5)
      oprot.writeString(self.tx_set_cd)
      oprot.writeFieldEnd()
    if self.acnt_artif_flag is not None:
      oprot.writeFieldBegin('acnt_artif_flag', TType.STRING, 6)
      oprot.writeString(self.acnt_artif_flag)
      oprot.writeFieldEnd()
    if self.link_mchnt_cd is not None:
      oprot.writeFieldBegin('link_mchnt_cd', TType.STRING, 7)
      oprot.writeString(self.link_mchnt_cd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.payconf is None:
      raise TProtocol.TProtocolException(message='Required field payconf is unset!')
    if self.link_mchnt_cd is None:
      raise TProtocol.TProtocolException(message='Required field link_mchnt_cd is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateFY:
  """
  Attributes:
   - userid
   - mchnt_id
   - payconf
   - settle_tp
   - tx_flag
   - tx_set_cd
   - acnt_artif_flag
   - profile
   - link_mchnt_cd
   - daily_settle_flag
   - daily_settle_set_cd
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.LIST, 'payconf', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 3
    (4, TType.STRING, 'settle_tp', None, None, ), # 4
    (5, TType.STRING, 'tx_flag', None, None, ), # 5
    (6, TType.STRING, 'tx_set_cd', None, None, ), # 6
    (7, TType.STRING, 'acnt_artif_flag', None, None, ), # 7
    (8, TType.STRUCT, 'profile', (UserProfile, UserProfile.thrift_spec), None, ), # 8
    (9, TType.STRING, 'link_mchnt_cd', None, None, ), # 9
    (10, TType.STRING, 'daily_settle_flag', None, None, ), # 10
    (11, TType.STRING, 'daily_settle_set_cd', None, None, ), # 11
  )

  def __init__(self, userid=None, mchnt_id=None, payconf=None, settle_tp=None, tx_flag=None, tx_set_cd=None, acnt_artif_flag=None, profile=None, link_mchnt_cd=None, daily_settle_flag=None, daily_settle_set_cd=None,):
    self.userid = userid
    self.mchnt_id = mchnt_id
    self.payconf = payconf
    self.settle_tp = settle_tp
    self.tx_flag = tx_flag
    self.tx_set_cd = tx_set_cd
    self.acnt_artif_flag = acnt_artif_flag
    self.profile = profile
    self.link_mchnt_cd = link_mchnt_cd
    self.daily_settle_flag = daily_settle_flag
    self.daily_settle_set_cd = daily_settle_set_cd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.payconf = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = PayConf()
            _elem103.read(iprot)
            self.payconf.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.settle_tp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.tx_flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tx_set_cd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.acnt_artif_flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.profile = UserProfile()
          self.profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.link_mchnt_cd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.daily_settle_flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.daily_settle_set_cd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateFY')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.payconf))
      for iter104 in self.payconf:
        iter104.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.settle_tp is not None:
      oprot.writeFieldBegin('settle_tp', TType.STRING, 4)
      oprot.writeString(self.settle_tp)
      oprot.writeFieldEnd()
    if self.tx_flag is not None:
      oprot.writeFieldBegin('tx_flag', TType.STRING, 5)
      oprot.writeString(self.tx_flag)
      oprot.writeFieldEnd()
    if self.tx_set_cd is not None:
      oprot.writeFieldBegin('tx_set_cd', TType.STRING, 6)
      oprot.writeString(self.tx_set_cd)
      oprot.writeFieldEnd()
    if self.acnt_artif_flag is not None:
      oprot.writeFieldBegin('acnt_artif_flag', TType.STRING, 7)
      oprot.writeString(self.acnt_artif_flag)
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRUCT, 8)
      self.profile.write(oprot)
      oprot.writeFieldEnd()
    if self.link_mchnt_cd is not None:
      oprot.writeFieldBegin('link_mchnt_cd', TType.STRING, 9)
      oprot.writeString(self.link_mchnt_cd)
      oprot.writeFieldEnd()
    if self.daily_settle_flag is not None:
      oprot.writeFieldBegin('daily_settle_flag', TType.STRING, 10)
      oprot.writeString(self.daily_settle_flag)
      oprot.writeFieldEnd()
    if self.daily_settle_set_cd is not None:
      oprot.writeFieldBegin('daily_settle_set_cd', TType.STRING, 11)
      oprot.writeString(self.daily_settle_set_cd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.payconf is None:
      raise TProtocol.TProtocolException(message='Required field payconf is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateReq:
  """
  Attributes:
   - userid
   - mchnt_id
   - batch_id
   - trace_no
   - chnlcode
   - src
   - payconfs
   - profile
   - pics
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.STRING, 'batch_id', None, None, ), # 3
    (4, TType.STRING, 'trace_no', None, None, ), # 4
    (5, TType.I32, 'chnlcode', None, None, ), # 5
    (6, TType.STRING, 'src', None, None, ), # 6
    (7, TType.LIST, 'payconfs', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 7
    (8, TType.STRUCT, 'profile', (UserProfile, UserProfile.thrift_spec), None, ), # 8
    (9, TType.LIST, 'pics', (TType.I32,None), None, ), # 9
  )

  def __init__(self, userid=None, mchnt_id=None, batch_id=None, trace_no=None, chnlcode=None, src=None, payconfs=None, profile=None, pics=None,):
    self.userid = userid
    self.mchnt_id = mchnt_id
    self.batch_id = batch_id
    self.trace_no = trace_no
    self.chnlcode = chnlcode
    self.src = src
    self.payconfs = payconfs
    self.profile = profile
    self.pics = pics

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.batch_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.payconfs = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = PayConf()
            _elem110.read(iprot)
            self.payconfs.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.profile = UserProfile()
          self.profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.pics = []
          (_etype114, _size111) = iprot.readListBegin()
          for _i115 in xrange(_size111):
            _elem116 = iprot.readI32();
            self.pics.append(_elem116)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateReq')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.batch_id is not None:
      oprot.writeFieldBegin('batch_id', TType.STRING, 3)
      oprot.writeString(self.batch_id)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 4)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 5)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 6)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.payconfs is not None:
      oprot.writeFieldBegin('payconfs', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.payconfs))
      for iter117 in self.payconfs:
        iter117.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRUCT, 8)
      self.profile.write(oprot)
      oprot.writeFieldEnd()
    if self.pics is not None:
      oprot.writeFieldBegin('pics', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.pics))
      for iter118 in self.pics:
        oprot.writeI32(iter118)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.batch_id is None:
      raise TProtocol.TProtocolException(message='Required field batch_id is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateQueryReq:
  """
  Attributes:
   - userid
   - mchnt_id
   - out_trace_no
   - chnlcode
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.STRING, 'out_trace_no', None, None, ), # 3
    (4, TType.I32, 'chnlcode', None, None, ), # 4
    (5, TType.STRING, 'extend', None, None, ), # 5
  )

  def __init__(self, userid=None, mchnt_id=None, out_trace_no=None, chnlcode=None, extend=None,):
    self.userid = userid
    self.mchnt_id = mchnt_id
    self.out_trace_no = out_trace_no
    self.chnlcode = chnlcode
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateQueryReq')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 3)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 4)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 5)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateMchntResp:
  """
  Attributes:
   - userid
   - mchnt_id
   - out_trace_no
   - chnlcode
   - state
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.STRING, 'out_trace_no', None, None, ), # 3
    (4, TType.I32, 'chnlcode', None, None, ), # 4
    (5, TType.I16, 'state', None, None, ), # 5
  )

  def __init__(self, userid=None, mchnt_id=None, out_trace_no=None, chnlcode=None, state=None,):
    self.userid = userid
    self.mchnt_id = mchnt_id
    self.out_trace_no = out_trace_no
    self.chnlcode = chnlcode
    self.state = state

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.state = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateMchntResp')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 3)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 4)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I16, 5)
      oprot.writeI16(self.state)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.state is None:
      raise TProtocol.TProtocolException(message='Required field state is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WechatConfFY:
  """
  Attributes:
   - mchnt_id
   - jsapipath
   - sub_appid
   - subscribe_appid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.STRING, 'jsapipath', None, None, ), # 2
    (3, TType.STRING, 'sub_appid', None, None, ), # 3
    (4, TType.STRING, 'subscribe_appid', None, None, ), # 4
  )

  def __init__(self, mchnt_id=None, jsapipath=None, sub_appid=None, subscribe_appid=None,):
    self.mchnt_id = mchnt_id
    self.jsapipath = jsapipath
    self.sub_appid = sub_appid
    self.subscribe_appid = subscribe_appid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jsapipath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sub_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.subscribe_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WechatConfFY')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.jsapipath is not None:
      oprot.writeFieldBegin('jsapipath', TType.STRING, 2)
      oprot.writeString(self.jsapipath)
      oprot.writeFieldEnd()
    if self.sub_appid is not None:
      oprot.writeFieldBegin('sub_appid', TType.STRING, 3)
      oprot.writeString(self.sub_appid)
      oprot.writeFieldEnd()
    if self.subscribe_appid is not None:
      oprot.writeFieldBegin('subscribe_appid', TType.STRING, 4)
      oprot.writeString(self.subscribe_appid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WechatConfFYResp:
  """
  Attributes:
   - mchnt_id
   - jsapipath_code
   - jsapipath_msg
   - sub_appid_code
   - sub_appid_msg
   - subcribe_appid_code
   - subcribe_appid_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.STRING, 'jsapipath_code', None, None, ), # 2
    (3, TType.STRING, 'jsapipath_msg', None, None, ), # 3
    (4, TType.STRING, 'sub_appid_code', None, None, ), # 4
    (5, TType.STRING, 'sub_appid_msg', None, None, ), # 5
    (6, TType.STRING, 'subcribe_appid_code', None, None, ), # 6
    (7, TType.STRING, 'subcribe_appid_msg', None, None, ), # 7
  )

  def __init__(self, mchnt_id=None, jsapipath_code=None, jsapipath_msg=None, sub_appid_code=None, sub_appid_msg=None, subcribe_appid_code=None, subcribe_appid_msg=None,):
    self.mchnt_id = mchnt_id
    self.jsapipath_code = jsapipath_code
    self.jsapipath_msg = jsapipath_msg
    self.sub_appid_code = sub_appid_code
    self.sub_appid_msg = sub_appid_msg
    self.subcribe_appid_code = subcribe_appid_code
    self.subcribe_appid_msg = subcribe_appid_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jsapipath_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jsapipath_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sub_appid_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sub_appid_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.subcribe_appid_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.subcribe_appid_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WechatConfFYResp')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.jsapipath_code is not None:
      oprot.writeFieldBegin('jsapipath_code', TType.STRING, 2)
      oprot.writeString(self.jsapipath_code)
      oprot.writeFieldEnd()
    if self.jsapipath_msg is not None:
      oprot.writeFieldBegin('jsapipath_msg', TType.STRING, 3)
      oprot.writeString(self.jsapipath_msg)
      oprot.writeFieldEnd()
    if self.sub_appid_code is not None:
      oprot.writeFieldBegin('sub_appid_code', TType.STRING, 4)
      oprot.writeString(self.sub_appid_code)
      oprot.writeFieldEnd()
    if self.sub_appid_msg is not None:
      oprot.writeFieldBegin('sub_appid_msg', TType.STRING, 5)
      oprot.writeString(self.sub_appid_msg)
      oprot.writeFieldEnd()
    if self.subcribe_appid_code is not None:
      oprot.writeFieldBegin('subcribe_appid_code', TType.STRING, 6)
      oprot.writeString(self.subcribe_appid_code)
      oprot.writeFieldEnd()
    if self.subcribe_appid_msg is not None:
      oprot.writeFieldBegin('subcribe_appid_msg', TType.STRING, 7)
      oprot.writeString(self.subcribe_appid_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ElecContractInfo:
  """
  Attributes:
   - mchnt_id
   - verify_no
   - verify_no_expire_ts
   - contract_no
   - sign_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.STRING, 'verify_no', None, None, ), # 2
    (3, TType.STRING, 'verify_no_expire_ts', None, None, ), # 3
    (4, TType.STRING, 'contract_no', None, None, ), # 4
    (5, TType.STRING, 'sign_url', None, None, ), # 5
  )

  def __init__(self, mchnt_id=None, verify_no=None, verify_no_expire_ts=None, contract_no=None, sign_url=None,):
    self.mchnt_id = mchnt_id
    self.verify_no = verify_no
    self.verify_no_expire_ts = verify_no_expire_ts
    self.contract_no = contract_no
    self.sign_url = sign_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.verify_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.verify_no_expire_ts = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.contract_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sign_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ElecContractInfo')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.verify_no is not None:
      oprot.writeFieldBegin('verify_no', TType.STRING, 2)
      oprot.writeString(self.verify_no)
      oprot.writeFieldEnd()
    if self.verify_no_expire_ts is not None:
      oprot.writeFieldBegin('verify_no_expire_ts', TType.STRING, 3)
      oprot.writeString(self.verify_no_expire_ts)
      oprot.writeFieldEnd()
    if self.contract_no is not None:
      oprot.writeFieldBegin('contract_no', TType.STRING, 4)
      oprot.writeString(self.contract_no)
      oprot.writeFieldEnd()
    if self.sign_url is not None:
      oprot.writeFieldBegin('sign_url', TType.STRING, 5)
      oprot.writeString(self.sign_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewWC:
  """
  Attributes:
   - userid
   - payconf
   - indentity_photo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.LIST, 'payconf', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'indentity_photo', None, None, ), # 3
  )

  def __init__(self, userid=None, payconf=None, indentity_photo=None,):
    self.userid = userid
    self.payconf = payconf
    self.indentity_photo = indentity_photo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.payconf = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = PayConf()
            _elem124.read(iprot)
            self.payconf.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.indentity_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewWC')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.payconf))
      for iter125 in self.payconf:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.indentity_photo is not None:
      oprot.writeFieldBegin('indentity_photo', TType.STRING, 3)
      oprot.writeString(self.indentity_photo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.payconf is None:
      raise TProtocol.TProtocolException(message='Required field payconf is unset!')
    if self.indentity_photo is None:
      raise TProtocol.TProtocolException(message='Required field indentity_photo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewDZ:
  """
  Attributes:
   - userid
   - trace_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trace_no', None, None, ), # 2
  )

  def __init__(self, userid=None, trace_no=None,):
    self.userid = userid
    self.trace_no = trace_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewDZ')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 2)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewHuiyi:
  """
  Attributes:
   - userid
   - payconf
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.LIST, 'payconf', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 2
  )

  def __init__(self, userid=None, payconf=None,):
    self.userid = userid
    self.payconf = payconf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.payconf = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = PayConf()
            _elem131.read(iprot)
            self.payconf.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewHuiyi')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.payconf))
      for iter132 in self.payconf:
        iter132.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.payconf is None:
      raise TProtocol.TProtocolException(message='Required field payconf is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HuiyiUpdateArg:
  """
  Attributes:
   - userid
   - mchnt_id
   - profile
   - payconf
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.STRUCT, 'profile', (UserProfile, UserProfile.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'payconf', (PayConf, PayConf.thrift_spec), None, ), # 4
  )

  def __init__(self, userid=None, mchnt_id=None, profile=None, payconf=None,):
    self.userid = userid
    self.mchnt_id = mchnt_id
    self.profile = profile
    self.payconf = payconf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.profile = UserProfile()
          self.profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.payconf = PayConf()
          self.payconf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HuiyiUpdateArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRUCT, 3)
      self.profile.write(oprot)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.STRUCT, 4)
      self.payconf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HuiyiQueryResp:
  """
  Attributes:
   - profile
   - fee
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'profile', (UserProfile, UserProfile.thrift_spec), None, ), # 1
    None, # 2
    (3, TType.STRING, 'fee', None, None, ), # 3
  )

  def __init__(self, profile=None, fee=None,):
    self.profile = profile
    self.fee = fee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.profile = UserProfile()
          self.profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fee = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HuiyiQueryResp')
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRUCT, 1)
      self.profile.write(oprot)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.STRING, 3)
      oprot.writeString(self.fee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.profile is None:
      raise TProtocol.TProtocolException(message='Required field profile is unset!')
    if self.fee is None:
      raise TProtocol.TProtocolException(message='Required field fee is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CancelledResp:
  """
  Attributes:
   - mchnt_id
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.STRING, 'respcd', None, None, ), # 2
    (3, TType.STRING, 'respmsg', None, None, ), # 3
  )

  def __init__(self, mchnt_id=None, respcd=None, respmsg=None,):
    self.mchnt_id = mchnt_id
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CancelledResp')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 2)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 3)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.respcd is None:
      raise TProtocol.TProtocolException(message='Required field respcd is unset!')
    if self.respmsg is None:
      raise TProtocol.TProtocolException(message='Required field respmsg is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewQuery:
  """
  Attributes:
   - out_merchant_id
   - st
   - et
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_merchant_id', None, None, ), # 1
    (2, TType.STRING, 'st', None, None, ), # 2
    (3, TType.STRING, 'et', None, None, ), # 3
  )

  def __init__(self, out_merchant_id=None, st=None, et=None,):
    self.out_merchant_id = out_merchant_id
    self.st = st
    self.et = et

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.st = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.et = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewQuery')
    if self.out_merchant_id is not None:
      oprot.writeFieldBegin('out_merchant_id', TType.STRING, 1)
      oprot.writeString(self.out_merchant_id)
      oprot.writeFieldEnd()
    if self.st is not None:
      oprot.writeFieldBegin('st', TType.STRING, 2)
      oprot.writeString(self.st)
      oprot.writeFieldEnd()
    if self.et is not None:
      oprot.writeFieldBegin('et', TType.STRING, 3)
      oprot.writeString(self.et)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewResult:
  """
  Attributes:
   - userid
   - merchant_id
   - out_merchant_id
   - active_api
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'merchant_id', None, None, ), # 2
    (3, TType.STRING, 'out_merchant_id', None, None, ), # 3
    (4, TType.STRING, 'active_api', None, None, ), # 4
  )

  def __init__(self, userid=None, merchant_id=None, out_merchant_id=None, active_api=None,):
    self.userid = userid
    self.merchant_id = merchant_id
    self.out_merchant_id = out_merchant_id
    self.active_api = active_api

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.active_api = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewResult')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.STRING, 2)
      oprot.writeString(self.merchant_id)
      oprot.writeFieldEnd()
    if self.out_merchant_id is not None:
      oprot.writeFieldBegin('out_merchant_id', TType.STRING, 3)
      oprot.writeString(self.out_merchant_id)
      oprot.writeFieldEnd()
    if self.active_api is not None:
      oprot.writeFieldBegin('active_api', TType.STRING, 4)
      oprot.writeString(self.active_api)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    if self.out_merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field out_merchant_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryResult:
  """
  Attributes:
   - merchant_id
   - out_merchant_id
   - examine_status
   - activate_status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'merchant_id', None, None, ), # 1
    (2, TType.STRING, 'out_merchant_id', None, None, ), # 2
    (3, TType.STRING, 'examine_status', None, None, ), # 3
    (4, TType.STRING, 'activate_status', None, None, ), # 4
  )

  def __init__(self, merchant_id=None, out_merchant_id=None, examine_status=None, activate_status=None,):
    self.merchant_id = merchant_id
    self.out_merchant_id = out_merchant_id
    self.examine_status = examine_status
    self.activate_status = activate_status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.out_merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.examine_status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.activate_status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryResult')
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.STRING, 1)
      oprot.writeString(self.merchant_id)
      oprot.writeFieldEnd()
    if self.out_merchant_id is not None:
      oprot.writeFieldBegin('out_merchant_id', TType.STRING, 2)
      oprot.writeString(self.out_merchant_id)
      oprot.writeFieldEnd()
    if self.examine_status is not None:
      oprot.writeFieldBegin('examine_status', TType.STRING, 3)
      oprot.writeString(self.examine_status)
      oprot.writeFieldEnd()
    if self.activate_status is not None:
      oprot.writeFieldBegin('activate_status', TType.STRING, 4)
      oprot.writeString(self.activate_status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    if self.out_merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field out_merchant_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpcertResult:
  """
  Attributes:
   - indentity_photo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'indentity_photo', None, None, ), # 1
  )

  def __init__(self, indentity_photo=None,):
    self.indentity_photo = indentity_photo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.indentity_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpcertResult')
    if self.indentity_photo is not None:
      oprot.writeFieldBegin('indentity_photo', TType.STRING, 1)
      oprot.writeString(self.indentity_photo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.indentity_photo is None:
      raise TProtocol.TProtocolException(message='Required field indentity_photo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UploadPicArg:
  """
  Attributes:
   - content
   - imgname
   - chnlcode
   - trace_no
   - pic_type
   - userid
   - mchnt_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.STRING, 'imgname', None, None, ), # 2
    (3, TType.I32, 'chnlcode', None, None, ), # 3
    (4, TType.STRING, 'trace_no', None, None, ), # 4
    (5, TType.I64, 'pic_type', None, None, ), # 5
    (6, TType.I64, 'userid', None, None, ), # 6
    (7, TType.STRING, 'mchnt_id', None, None, ), # 7
  )

  def __init__(self, content=None, imgname=None, chnlcode=None, trace_no=None, pic_type=None, userid=None, mchnt_id=None,):
    self.content = content
    self.imgname = imgname
    self.chnlcode = chnlcode
    self.trace_no = trace_no
    self.pic_type = pic_type
    self.userid = userid
    self.mchnt_id = mchnt_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.imgname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.pic_type = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UploadPicArg')
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.imgname is not None:
      oprot.writeFieldBegin('imgname', TType.STRING, 2)
      oprot.writeString(self.imgname)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 3)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 4)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.pic_type is not None:
      oprot.writeFieldBegin('pic_type', TType.I64, 5)
      oprot.writeI64(self.pic_type)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 6)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 7)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    if self.imgname is None:
      raise TProtocol.TProtocolException(message='Required field imgname is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BankAccountQueryArg:
  """
  Attributes:
   - chnlcode
   - trace_no
   - merchant_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'chnlcode', None, None, ), # 1
    (2, TType.STRING, 'trace_no', None, None, ), # 2
    (3, TType.STRING, 'merchant_id', None, None, ), # 3
  )

  def __init__(self, chnlcode=None, trace_no=None, merchant_id=None,):
    self.chnlcode = chnlcode
    self.trace_no = trace_no
    self.merchant_id = merchant_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BankAccountQueryArg')
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 1)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 2)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.STRING, 3)
      oprot.writeString(self.merchant_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WeifutongError(Exception):
  """
  Attributes:
   - respcd
   - respmsg
   - ext
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
    (3, TType.STRING, 'ext', None, None, ), # 3
  )

  def __init__(self, respcd=None, respmsg=None, ext=None,):
    self.respcd = respcd
    self.respmsg = respmsg
    self.ext = ext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.respcd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ext = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WeifutongError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.I32, 1)
      oprot.writeI32(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRING, 3)
      oprot.writeString(self.ext)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegisterQuery:
  """
  Attributes:
   - userid
   - trace_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trace_no', None, None, ), # 2
  )

  def __init__(self, userid=None, trace_no=None,):
    self.userid = userid
    self.trace_no = trace_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegisterQuery')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 2)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WSAddMerchantConfigArg:
  """
  Attributes:
   - userid
   - chnlcode
   - trace_no
   - mchnt_id
   - path
   - appid
   - subscribe_appid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'chnlcode', None, None, ), # 2
    (3, TType.I64, 'trace_no', None, None, ), # 3
    (4, TType.STRING, 'mchnt_id', None, None, ), # 4
    (5, TType.STRING, 'path', None, None, ), # 5
    (6, TType.STRING, 'appid', None, None, ), # 6
    (7, TType.STRING, 'subscribe_appid', None, None, ), # 7
  )

  def __init__(self, userid=None, chnlcode=None, trace_no=None, mchnt_id=None, path=None, appid=None, subscribe_appid=None,):
    self.userid = userid
    self.chnlcode = chnlcode
    self.trace_no = trace_no
    self.mchnt_id = mchnt_id
    self.path = path
    self.appid = appid
    self.subscribe_appid = subscribe_appid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.chnlcode = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.trace_no = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.appid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.subscribe_appid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WSAddMerchantConfigArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I64, 2)
      oprot.writeI64(self.chnlcode)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.I64, 3)
      oprot.writeI64(self.trace_no)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 4)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 5)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 6)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.subscribe_appid is not None:
      oprot.writeFieldBegin('subscribe_appid', TType.STRING, 7)
      oprot.writeString(self.subscribe_appid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WeixinRegisterQuery:
  """
  Attributes:
   - userid
   - trace_no
   - chnlcode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trace_no', None, None, ), # 2
    (3, TType.I64, 'chnlcode', None, None, ), # 3
  )

  def __init__(self, userid=None, trace_no=None, chnlcode=None,):
    self.userid = userid
    self.trace_no = trace_no
    self.chnlcode = chnlcode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.chnlcode = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WeixinRegisterQuery')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 2)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I64, 3)
      oprot.writeI64(self.chnlcode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WeixinRegisterQueryResp:
  """
  Attributes:
   - userid
   - merchant_id
   - out_merchant_id
   - active_api
   - sign_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'merchant_id', None, None, ), # 2
    (3, TType.STRING, 'out_merchant_id', None, None, ), # 3
    (4, TType.STRING, 'active_api', None, None, ), # 4
    (5, TType.STRING, 'sign_url', None, None, ), # 5
  )

  def __init__(self, userid=None, merchant_id=None, out_merchant_id=None, active_api=None, sign_url=None,):
    self.userid = userid
    self.merchant_id = merchant_id
    self.out_merchant_id = out_merchant_id
    self.active_api = active_api
    self.sign_url = sign_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.active_api = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sign_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WeixinRegisterQueryResp')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.STRING, 2)
      oprot.writeString(self.merchant_id)
      oprot.writeFieldEnd()
    if self.out_merchant_id is not None:
      oprot.writeFieldBegin('out_merchant_id', TType.STRING, 3)
      oprot.writeString(self.out_merchant_id)
      oprot.writeFieldEnd()
    if self.active_api is not None:
      oprot.writeFieldBegin('active_api', TType.STRING, 4)
      oprot.writeString(self.active_api)
      oprot.writeFieldEnd()
    if self.sign_url is not None:
      oprot.writeFieldBegin('sign_url', TType.STRING, 5)
      oprot.writeString(self.sign_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    if self.out_merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field out_merchant_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WeixinSignContractArg:
  """
  Attributes:
   - userid
   - trace_no
   - chnlcode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trace_no', None, None, ), # 2
    (3, TType.I64, 'chnlcode', None, None, ), # 3
  )

  def __init__(self, userid=None, trace_no=None, chnlcode=None,):
    self.userid = userid
    self.trace_no = trace_no
    self.chnlcode = chnlcode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.chnlcode = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WeixinSignContractArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 2)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I64, 3)
      oprot.writeI64(self.chnlcode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WeixinConfigQuery:
  """
  Attributes:
   - userid
   - trace_no
   - chnlcode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trace_no', None, None, ), # 2
    (3, TType.I64, 'chnlcode', None, None, ), # 3
  )

  def __init__(self, userid=None, trace_no=None, chnlcode=None,):
    self.userid = userid
    self.trace_no = trace_no
    self.chnlcode = chnlcode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.chnlcode = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WeixinConfigQuery')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 2)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I64, 3)
      oprot.writeI64(self.chnlcode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HelibaoStoreNewQueryArg:
  """
  Attributes:
   - userid
   - out_trace_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'out_trace_no', None, None, ), # 2
  )

  def __init__(self, userid=None, out_trace_no=None,):
    self.userid = userid
    self.out_trace_no = out_trace_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HelibaoStoreNewQueryArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 2)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HelibaoStoreNewQueryResp:
  """
  Attributes:
   - userid
   - sign_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'sign_url', None, None, ), # 2
  )

  def __init__(self, userid=None, sign_url=None,):
    self.userid = userid
    self.sign_url = sign_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sign_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HelibaoStoreNewQueryResp')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.sign_url is not None:
      oprot.writeFieldBegin('sign_url', TType.STRING, 2)
      oprot.writeString(self.sign_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.sign_url is None:
      raise TProtocol.TProtocolException(message='Required field sign_url is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HelibaoAgreementQueryArg:
  """
  Attributes:
   - userid
   - out_trace_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'out_trace_no', None, None, ), # 2
  )

  def __init__(self, userid=None, out_trace_no=None,):
    self.userid = userid
    self.out_trace_no = out_trace_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HelibaoAgreementQueryArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 2)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HelibaoAgreementQueryResp:
  """
  Attributes:
   - userid
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
  )

  def __init__(self, userid=None, status=None,):
    self.userid = userid
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HelibaoAgreementQueryResp')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddMchntQueryArg:
  """
  Attributes:
   - query_meta
   - userid_list
   - mchnt_id_list
   - chnlcode_list
   - batch_id_list
   - out_trace_no_list
   - trace_no_list
   - src_list
   - state_list
   - subscribe_appid_list
   - s_ctime
   - e_ctime
   - s_utime
   - e_utime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'mchnt_id_list', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'chnlcode_list', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'batch_id_list', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'out_trace_no_list', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'trace_no_list', (TType.STRING,None), None, ), # 7
    (8, TType.LIST, 'src_list', (TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'state_list', (TType.I32,None), None, ), # 9
    None, # 10
    (11, TType.LIST, 'subscribe_appid_list', (TType.STRING,None), None, ), # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 's_ctime', None, None, ), # 30
    (31, TType.STRING, 'e_ctime', None, None, ), # 31
    (32, TType.STRING, 's_utime', None, None, ), # 32
    (33, TType.STRING, 'e_utime', None, None, ), # 33
  )

  def __init__(self, query_meta=None, userid_list=None, mchnt_id_list=None, chnlcode_list=None, batch_id_list=None, out_trace_no_list=None, trace_no_list=None, src_list=None, state_list=None, subscribe_appid_list=None, s_ctime=None, e_ctime=None, s_utime=None, e_utime=None,):
    self.query_meta = query_meta
    self.userid_list = userid_list
    self.mchnt_id_list = mchnt_id_list
    self.chnlcode_list = chnlcode_list
    self.batch_id_list = batch_id_list
    self.out_trace_no_list = out_trace_no_list
    self.trace_no_list = trace_no_list
    self.src_list = src_list
    self.state_list = state_list
    self.subscribe_appid_list = subscribe_appid_list
    self.s_ctime = s_ctime
    self.e_ctime = e_ctime
    self.s_utime = s_utime
    self.e_utime = e_utime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = iprot.readI64();
            self.userid_list.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.mchnt_id_list = []
          (_etype142, _size139) = iprot.readListBegin()
          for _i143 in xrange(_size139):
            _elem144 = iprot.readString();
            self.mchnt_id_list.append(_elem144)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.chnlcode_list = []
          (_etype148, _size145) = iprot.readListBegin()
          for _i149 in xrange(_size145):
            _elem150 = iprot.readI32();
            self.chnlcode_list.append(_elem150)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.batch_id_list = []
          (_etype154, _size151) = iprot.readListBegin()
          for _i155 in xrange(_size151):
            _elem156 = iprot.readString();
            self.batch_id_list.append(_elem156)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.out_trace_no_list = []
          (_etype160, _size157) = iprot.readListBegin()
          for _i161 in xrange(_size157):
            _elem162 = iprot.readString();
            self.out_trace_no_list.append(_elem162)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.trace_no_list = []
          (_etype166, _size163) = iprot.readListBegin()
          for _i167 in xrange(_size163):
            _elem168 = iprot.readString();
            self.trace_no_list.append(_elem168)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.src_list = []
          (_etype172, _size169) = iprot.readListBegin()
          for _i173 in xrange(_size169):
            _elem174 = iprot.readString();
            self.src_list.append(_elem174)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.state_list = []
          (_etype178, _size175) = iprot.readListBegin()
          for _i179 in xrange(_size175):
            _elem180 = iprot.readI32();
            self.state_list.append(_elem180)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.subscribe_appid_list = []
          (_etype184, _size181) = iprot.readListBegin()
          for _i185 in xrange(_size181):
            _elem186 = iprot.readString();
            self.subscribe_appid_list.append(_elem186)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.s_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.e_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.s_utime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.e_utime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddMchntQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter187 in self.userid_list:
        oprot.writeI64(iter187)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mchnt_id_list is not None:
      oprot.writeFieldBegin('mchnt_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.mchnt_id_list))
      for iter188 in self.mchnt_id_list:
        oprot.writeString(iter188)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chnlcode_list is not None:
      oprot.writeFieldBegin('chnlcode_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.chnlcode_list))
      for iter189 in self.chnlcode_list:
        oprot.writeI32(iter189)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.batch_id_list is not None:
      oprot.writeFieldBegin('batch_id_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.batch_id_list))
      for iter190 in self.batch_id_list:
        oprot.writeString(iter190)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.out_trace_no_list is not None:
      oprot.writeFieldBegin('out_trace_no_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.out_trace_no_list))
      for iter191 in self.out_trace_no_list:
        oprot.writeString(iter191)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.trace_no_list is not None:
      oprot.writeFieldBegin('trace_no_list', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.trace_no_list))
      for iter192 in self.trace_no_list:
        oprot.writeString(iter192)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.src_list is not None:
      oprot.writeFieldBegin('src_list', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.src_list))
      for iter193 in self.src_list:
        oprot.writeString(iter193)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.state_list is not None:
      oprot.writeFieldBegin('state_list', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.state_list))
      for iter194 in self.state_list:
        oprot.writeI32(iter194)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.subscribe_appid_list is not None:
      oprot.writeFieldBegin('subscribe_appid_list', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.subscribe_appid_list))
      for iter195 in self.subscribe_appid_list:
        oprot.writeString(iter195)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.s_ctime is not None:
      oprot.writeFieldBegin('s_ctime', TType.STRING, 30)
      oprot.writeString(self.s_ctime)
      oprot.writeFieldEnd()
    if self.e_ctime is not None:
      oprot.writeFieldBegin('e_ctime', TType.STRING, 31)
      oprot.writeString(self.e_ctime)
      oprot.writeFieldEnd()
    if self.s_utime is not None:
      oprot.writeFieldBegin('s_utime', TType.STRING, 32)
      oprot.writeString(self.s_utime)
      oprot.writeFieldEnd()
    if self.e_utime is not None:
      oprot.writeFieldBegin('e_utime', TType.STRING, 33)
      oprot.writeString(self.e_utime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SendSmsArg:
  """
  Attributes:
   - userid
   - sms_type
   - mchnt_id
   - out_trace_no
   - chnlcode
   - mobile
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I32, 'sms_type', None, None, ), # 2
    (3, TType.STRING, 'mchnt_id', None, None, ), # 3
    (4, TType.STRING, 'out_trace_no', None, None, ), # 4
    (5, TType.I32, 'chnlcode', None, None, ), # 5
    (6, TType.STRING, 'mobile', None, None, ), # 6
  )

  def __init__(self, userid=None, sms_type=None, mchnt_id=None, out_trace_no=None, chnlcode=None, mobile=None,):
    self.userid = userid
    self.sms_type = sms_type
    self.mchnt_id = mchnt_id
    self.out_trace_no = out_trace_no
    self.chnlcode = chnlcode
    self.mobile = mobile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sms_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendSmsArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.sms_type is not None:
      oprot.writeFieldBegin('sms_type', TType.I32, 2)
      oprot.writeI32(self.sms_type)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 3)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 4)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 5)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 6)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.sms_type is None:
      raise TProtocol.TProtocolException(message='Required field sms_type is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceArg:
  """
  Attributes:
   - userid
   - mchnt_id
   - out_trace_no
   - srv_type
   - chnlcode
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.STRING, 'out_trace_no', None, None, ), # 3
    (4, TType.I32, 'srv_type', None, None, ), # 4
    (5, TType.I32, 'chnlcode', None, None, ), # 5
    (6, TType.STRING, 'extend', None, None, ), # 6
  )

  def __init__(self, userid=None, mchnt_id=None, out_trace_no=None, srv_type=None, chnlcode=None, extend=None,):
    self.userid = userid
    self.mchnt_id = mchnt_id
    self.out_trace_no = out_trace_no
    self.srv_type = srv_type
    self.chnlcode = chnlcode
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.srv_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 3)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.srv_type is not None:
      oprot.writeFieldBegin('srv_type', TType.I32, 4)
      oprot.writeI32(self.srv_type)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 5)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 6)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.srv_type is None:
      raise TProtocol.TProtocolException(message='Required field srv_type is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeRet:
  """
  Attributes:
   - code
   - errmsg
   - out_trace_no
   - state
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.STRING, 'out_trace_no', None, None, ), # 3
    (4, TType.I32, 'state', None, None, ), # 4
    (5, TType.STRING, 'extend', None, None, ), # 5
  )

  def __init__(self, code=None, errmsg=None, out_trace_no=None, state=None, extend=None,):
    self.code = code
    self.errmsg = errmsg
    self.out_trace_no = out_trace_no
    self.state = state
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeRet')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 3)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 4)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 5)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    if self.errmsg is None:
      raise TProtocol.TProtocolException(message='Required field errmsg is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.state is None:
      raise TProtocol.TProtocolException(message='Required field state is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpPicArg:
  """
  Attributes:
   - out_trace_no
   - chnlcode
   - pic_types
   - mchnt_id
   - userid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_trace_no', None, None, ), # 1
    (2, TType.I32, 'chnlcode', None, None, ), # 2
    (3, TType.LIST, 'pic_types', (TType.I32,None), None, ), # 3
    (4, TType.STRING, 'mchnt_id', None, None, ), # 4
    (5, TType.I64, 'userid', None, None, ), # 5
  )

  def __init__(self, out_trace_no=None, chnlcode=None, pic_types=None, mchnt_id=None, userid=None,):
    self.out_trace_no = out_trace_no
    self.chnlcode = chnlcode
    self.pic_types = pic_types
    self.mchnt_id = mchnt_id
    self.userid = userid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.pic_types = []
          (_etype199, _size196) = iprot.readListBegin()
          for _i200 in xrange(_size196):
            _elem201 = iprot.readI32();
            self.pic_types.append(_elem201)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpPicArg')
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 1)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 2)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.pic_types is not None:
      oprot.writeFieldBegin('pic_types', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.pic_types))
      for iter202 in self.pic_types:
        oprot.writeI32(iter202)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 4)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 5)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.pic_types is None:
      raise TProtocol.TProtocolException(message='Required field pic_types is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DataPenetrateArg:
  """
  Attributes:
   - out_trace_no
   - chnlcode
   - userid
   - paychnl_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_trace_no', None, None, ), # 1
    (2, TType.I32, 'chnlcode', None, None, ), # 2
    (3, TType.I64, 'userid', None, None, ), # 3
    (4, TType.STRING, 'paychnl_id', None, None, ), # 4
  )

  def __init__(self, out_trace_no=None, chnlcode=None, userid=None, paychnl_id=None,):
    self.out_trace_no = out_trace_no
    self.chnlcode = chnlcode
    self.userid = userid
    self.paychnl_id = paychnl_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.paychnl_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DataPenetrateArg')
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 1)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 2)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 3)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.paychnl_id is not None:
      oprot.writeFieldBegin('paychnl_id', TType.STRING, 4)
      oprot.writeString(self.paychnl_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.paychnl_id is None:
      raise TProtocol.TProtocolException(message='Required field paychnl_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WechatConfUpdateItem:
  """
  Attributes:
   - userid
   - trace_no
   - chnlcode
   - wechat_conf
   - mchnt_id
   - chnlbind_sync_time
   - link_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trace_no', None, None, ), # 2
    (3, TType.I32, 'chnlcode', None, None, ), # 3
    (4, TType.STRUCT, 'wechat_conf', (WechatConf, WechatConf.thrift_spec), None, ), # 4
    (5, TType.STRING, 'mchnt_id', None, None, ), # 5
    (6, TType.STRING, 'chnlbind_sync_time', None, None, ), # 6
    (7, TType.STRING, 'link_id', None, None, ), # 7
  )

  def __init__(self, userid=None, trace_no=None, chnlcode=None, wechat_conf=None, mchnt_id=None, chnlbind_sync_time=None, link_id=None,):
    self.userid = userid
    self.trace_no = trace_no
    self.chnlcode = chnlcode
    self.wechat_conf = wechat_conf
    self.mchnt_id = mchnt_id
    self.chnlbind_sync_time = chnlbind_sync_time
    self.link_id = link_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.wechat_conf = WechatConf()
          self.wechat_conf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.chnlbind_sync_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.link_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WechatConfUpdateItem')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 2)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 3)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.wechat_conf is not None:
      oprot.writeFieldBegin('wechat_conf', TType.STRUCT, 4)
      self.wechat_conf.write(oprot)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 5)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.chnlbind_sync_time is not None:
      oprot.writeFieldBegin('chnlbind_sync_time', TType.STRING, 6)
      oprot.writeString(self.chnlbind_sync_time)
      oprot.writeFieldEnd()
    if self.link_id is not None:
      oprot.writeFieldBegin('link_id', TType.STRING, 7)
      oprot.writeString(self.link_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.wechat_conf is None:
      raise TProtocol.TProtocolException(message='Required field wechat_conf is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WechatConfUpdateArg:
  """
  Attributes:
   - batch_id
   - src
   - wechatconf_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'batch_id', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.LIST, 'wechatconf_list', (TType.STRUCT,(WechatConfUpdateItem, WechatConfUpdateItem.thrift_spec)), None, ), # 3
  )

  def __init__(self, batch_id=None, src=None, wechatconf_list=None,):
    self.batch_id = batch_id
    self.src = src
    self.wechatconf_list = wechatconf_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.batch_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.wechatconf_list = []
          (_etype206, _size203) = iprot.readListBegin()
          for _i207 in xrange(_size203):
            _elem208 = WechatConfUpdateItem()
            _elem208.read(iprot)
            self.wechatconf_list.append(_elem208)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WechatConfUpdateArg')
    if self.batch_id is not None:
      oprot.writeFieldBegin('batch_id', TType.STRING, 1)
      oprot.writeString(self.batch_id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.wechatconf_list is not None:
      oprot.writeFieldBegin('wechatconf_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.wechatconf_list))
      for iter209 in self.wechatconf_list:
        iter209.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.batch_id is None:
      raise TProtocol.TProtocolException(message='Required field batch_id is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.wechatconf_list is None:
      raise TProtocol.TProtocolException(message='Required field wechatconf_list is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AppendWechatConfArg:
  """
  Attributes:
   - batch_id
   - src
   - wechatconf
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'batch_id', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.STRUCT, 'wechatconf', (WechatConfUpdateItem, WechatConfUpdateItem.thrift_spec), None, ), # 3
  )

  def __init__(self, batch_id=None, src=None, wechatconf=None,):
    self.batch_id = batch_id
    self.src = src
    self.wechatconf = wechatconf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.batch_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.wechatconf = WechatConfUpdateItem()
          self.wechatconf.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AppendWechatConfArg')
    if self.batch_id is not None:
      oprot.writeFieldBegin('batch_id', TType.STRING, 1)
      oprot.writeString(self.batch_id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.wechatconf is not None:
      oprot.writeFieldBegin('wechatconf', TType.STRUCT, 3)
      self.wechatconf.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.batch_id is None:
      raise TProtocol.TProtocolException(message='Required field batch_id is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.wechatconf is None:
      raise TProtocol.TProtocolException(message='Required field wechatconf is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WechatConfReq:
  """
  Attributes:
   - wechat_conf
   - chnlcode
   - out_trace_no
   - mchnt_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'wechat_conf', (WechatConf, WechatConf.thrift_spec), None, ), # 1
    (2, TType.I32, 'chnlcode', None, None, ), # 2
    (3, TType.STRING, 'out_trace_no', None, None, ), # 3
    (4, TType.STRING, 'mchnt_id', None, None, ), # 4
  )

  def __init__(self, wechat_conf=None, chnlcode=None, out_trace_no=None, mchnt_id=None,):
    self.wechat_conf = wechat_conf
    self.chnlcode = chnlcode
    self.out_trace_no = out_trace_no
    self.mchnt_id = mchnt_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.wechat_conf = WechatConf()
          self.wechat_conf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WechatConfReq')
    if self.wechat_conf is not None:
      oprot.writeFieldBegin('wechat_conf', TType.STRUCT, 1)
      self.wechat_conf.write(oprot)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 2)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 3)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 4)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.wechat_conf is None:
      raise TProtocol.TProtocolException(message='Required field wechat_conf is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChnlbindSyncQueryArg:
  """
  Attributes:
   - query_meta
   - userid_list
   - mchnt_id_list
   - batch_id_list
   - out_trace_no_list
   - trace_no_list
   - src_list
   - sync_state_list
   - ctime_start
   - ctime_end
   - utime_start
   - utime_end
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'mchnt_id_list', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'batch_id_list', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'out_trace_no_list', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'trace_no_list', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'src_list', (TType.STRING,None), None, ), # 7
    (8, TType.LIST, 'sync_state_list', (TType.I16,None), None, ), # 8
    (9, TType.STRING, 'ctime_start', None, None, ), # 9
    (10, TType.STRING, 'ctime_end', None, None, ), # 10
    (11, TType.STRING, 'utime_start', None, None, ), # 11
    (12, TType.STRING, 'utime_end', None, None, ), # 12
  )

  def __init__(self, query_meta=None, userid_list=None, mchnt_id_list=None, batch_id_list=None, out_trace_no_list=None, trace_no_list=None, src_list=None, sync_state_list=None, ctime_start=None, ctime_end=None, utime_start=None, utime_end=None,):
    self.query_meta = query_meta
    self.userid_list = userid_list
    self.mchnt_id_list = mchnt_id_list
    self.batch_id_list = batch_id_list
    self.out_trace_no_list = out_trace_no_list
    self.trace_no_list = trace_no_list
    self.src_list = src_list
    self.sync_state_list = sync_state_list
    self.ctime_start = ctime_start
    self.ctime_end = ctime_end
    self.utime_start = utime_start
    self.utime_end = utime_end

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype213, _size210) = iprot.readListBegin()
          for _i214 in xrange(_size210):
            _elem215 = iprot.readI64();
            self.userid_list.append(_elem215)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.mchnt_id_list = []
          (_etype219, _size216) = iprot.readListBegin()
          for _i220 in xrange(_size216):
            _elem221 = iprot.readString();
            self.mchnt_id_list.append(_elem221)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.batch_id_list = []
          (_etype225, _size222) = iprot.readListBegin()
          for _i226 in xrange(_size222):
            _elem227 = iprot.readString();
            self.batch_id_list.append(_elem227)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.out_trace_no_list = []
          (_etype231, _size228) = iprot.readListBegin()
          for _i232 in xrange(_size228):
            _elem233 = iprot.readString();
            self.out_trace_no_list.append(_elem233)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.trace_no_list = []
          (_etype237, _size234) = iprot.readListBegin()
          for _i238 in xrange(_size234):
            _elem239 = iprot.readString();
            self.trace_no_list.append(_elem239)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.src_list = []
          (_etype243, _size240) = iprot.readListBegin()
          for _i244 in xrange(_size240):
            _elem245 = iprot.readString();
            self.src_list.append(_elem245)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.sync_state_list = []
          (_etype249, _size246) = iprot.readListBegin()
          for _i250 in xrange(_size246):
            _elem251 = iprot.readI16();
            self.sync_state_list.append(_elem251)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ctime_start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.ctime_end = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.utime_start = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.utime_end = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChnlbindSyncQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter252 in self.userid_list:
        oprot.writeI64(iter252)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mchnt_id_list is not None:
      oprot.writeFieldBegin('mchnt_id_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.mchnt_id_list))
      for iter253 in self.mchnt_id_list:
        oprot.writeString(iter253)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.batch_id_list is not None:
      oprot.writeFieldBegin('batch_id_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.batch_id_list))
      for iter254 in self.batch_id_list:
        oprot.writeString(iter254)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.out_trace_no_list is not None:
      oprot.writeFieldBegin('out_trace_no_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.out_trace_no_list))
      for iter255 in self.out_trace_no_list:
        oprot.writeString(iter255)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.trace_no_list is not None:
      oprot.writeFieldBegin('trace_no_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.trace_no_list))
      for iter256 in self.trace_no_list:
        oprot.writeString(iter256)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.src_list is not None:
      oprot.writeFieldBegin('src_list', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.src_list))
      for iter257 in self.src_list:
        oprot.writeString(iter257)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sync_state_list is not None:
      oprot.writeFieldBegin('sync_state_list', TType.LIST, 8)
      oprot.writeListBegin(TType.I16, len(self.sync_state_list))
      for iter258 in self.sync_state_list:
        oprot.writeI16(iter258)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ctime_start is not None:
      oprot.writeFieldBegin('ctime_start', TType.STRING, 9)
      oprot.writeString(self.ctime_start)
      oprot.writeFieldEnd()
    if self.ctime_end is not None:
      oprot.writeFieldBegin('ctime_end', TType.STRING, 10)
      oprot.writeString(self.ctime_end)
      oprot.writeFieldEnd()
    if self.utime_start is not None:
      oprot.writeFieldBegin('utime_start', TType.STRING, 11)
      oprot.writeString(self.utime_start)
      oprot.writeFieldEnd()
    if self.utime_end is not None:
      oprot.writeFieldBegin('utime_end', TType.STRING, 12)
      oprot.writeString(self.utime_end)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChnlbindRecord:
  """
  Attributes:
   - userid
   - mchntid
   - termid
   - mchntnm
   - mcc
   - chnlid
   - key1
   - key2
   - key3
   - priority
   - change
   - bigmchnt
   - available
   - chnlfee
   - qffee
   - admin
   - last_admin
   - create_time
   - update_time
   - tag1
   - tag2
   - memo
   - tradetype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'mchntid', None, None, ), # 2
    (3, TType.STRING, 'termid', None, None, ), # 3
    (4, TType.STRING, 'mchntnm', None, None, ), # 4
    (5, TType.STRING, 'mcc', None, None, ), # 5
    (6, TType.I64, 'chnlid', None, None, ), # 6
    (7, TType.STRING, 'key1', None, None, ), # 7
    (8, TType.STRING, 'key2', None, None, ), # 8
    (9, TType.STRING, 'key3', None, None, ), # 9
    (10, TType.I64, 'priority', None, None, ), # 10
    (11, TType.I64, 'change', None, None, ), # 11
    (12, TType.I64, 'bigmchnt', None, None, ), # 12
    (13, TType.I64, 'available', None, None, ), # 13
    (14, TType.DOUBLE, 'chnlfee', None, None, ), # 14
    (15, TType.DOUBLE, 'qffee', None, None, ), # 15
    (16, TType.I64, 'admin', None, None, ), # 16
    (17, TType.I64, 'last_admin', None, None, ), # 17
    (18, TType.STRING, 'create_time', None, None, ), # 18
    (19, TType.STRING, 'update_time', None, None, ), # 19
    (20, TType.STRING, 'tag1', None, None, ), # 20
    (21, TType.STRING, 'tag2', None, None, ), # 21
    (22, TType.STRING, 'memo', None, None, ), # 22
    (23, TType.I64, 'tradetype', None, None, ), # 23
  )

  def __init__(self, userid=None, mchntid=None, termid=None, mchntnm=None, mcc=None, chnlid=None, key1=None, key2=None, key3=None, priority=None, change=None, bigmchnt=None, available=None, chnlfee=None, qffee=None, admin=None, last_admin=None, create_time=None, update_time=None, tag1=None, tag2=None, memo=None, tradetype=None,):
    self.userid = userid
    self.mchntid = mchntid
    self.termid = termid
    self.mchntnm = mchntnm
    self.mcc = mcc
    self.chnlid = chnlid
    self.key1 = key1
    self.key2 = key2
    self.key3 = key3
    self.priority = priority
    self.change = change
    self.bigmchnt = bigmchnt
    self.available = available
    self.chnlfee = chnlfee
    self.qffee = qffee
    self.admin = admin
    self.last_admin = last_admin
    self.create_time = create_time
    self.update_time = update_time
    self.tag1 = tag1
    self.tag2 = tag2
    self.memo = memo
    self.tradetype = tradetype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchntid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.termid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mchntnm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mcc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.chnlid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.key1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.key2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.key3 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.priority = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.change = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.bigmchnt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.available = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.chnlfee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.qffee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.admin = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.last_admin = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.create_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.update_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.tag1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.tag2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.tradetype = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChnlbindRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchntid is not None:
      oprot.writeFieldBegin('mchntid', TType.STRING, 2)
      oprot.writeString(self.mchntid)
      oprot.writeFieldEnd()
    if self.termid is not None:
      oprot.writeFieldBegin('termid', TType.STRING, 3)
      oprot.writeString(self.termid)
      oprot.writeFieldEnd()
    if self.mchntnm is not None:
      oprot.writeFieldBegin('mchntnm', TType.STRING, 4)
      oprot.writeString(self.mchntnm)
      oprot.writeFieldEnd()
    if self.mcc is not None:
      oprot.writeFieldBegin('mcc', TType.STRING, 5)
      oprot.writeString(self.mcc)
      oprot.writeFieldEnd()
    if self.chnlid is not None:
      oprot.writeFieldBegin('chnlid', TType.I64, 6)
      oprot.writeI64(self.chnlid)
      oprot.writeFieldEnd()
    if self.key1 is not None:
      oprot.writeFieldBegin('key1', TType.STRING, 7)
      oprot.writeString(self.key1)
      oprot.writeFieldEnd()
    if self.key2 is not None:
      oprot.writeFieldBegin('key2', TType.STRING, 8)
      oprot.writeString(self.key2)
      oprot.writeFieldEnd()
    if self.key3 is not None:
      oprot.writeFieldBegin('key3', TType.STRING, 9)
      oprot.writeString(self.key3)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I64, 10)
      oprot.writeI64(self.priority)
      oprot.writeFieldEnd()
    if self.change is not None:
      oprot.writeFieldBegin('change', TType.I64, 11)
      oprot.writeI64(self.change)
      oprot.writeFieldEnd()
    if self.bigmchnt is not None:
      oprot.writeFieldBegin('bigmchnt', TType.I64, 12)
      oprot.writeI64(self.bigmchnt)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I64, 13)
      oprot.writeI64(self.available)
      oprot.writeFieldEnd()
    if self.chnlfee is not None:
      oprot.writeFieldBegin('chnlfee', TType.DOUBLE, 14)
      oprot.writeDouble(self.chnlfee)
      oprot.writeFieldEnd()
    if self.qffee is not None:
      oprot.writeFieldBegin('qffee', TType.DOUBLE, 15)
      oprot.writeDouble(self.qffee)
      oprot.writeFieldEnd()
    if self.admin is not None:
      oprot.writeFieldBegin('admin', TType.I64, 16)
      oprot.writeI64(self.admin)
      oprot.writeFieldEnd()
    if self.last_admin is not None:
      oprot.writeFieldBegin('last_admin', TType.I64, 17)
      oprot.writeI64(self.last_admin)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 18)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.STRING, 19)
      oprot.writeString(self.update_time)
      oprot.writeFieldEnd()
    if self.tag1 is not None:
      oprot.writeFieldBegin('tag1', TType.STRING, 20)
      oprot.writeString(self.tag1)
      oprot.writeFieldEnd()
    if self.tag2 is not None:
      oprot.writeFieldBegin('tag2', TType.STRING, 21)
      oprot.writeString(self.tag2)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 22)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.tradetype is not None:
      oprot.writeFieldBegin('tradetype', TType.I64, 23)
      oprot.writeI64(self.tradetype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.chnlid is None:
      raise TProtocol.TProtocolException(message='Required field chnlid is unset!')
    if self.priority is None:
      raise TProtocol.TProtocolException(message='Required field priority is unset!')
    if self.change is None:
      raise TProtocol.TProtocolException(message='Required field change is unset!')
    if self.bigmchnt is None:
      raise TProtocol.TProtocolException(message='Required field bigmchnt is unset!')
    if self.available is None:
      raise TProtocol.TProtocolException(message='Required field available is unset!')
    if self.admin is None:
      raise TProtocol.TProtocolException(message='Required field admin is unset!')
    if self.last_admin is None:
      raise TProtocol.TProtocolException(message='Required field last_admin is unset!')
    if self.tradetype is None:
      raise TProtocol.TProtocolException(message='Required field tradetype is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChnlbindSyncRecord:
  """
  Attributes:
   - id
   - chnlbind_record
   - batch_id
   - src
   - trace_no
   - out_trace_no
   - sync_plan_time
   - sync_time
   - sync_state
   - errmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRUCT, 'chnlbind_record', (ChnlbindRecord, ChnlbindRecord.thrift_spec), None, ), # 2
    (3, TType.STRING, 'batch_id', None, None, ), # 3
    (4, TType.STRING, 'src', None, None, ), # 4
    (5, TType.STRING, 'trace_no', None, None, ), # 5
    (6, TType.STRING, 'out_trace_no', None, None, ), # 6
    (7, TType.STRING, 'sync_plan_time', None, None, ), # 7
    (8, TType.STRING, 'sync_time', None, None, ), # 8
    (9, TType.I32, 'sync_state', None, None, ), # 9
    (10, TType.STRING, 'errmsg', None, None, ), # 10
  )

  def __init__(self, id=None, chnlbind_record=None, batch_id=None, src=None, trace_no=None, out_trace_no=None, sync_plan_time=None, sync_time=None, sync_state=None, errmsg=None,):
    self.id = id
    self.chnlbind_record = chnlbind_record
    self.batch_id = batch_id
    self.src = src
    self.trace_no = trace_no
    self.out_trace_no = out_trace_no
    self.sync_plan_time = sync_plan_time
    self.sync_time = sync_time
    self.sync_state = sync_state
    self.errmsg = errmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.chnlbind_record = ChnlbindRecord()
          self.chnlbind_record.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.batch_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.out_trace_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.sync_plan_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.sync_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.sync_state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChnlbindSyncRecord')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.chnlbind_record is not None:
      oprot.writeFieldBegin('chnlbind_record', TType.STRUCT, 2)
      self.chnlbind_record.write(oprot)
      oprot.writeFieldEnd()
    if self.batch_id is not None:
      oprot.writeFieldBegin('batch_id', TType.STRING, 3)
      oprot.writeString(self.batch_id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 4)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.trace_no is not None:
      oprot.writeFieldBegin('trace_no', TType.STRING, 5)
      oprot.writeString(self.trace_no)
      oprot.writeFieldEnd()
    if self.out_trace_no is not None:
      oprot.writeFieldBegin('out_trace_no', TType.STRING, 6)
      oprot.writeString(self.out_trace_no)
      oprot.writeFieldEnd()
    if self.sync_plan_time is not None:
      oprot.writeFieldBegin('sync_plan_time', TType.STRING, 7)
      oprot.writeString(self.sync_plan_time)
      oprot.writeFieldEnd()
    if self.sync_time is not None:
      oprot.writeFieldBegin('sync_time', TType.STRING, 8)
      oprot.writeString(self.sync_time)
      oprot.writeFieldEnd()
    if self.sync_state is not None:
      oprot.writeFieldBegin('sync_state', TType.I32, 9)
      oprot.writeI32(self.sync_state)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 10)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.chnlbind_record is None:
      raise TProtocol.TProtocolException(message='Required field chnlbind_record is unset!')
    if self.batch_id is None:
      raise TProtocol.TProtocolException(message='Required field batch_id is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.trace_no is None:
      raise TProtocol.TProtocolException(message='Required field trace_no is unset!')
    if self.out_trace_no is None:
      raise TProtocol.TProtocolException(message='Required field out_trace_no is unset!')
    if self.sync_plan_time is None:
      raise TProtocol.TProtocolException(message='Required field sync_plan_time is unset!')
    if self.sync_time is None:
      raise TProtocol.TProtocolException(message='Required field sync_time is unset!')
    if self.sync_state is None:
      raise TProtocol.TProtocolException(message='Required field sync_state is unset!')
    if self.errmsg is None:
      raise TProtocol.TProtocolException(message='Required field errmsg is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChnlbindSyncUpdateArg:
  """
  Attributes:
   - id
   - chnlbind_record
   - chnlbind_sync_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRUCT, 'chnlbind_record', (ChnlbindRecord, ChnlbindRecord.thrift_spec), None, ), # 2
    (3, TType.STRING, 'chnlbind_sync_time', None, None, ), # 3
  )

  def __init__(self, id=None, chnlbind_record=None, chnlbind_sync_time=None,):
    self.id = id
    self.chnlbind_record = chnlbind_record
    self.chnlbind_sync_time = chnlbind_sync_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.chnlbind_record = ChnlbindRecord()
          self.chnlbind_record.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.chnlbind_sync_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChnlbindSyncUpdateArg')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.chnlbind_record is not None:
      oprot.writeFieldBegin('chnlbind_record', TType.STRUCT, 2)
      self.chnlbind_record.write(oprot)
      oprot.writeFieldEnd()
    if self.chnlbind_sync_time is not None:
      oprot.writeFieldBegin('chnlbind_sync_time', TType.STRING, 3)
      oprot.writeString(self.chnlbind_sync_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LinkArg:
  """
  Attributes:
   - mchnt_id
   - chnlcode
   - userids
   - batch_id
   - src
   - chnlbind_sync_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.I32, 'chnlcode', None, None, ), # 2
    (3, TType.LIST, 'userids', (TType.I64,None), None, ), # 3
    (4, TType.STRING, 'batch_id', None, None, ), # 4
    (5, TType.STRING, 'src', None, None, ), # 5
    (6, TType.STRING, 'chnlbind_sync_time', None, None, ), # 6
  )

  def __init__(self, mchnt_id=None, chnlcode=None, userids=None, batch_id=None, src=None, chnlbind_sync_time=None,):
    self.mchnt_id = mchnt_id
    self.chnlcode = chnlcode
    self.userids = userids
    self.batch_id = batch_id
    self.src = src
    self.chnlbind_sync_time = chnlbind_sync_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.chnlcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.userids = []
          (_etype262, _size259) = iprot.readListBegin()
          for _i263 in xrange(_size259):
            _elem264 = iprot.readI64();
            self.userids.append(_elem264)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.batch_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.chnlbind_sync_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LinkArg')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.chnlcode is not None:
      oprot.writeFieldBegin('chnlcode', TType.I32, 2)
      oprot.writeI32(self.chnlcode)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter265 in self.userids:
        oprot.writeI64(iter265)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.batch_id is not None:
      oprot.writeFieldBegin('batch_id', TType.STRING, 4)
      oprot.writeString(self.batch_id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 5)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.chnlbind_sync_time is not None:
      oprot.writeFieldBegin('chnlbind_sync_time', TType.STRING, 6)
      oprot.writeString(self.chnlbind_sync_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.chnlcode is None:
      raise TProtocol.TProtocolException(message='Required field chnlcode is unset!')
    if self.userids is None:
      raise TProtocol.TProtocolException(message='Required field userids is unset!')
    if self.batch_id is None:
      raise TProtocol.TProtocolException(message='Required field batch_id is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
