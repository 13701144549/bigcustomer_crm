#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import weifutong
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string ping()'
  print '  StoreNewResult update_mchnt_fuiou(UpdateFY fy)'
  print '  void update_mchnt_huiyi_normal(UpdateReq ur)'
  print '  WeixinRegisterQueryResp store_new_weixin_register_query(WeixinRegisterQuery snr)'
  print '  StoreNewResult sign_contract_weixin(WeixinSignContractArg arg)'
  print '   weixin_config_query(WeixinConfigQuery arg)'
  print '  HelibaoStoreNewQueryResp store_new_query_helibao(HelibaoStoreNewQueryArg arg)'
  print '  HelibaoAgreementQueryResp agreement_query_helibao(HelibaoAgreementQueryArg arg)'
  print '  StoreNewResult store_new_huiyi(StoreNewHuiyi arg)'
  print '  HuiyiQueryResp store_query_huiyi(string mchnt_id)'
  print '  void update_mchnt_huiyi(HuiyiUpdateArg hua)'
  print '   cancel_huiyi( mchnt_ids)'
  print '  StoreNewResult store_new_daze(StoreNewDZ wc)'
  print '  StoreNewResult store_new_dazepoint(StoreNewReq snr)'
  print '  void update_mchnt_dazepoint(UpdateReq ur)'
  print '  StoreNewResult store_new_yeepay(StoreNewReq snr)'
  print '  void update_mchnt_yeepay(UpdateReq ur)'
  print '  StoreNewResult store_new_huitong(StoreNewReq snr)'
  print '  void update_mchnt_huitong(UpdateReq ur)'
  print '  string data_penetrate(DataPenetrateArg sda)'
  print '   query_mchntid_by_uids( uids, CHNLCODE chnlcode)'
  print '   addmchnt_query(AddMchntQueryArg q)'
  print '   addmchnt_get( l)'
  print '   subscribeappid_query(SubscribeQueryArg q)'
  print '   subscribeappid_get( l)'
  print '  StoreNewResult register_mchnt(StoreNewReq snr)'
  print '  void append_wechatconf(AppendWechatConfArg arg)'
  print '  void update_mchnt(UpdateReq ur)'
  print '  UpdateMchntResp update_mchnt_query(UpdateQueryReq req)'
  print '  string query_mchnt(StoreQueryReq req)'
  print '  string upphoto(UpPicArg upa)'
  print '  TradeRet OpenService(ServiceArg sa)'
  print '  TradeRet OpenServiceQuery(ServiceArg sa)'
  print '  void SendSms(SendSmsArg sms)'
  print '   chnlbind_sync_query(ChnlbindSyncQueryArg q)'
  print '   chnlbind_sync_get( ids)'
  print '   chnlbind_sync_update( req, i64 admin)'
  print '  void wechatconf_update(WechatConfUpdateArg arg)'
  print '  void register_mchnt_async( l)'
  print '  void link_mchnt_local(LinkArg la)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = weifutong.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'update_mchnt_fuiou':
  if len(args) != 1:
    print 'update_mchnt_fuiou requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_mchnt_fuiou(eval(args[0]),))

elif cmd == 'update_mchnt_huiyi_normal':
  if len(args) != 1:
    print 'update_mchnt_huiyi_normal requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_mchnt_huiyi_normal(eval(args[0]),))

elif cmd == 'store_new_weixin_register_query':
  if len(args) != 1:
    print 'store_new_weixin_register_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_new_weixin_register_query(eval(args[0]),))

elif cmd == 'sign_contract_weixin':
  if len(args) != 1:
    print 'sign_contract_weixin requires 1 args'
    sys.exit(1)
  pp.pprint(client.sign_contract_weixin(eval(args[0]),))

elif cmd == 'weixin_config_query':
  if len(args) != 1:
    print 'weixin_config_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_config_query(eval(args[0]),))

elif cmd == 'store_new_query_helibao':
  if len(args) != 1:
    print 'store_new_query_helibao requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_new_query_helibao(eval(args[0]),))

elif cmd == 'agreement_query_helibao':
  if len(args) != 1:
    print 'agreement_query_helibao requires 1 args'
    sys.exit(1)
  pp.pprint(client.agreement_query_helibao(eval(args[0]),))

elif cmd == 'store_new_huiyi':
  if len(args) != 1:
    print 'store_new_huiyi requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_new_huiyi(eval(args[0]),))

elif cmd == 'store_query_huiyi':
  if len(args) != 1:
    print 'store_query_huiyi requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_query_huiyi(args[0],))

elif cmd == 'update_mchnt_huiyi':
  if len(args) != 1:
    print 'update_mchnt_huiyi requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_mchnt_huiyi(eval(args[0]),))

elif cmd == 'cancel_huiyi':
  if len(args) != 1:
    print 'cancel_huiyi requires 1 args'
    sys.exit(1)
  pp.pprint(client.cancel_huiyi(eval(args[0]),))

elif cmd == 'store_new_daze':
  if len(args) != 1:
    print 'store_new_daze requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_new_daze(eval(args[0]),))

elif cmd == 'store_new_dazepoint':
  if len(args) != 1:
    print 'store_new_dazepoint requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_new_dazepoint(eval(args[0]),))

elif cmd == 'update_mchnt_dazepoint':
  if len(args) != 1:
    print 'update_mchnt_dazepoint requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_mchnt_dazepoint(eval(args[0]),))

elif cmd == 'store_new_yeepay':
  if len(args) != 1:
    print 'store_new_yeepay requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_new_yeepay(eval(args[0]),))

elif cmd == 'update_mchnt_yeepay':
  if len(args) != 1:
    print 'update_mchnt_yeepay requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_mchnt_yeepay(eval(args[0]),))

elif cmd == 'store_new_huitong':
  if len(args) != 1:
    print 'store_new_huitong requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_new_huitong(eval(args[0]),))

elif cmd == 'update_mchnt_huitong':
  if len(args) != 1:
    print 'update_mchnt_huitong requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_mchnt_huitong(eval(args[0]),))

elif cmd == 'data_penetrate':
  if len(args) != 1:
    print 'data_penetrate requires 1 args'
    sys.exit(1)
  pp.pprint(client.data_penetrate(eval(args[0]),))

elif cmd == 'query_mchntid_by_uids':
  if len(args) != 2:
    print 'query_mchntid_by_uids requires 2 args'
    sys.exit(1)
  pp.pprint(client.query_mchntid_by_uids(eval(args[0]),eval(args[1]),))

elif cmd == 'addmchnt_query':
  if len(args) != 1:
    print 'addmchnt_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.addmchnt_query(eval(args[0]),))

elif cmd == 'addmchnt_get':
  if len(args) != 1:
    print 'addmchnt_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.addmchnt_get(eval(args[0]),))

elif cmd == 'subscribeappid_query':
  if len(args) != 1:
    print 'subscribeappid_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.subscribeappid_query(eval(args[0]),))

elif cmd == 'subscribeappid_get':
  if len(args) != 1:
    print 'subscribeappid_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.subscribeappid_get(eval(args[0]),))

elif cmd == 'register_mchnt':
  if len(args) != 1:
    print 'register_mchnt requires 1 args'
    sys.exit(1)
  pp.pprint(client.register_mchnt(eval(args[0]),))

elif cmd == 'append_wechatconf':
  if len(args) != 1:
    print 'append_wechatconf requires 1 args'
    sys.exit(1)
  pp.pprint(client.append_wechatconf(eval(args[0]),))

elif cmd == 'update_mchnt':
  if len(args) != 1:
    print 'update_mchnt requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_mchnt(eval(args[0]),))

elif cmd == 'update_mchnt_query':
  if len(args) != 1:
    print 'update_mchnt_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_mchnt_query(eval(args[0]),))

elif cmd == 'query_mchnt':
  if len(args) != 1:
    print 'query_mchnt requires 1 args'
    sys.exit(1)
  pp.pprint(client.query_mchnt(eval(args[0]),))

elif cmd == 'upphoto':
  if len(args) != 1:
    print 'upphoto requires 1 args'
    sys.exit(1)
  pp.pprint(client.upphoto(eval(args[0]),))

elif cmd == 'OpenService':
  if len(args) != 1:
    print 'OpenService requires 1 args'
    sys.exit(1)
  pp.pprint(client.OpenService(eval(args[0]),))

elif cmd == 'OpenServiceQuery':
  if len(args) != 1:
    print 'OpenServiceQuery requires 1 args'
    sys.exit(1)
  pp.pprint(client.OpenServiceQuery(eval(args[0]),))

elif cmd == 'SendSms':
  if len(args) != 1:
    print 'SendSms requires 1 args'
    sys.exit(1)
  pp.pprint(client.SendSms(eval(args[0]),))

elif cmd == 'chnlbind_sync_query':
  if len(args) != 1:
    print 'chnlbind_sync_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.chnlbind_sync_query(eval(args[0]),))

elif cmd == 'chnlbind_sync_get':
  if len(args) != 1:
    print 'chnlbind_sync_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.chnlbind_sync_get(eval(args[0]),))

elif cmd == 'chnlbind_sync_update':
  if len(args) != 2:
    print 'chnlbind_sync_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.chnlbind_sync_update(eval(args[0]),eval(args[1]),))

elif cmd == 'wechatconf_update':
  if len(args) != 1:
    print 'wechatconf_update requires 1 args'
    sys.exit(1)
  pp.pprint(client.wechatconf_update(eval(args[0]),))

elif cmd == 'register_mchnt_async':
  if len(args) != 1:
    print 'register_mchnt_async requires 1 args'
    sys.exit(1)
  pp.pprint(client.register_mchnt_async(eval(args[0]),))

elif cmd == 'link_mchnt_local':
  if len(args) != 1:
    print 'link_mchnt_local requires 1 args'
    sys.exit(1)
  pp.pprint(client.link_mchnt_local(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
