#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class GoodsAttr:
  """
  Attributes:
   - id
   - name
   - attrs
   - available
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    None, # 3
    (4, TType.LIST, 'attrs', (TType.STRING,None), None, ), # 4
    (5, TType.I32, 'available', None, None, ), # 5
  )

  def __init__(self, id=None, name=None, attrs=None, available=None,):
    self.id = id
    self.name = name
    self.attrs = attrs
    self.available = available

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.attrs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.attrs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.available = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GoodsAttr')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.attrs is not None:
      oprot.writeFieldBegin('attrs', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.attrs))
      for iter6 in self.attrs:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I32, 5)
      oprot.writeI32(self.available)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.attrs)
    value = (value * 31) ^ hash(self.available)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GoodsSpec:
  """
  Attributes:
   - id
   - spec
   - txamt
   - origamt
   - available
   - total
   - bought
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'spec', None, None, ), # 2
    (3, TType.I64, 'txamt', None, None, ), # 3
    (4, TType.I64, 'origamt', None, None, ), # 4
    (5, TType.I32, 'available', None, None, ), # 5
    (6, TType.I64, 'total', None, None, ), # 6
    (7, TType.I64, 'bought', None, None, ), # 7
  )

  def __init__(self, id=None, spec=None, txamt=None, origamt=None, available=None, total=None, bought=None,):
    self.id = id
    self.spec = spec
    self.txamt = txamt
    self.origamt = origamt
    self.available = available
    self.total = total
    self.bought = bought

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spec = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.txamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.origamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.available = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.total = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.bought = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GoodsSpec')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.spec is not None:
      oprot.writeFieldBegin('spec', TType.STRING, 2)
      oprot.writeString(self.spec)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I64, 3)
      oprot.writeI64(self.txamt)
      oprot.writeFieldEnd()
    if self.origamt is not None:
      oprot.writeFieldBegin('origamt', TType.I64, 4)
      oprot.writeI64(self.origamt)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I32, 5)
      oprot.writeI32(self.available)
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I64, 6)
      oprot.writeI64(self.total)
      oprot.writeFieldEnd()
    if self.bought is not None:
      oprot.writeFieldBegin('bought', TType.I64, 7)
      oprot.writeI64(self.bought)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.spec)
    value = (value * 31) ^ hash(self.txamt)
    value = (value * 31) ^ hash(self.origamt)
    value = (value * 31) ^ hash(self.available)
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.bought)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Goods:
  """
  Attributes:
   - id
   - userid
   - name
   - cate_id
   - type
   - txamt
   - origamt
   - weight
   - descr
   - info
   - txcurrcd
   - imgs
   - available
   - attrs
   - specs
   - total
   - bought
   - info_imgs
   - spec
   - cut_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I64, 'cate_id', None, None, ), # 4
    (5, TType.I32, 'type', None, None, ), # 5
    (6, TType.I64, 'txamt', None, None, ), # 6
    (7, TType.I64, 'origamt', None, None, ), # 7
    (8, TType.I32, 'weight', None, None, ), # 8
    (9, TType.STRING, 'descr', None, None, ), # 9
    (10, TType.STRING, 'info', None, None, ), # 10
    (11, TType.I32, 'txcurrcd', None, None, ), # 11
    (12, TType.LIST, 'imgs', (TType.STRING,None), None, ), # 12
    (13, TType.I32, 'available', None, None, ), # 13
    (14, TType.LIST, 'attrs', (TType.STRUCT,(GoodsAttr, GoodsAttr.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'specs', (TType.STRUCT,(GoodsSpec, GoodsSpec.thrift_spec)), None, ), # 15
    (16, TType.I64, 'total', None, None, ), # 16
    (17, TType.I64, 'bought', None, None, ), # 17
    (18, TType.LIST, 'info_imgs', (TType.STRING,None), None, ), # 18
    (19, TType.STRING, 'spec', None, None, ), # 19
    (20, TType.STRING, 'cut_data', None, None, ), # 20
  )

  def __init__(self, id=None, userid=None, name=None, cate_id=None, type=None, txamt=None, origamt=None, weight=None, descr=None, info=None, txcurrcd=None, imgs=None, available=None, attrs=None, specs=None, total=None, bought=None, info_imgs=None, spec=None, cut_data=None,):
    self.id = id
    self.userid = userid
    self.name = name
    self.cate_id = cate_id
    self.type = type
    self.txamt = txamt
    self.origamt = origamt
    self.weight = weight
    self.descr = descr
    self.info = info
    self.txcurrcd = txcurrcd
    self.imgs = imgs
    self.available = available
    self.attrs = attrs
    self.specs = specs
    self.total = total
    self.bought = bought
    self.info_imgs = info_imgs
    self.spec = spec
    self.cut_data = cut_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.cate_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.txamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.origamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.weight = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.descr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.info = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.txcurrcd = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.imgs = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString()
            self.imgs.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.available = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.attrs = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = GoodsAttr()
            _elem18.read(iprot)
            self.attrs.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.specs = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = GoodsSpec()
            _elem24.read(iprot)
            self.specs.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.total = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.bought = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.info_imgs = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = iprot.readString()
            self.info_imgs.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.spec = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.cut_data = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Goods')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.cate_id is not None:
      oprot.writeFieldBegin('cate_id', TType.I64, 4)
      oprot.writeI64(self.cate_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I64, 6)
      oprot.writeI64(self.txamt)
      oprot.writeFieldEnd()
    if self.origamt is not None:
      oprot.writeFieldBegin('origamt', TType.I64, 7)
      oprot.writeI64(self.origamt)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 8)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.descr is not None:
      oprot.writeFieldBegin('descr', TType.STRING, 9)
      oprot.writeString(self.descr)
      oprot.writeFieldEnd()
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.STRING, 10)
      oprot.writeString(self.info)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.I32, 11)
      oprot.writeI32(self.txcurrcd)
      oprot.writeFieldEnd()
    if self.imgs is not None:
      oprot.writeFieldBegin('imgs', TType.LIST, 12)
      oprot.writeListBegin(TType.STRING, len(self.imgs))
      for iter31 in self.imgs:
        oprot.writeString(iter31)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.I32, 13)
      oprot.writeI32(self.available)
      oprot.writeFieldEnd()
    if self.attrs is not None:
      oprot.writeFieldBegin('attrs', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.attrs))
      for iter32 in self.attrs:
        iter32.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.specs is not None:
      oprot.writeFieldBegin('specs', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.specs))
      for iter33 in self.specs:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I64, 16)
      oprot.writeI64(self.total)
      oprot.writeFieldEnd()
    if self.bought is not None:
      oprot.writeFieldBegin('bought', TType.I64, 17)
      oprot.writeI64(self.bought)
      oprot.writeFieldEnd()
    if self.info_imgs is not None:
      oprot.writeFieldBegin('info_imgs', TType.LIST, 18)
      oprot.writeListBegin(TType.STRING, len(self.info_imgs))
      for iter34 in self.info_imgs:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.spec is not None:
      oprot.writeFieldBegin('spec', TType.STRING, 19)
      oprot.writeString(self.spec)
      oprot.writeFieldEnd()
    if self.cut_data is not None:
      oprot.writeFieldBegin('cut_data', TType.STRING, 20)
      oprot.writeString(self.cut_data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.cate_id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.txamt)
    value = (value * 31) ^ hash(self.origamt)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.descr)
    value = (value * 31) ^ hash(self.info)
    value = (value * 31) ^ hash(self.txcurrcd)
    value = (value * 31) ^ hash(self.imgs)
    value = (value * 31) ^ hash(self.available)
    value = (value * 31) ^ hash(self.attrs)
    value = (value * 31) ^ hash(self.specs)
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.bought)
    value = (value * 31) ^ hash(self.info_imgs)
    value = (value * 31) ^ hash(self.spec)
    value = (value * 31) ^ hash(self.cut_data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Promo:
  """
  Attributes:
   - id
   - userid
   - unionid
   - status
   - start_time
   - expire_time
   - create_time
   - promo_state
   - type
   - stick
   - buy_limit
   - use_userid
   - redeem_stime
   - redeem_etime
   - ext
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'unionid', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.STRING, 'start_time', None, None, ), # 5
    (6, TType.STRING, 'expire_time', None, None, ), # 6
    (7, TType.STRING, 'create_time', None, None, ), # 7
    (8, TType.I32, 'promo_state', None, None, ), # 8
    (9, TType.I32, 'type', None, None, ), # 9
    (10, TType.I32, 'stick', None, None, ), # 10
    (11, TType.I32, 'buy_limit', None, None, ), # 11
    (12, TType.I64, 'use_userid', None, None, ), # 12
    (13, TType.STRING, 'redeem_stime', None, None, ), # 13
    (14, TType.STRING, 'redeem_etime', None, None, ), # 14
    (15, TType.STRING, 'ext', None, None, ), # 15
  )

  def __init__(self, id=None, userid=None, unionid=None, status=None, start_time=None, expire_time=None, create_time=None, promo_state=None, type=None, stick=None, buy_limit=None, use_userid=None, redeem_stime=None, redeem_etime=None, ext=None,):
    self.id = id
    self.userid = userid
    self.unionid = unionid
    self.status = status
    self.start_time = start_time
    self.expire_time = expire_time
    self.create_time = create_time
    self.promo_state = promo_state
    self.type = type
    self.stick = stick
    self.buy_limit = buy_limit
    self.use_userid = use_userid
    self.redeem_stime = redeem_stime
    self.redeem_etime = redeem_etime
    self.ext = ext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.unionid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.start_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.expire_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.promo_state = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.stick = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.buy_limit = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.use_userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.redeem_stime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.redeem_etime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.ext = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Promo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.unionid is not None:
      oprot.writeFieldBegin('unionid', TType.I64, 3)
      oprot.writeI64(self.unionid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 5)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.STRING, 6)
      oprot.writeString(self.expire_time)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 7)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.promo_state is not None:
      oprot.writeFieldBegin('promo_state', TType.I32, 8)
      oprot.writeI32(self.promo_state)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 9)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.stick is not None:
      oprot.writeFieldBegin('stick', TType.I32, 10)
      oprot.writeI32(self.stick)
      oprot.writeFieldEnd()
    if self.buy_limit is not None:
      oprot.writeFieldBegin('buy_limit', TType.I32, 11)
      oprot.writeI32(self.buy_limit)
      oprot.writeFieldEnd()
    if self.use_userid is not None:
      oprot.writeFieldBegin('use_userid', TType.I64, 12)
      oprot.writeI64(self.use_userid)
      oprot.writeFieldEnd()
    if self.redeem_stime is not None:
      oprot.writeFieldBegin('redeem_stime', TType.STRING, 13)
      oprot.writeString(self.redeem_stime)
      oprot.writeFieldEnd()
    if self.redeem_etime is not None:
      oprot.writeFieldBegin('redeem_etime', TType.STRING, 14)
      oprot.writeString(self.redeem_etime)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRING, 15)
      oprot.writeString(self.ext)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.unionid)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.expire_time)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.promo_state)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.stick)
    value = (value * 31) ^ hash(self.buy_limit)
    value = (value * 31) ^ hash(self.use_userid)
    value = (value * 31) ^ hash(self.redeem_stime)
    value = (value * 31) ^ hash(self.redeem_etime)
    value = (value * 31) ^ hash(self.ext)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Addr:
  """
  Attributes:
   - id
   - customer_id
   - location
   - detail_addr
   - mobile
   - contact_name
   - longitude
   - latitude
   - weight
   - is_default
   - status
   - adcode
   - city_code
   - create_time
   - update_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'customer_id', None, None, ), # 2
    (3, TType.STRING, 'location', None, None, ), # 3
    (4, TType.STRING, 'detail_addr', None, None, ), # 4
    (5, TType.STRING, 'mobile', None, None, ), # 5
    (6, TType.STRING, 'contact_name', None, None, ), # 6
    (7, TType.DOUBLE, 'longitude', None, None, ), # 7
    (8, TType.DOUBLE, 'latitude', None, None, ), # 8
    (9, TType.I64, 'weight', None, None, ), # 9
    (10, TType.I32, 'is_default', None, None, ), # 10
    (11, TType.I32, 'status', None, None, ), # 11
    (12, TType.I32, 'adcode', None, None, ), # 12
    (13, TType.STRING, 'city_code', None, None, ), # 13
    (14, TType.STRING, 'create_time', None, None, ), # 14
    (15, TType.STRING, 'update_time', None, None, ), # 15
  )

  def __init__(self, id=None, customer_id=None, location=None, detail_addr=None, mobile=None, contact_name=None, longitude=None, latitude=None, weight=None, is_default=None, status=None, adcode=None, city_code=None, create_time=None, update_time=None,):
    self.id = id
    self.customer_id = customer_id
    self.location = location
    self.detail_addr = detail_addr
    self.mobile = mobile
    self.contact_name = contact_name
    self.longitude = longitude
    self.latitude = latitude
    self.weight = weight
    self.is_default = is_default
    self.status = status
    self.adcode = adcode
    self.city_code = city_code
    self.create_time = create_time
    self.update_time = update_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.customer_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.location = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.detail_addr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.contact_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.weight = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.is_default = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.adcode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.city_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.update_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Addr')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.I64, 2)
      oprot.writeI64(self.customer_id)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 3)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.detail_addr is not None:
      oprot.writeFieldBegin('detail_addr', TType.STRING, 4)
      oprot.writeString(self.detail_addr)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 5)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.contact_name is not None:
      oprot.writeFieldBegin('contact_name', TType.STRING, 6)
      oprot.writeString(self.contact_name)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 7)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 8)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I64, 9)
      oprot.writeI64(self.weight)
      oprot.writeFieldEnd()
    if self.is_default is not None:
      oprot.writeFieldBegin('is_default', TType.I32, 10)
      oprot.writeI32(self.is_default)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 11)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.adcode is not None:
      oprot.writeFieldBegin('adcode', TType.I32, 12)
      oprot.writeI32(self.adcode)
      oprot.writeFieldEnd()
    if self.city_code is not None:
      oprot.writeFieldBegin('city_code', TType.STRING, 13)
      oprot.writeString(self.city_code)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 14)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.STRING, 15)
      oprot.writeString(self.update_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.customer_id)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.detail_addr)
    value = (value * 31) ^ hash(self.mobile)
    value = (value * 31) ^ hash(self.contact_name)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.is_default)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.adcode)
    value = (value * 31) ^ hash(self.city_code)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.update_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MTException(TException):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MTException')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
