#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ServerError(Exception):
  """
  Attributes:
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, code=None, msg=None,):
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerError')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rule:
  """
  Attributes:
   - userid
   - withhold_type_id
   - title
   - withhold_rule_id
   - fact_amt
   - should_amt
   - withhold_month
   - start_time
   - end_time
   - enable
   - finish
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.I32, 'withhold_type_id', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.I64, 'withhold_rule_id', None, None, ), # 4
    (5, TType.I32, 'fact_amt', None, None, ), # 5
    (6, TType.I32, 'should_amt', None, None, ), # 6
    (7, TType.STRING, 'withhold_month', None, None, ), # 7
    (8, TType.STRING, 'start_time', None, None, ), # 8
    (9, TType.STRING, 'end_time', None, None, ), # 9
    (10, TType.I32, 'enable', None, None, ), # 10
    (11, TType.I32, 'finish', None, None, ), # 11
  )

  def __init__(self, userid=None, withhold_type_id=None, title=None, withhold_rule_id=None, fact_amt=None, should_amt=None, withhold_month=None, start_time=None, end_time=None, enable=None, finish=None,):
    self.userid = userid
    self.withhold_type_id = withhold_type_id
    self.title = title
    self.withhold_rule_id = withhold_rule_id
    self.fact_amt = fact_amt
    self.should_amt = should_amt
    self.withhold_month = withhold_month
    self.start_time = start_time
    self.end_time = end_time
    self.enable = enable
    self.finish = finish

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.withhold_type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.withhold_rule_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.fact_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.should_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.withhold_month = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.enable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.finish = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rule')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.withhold_type_id is not None:
      oprot.writeFieldBegin('withhold_type_id', TType.I32, 2)
      oprot.writeI32(self.withhold_type_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.withhold_rule_id is not None:
      oprot.writeFieldBegin('withhold_rule_id', TType.I64, 4)
      oprot.writeI64(self.withhold_rule_id)
      oprot.writeFieldEnd()
    if self.fact_amt is not None:
      oprot.writeFieldBegin('fact_amt', TType.I32, 5)
      oprot.writeI32(self.fact_amt)
      oprot.writeFieldEnd()
    if self.should_amt is not None:
      oprot.writeFieldBegin('should_amt', TType.I32, 6)
      oprot.writeI32(self.should_amt)
      oprot.writeFieldEnd()
    if self.withhold_month is not None:
      oprot.writeFieldBegin('withhold_month', TType.STRING, 7)
      oprot.writeString(self.withhold_month)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 8)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 9)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I32, 10)
      oprot.writeI32(self.enable)
      oprot.writeFieldEnd()
    if self.finish is not None:
      oprot.writeFieldBegin('finish', TType.I32, 11)
      oprot.writeI32(self.finish)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
