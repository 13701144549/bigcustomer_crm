#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class CardChangeType:
  MIS = 1
  WEB = 2
  CHANNEL = 3
  MIAOMIAO = 4
  PHONE = 5

  _VALUES_TO_NAMES = {
    1: "MIS",
    2: "WEB",
    3: "CHANNEL",
    4: "MIAOMIAO",
    5: "PHONE",
  }

  _NAMES_TO_VALUES = {
    "MIS": 1,
    "WEB": 2,
    "CHANNEL": 3,
    "MIAOMIAO": 4,
    "PHONE": 5,
  }

class CardChangeStatus:
  WAITING = 1
  AUDITING = 2
  PASS = 3
  CLOSE = 4

  _VALUES_TO_NAMES = {
    1: "WAITING",
    2: "AUDITING",
    3: "PASS",
    4: "CLOSE",
  }

  _NAMES_TO_VALUES = {
    "WAITING": 1,
    "AUDITING": 2,
    "PASS": 3,
    "CLOSE": 4,
  }


class ServerError(Exception):
  """
  Attributes:
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, code=None, msg=None,):
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerError')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Photo:
  """
  Attributes:
   - type
   - filename
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.STRING, 'filename', None, None, ), # 2
  )

  def __init__(self, type=None, filename=None,):
    self.type = type
    self.filename = filename

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.filename = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Photo')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.filename is not None:
      oprot.writeFieldBegin('filename', TType.STRING, 2)
      oprot.writeString(self.filename)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Account:
  """
  Attributes:
   - id
   - userid
   - amt
   - frozen_amt
   - account_type_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'amt', None, None, ), # 3
    (4, TType.I64, 'frozen_amt', None, None, ), # 4
    None, # 5
    (6, TType.I64, 'account_type_id', None, None, ), # 6
  )

  def __init__(self, id=None, userid=None, amt=None, frozen_amt=None, account_type_id=None,):
    self.id = id
    self.userid = userid
    self.amt = amt
    self.frozen_amt = frozen_amt
    self.account_type_id = account_type_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.frozen_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.account_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Account')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 3)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.frozen_amt is not None:
      oprot.writeFieldBegin('frozen_amt', TType.I64, 4)
      oprot.writeI64(self.frozen_amt)
      oprot.writeFieldEnd()
    if self.account_type_id is not None:
      oprot.writeFieldBegin('account_type_id', TType.I64, 6)
      oprot.writeI64(self.account_type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountQueryArgs:
  """
  Attributes:
   - amt
   - pos
   - count
   - userids
   - account_type_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'amt', None, None, ), # 1
    (2, TType.I32, 'pos', None, 0, ), # 2
    (3, TType.I32, 'count', None, 20, ), # 3
    (4, TType.LIST, 'userids', (TType.I64,None), [
    ], ), # 4
    (5, TType.LIST, 'account_type_ids', (TType.I64,None), [
    ], ), # 5
  )

  def __init__(self, amt=None, pos=thrift_spec[2][4], count=thrift_spec[3][4], userids=thrift_spec[4][4], account_type_ids=thrift_spec[5][4],):
    self.amt = amt
    self.pos = pos
    self.count = count
    if userids is self.thrift_spec[4][4]:
      userids = [
    ]
    self.userids = userids
    if account_type_ids is self.thrift_spec[5][4]:
      account_type_ids = [
    ]
    self.account_type_ids = account_type_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.userids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.account_type_ids = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.account_type_ids.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountQueryArgs')
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 1)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 2)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter12 in self.userids:
        oprot.writeI64(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.account_type_ids is not None:
      oprot.writeFieldBegin('account_type_ids', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.account_type_ids))
      for iter13 in self.account_type_ids:
        oprot.writeI64(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecordArgs:
  """
  Attributes:
   - userid
   - action_types
   - start_time
   - end_time
   - pos
   - count
   - biz_sn
   - orig_biz_sn
   - account_id
   - month
   - account_type_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.LIST, 'action_types', (TType.I32,None), [
    ], ), # 2
    (3, TType.STRING, 'start_time', None, None, ), # 3
    (4, TType.STRING, 'end_time', None, None, ), # 4
    (5, TType.I32, 'pos', None, 0, ), # 5
    (6, TType.I32, 'count', None, 20, ), # 6
    (7, TType.STRING, 'biz_sn', None, None, ), # 7
    (8, TType.STRING, 'orig_biz_sn', None, "", ), # 8
    (9, TType.I64, 'account_id', None, None, ), # 9
    (10, TType.STRING, 'month', None, "", ), # 10
    (11, TType.LIST, 'account_type_ids', (TType.I64,None), [
    ], ), # 11
  )

  def __init__(self, userid=None, action_types=thrift_spec[2][4], start_time=None, end_time=None, pos=thrift_spec[5][4], count=thrift_spec[6][4], biz_sn=None, orig_biz_sn=thrift_spec[8][4], account_id=None, month=thrift_spec[10][4], account_type_ids=thrift_spec[11][4],):
    self.userid = userid
    if action_types is self.thrift_spec[2][4]:
      action_types = [
    ]
    self.action_types = action_types
    self.start_time = start_time
    self.end_time = end_time
    self.pos = pos
    self.count = count
    self.biz_sn = biz_sn
    self.orig_biz_sn = orig_biz_sn
    self.account_id = account_id
    self.month = month
    if account_type_ids is self.thrift_spec[11][4]:
      account_type_ids = [
    ]
    self.account_type_ids = account_type_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.action_types = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.action_types.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.account_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.month = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.account_type_ids = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readI64();
            self.account_type_ids.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecordArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.action_types is not None:
      oprot.writeFieldBegin('action_types', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.action_types))
      for iter26 in self.action_types:
        oprot.writeI32(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 3)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 4)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 5)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 6)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 7)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 8)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I64, 9)
      oprot.writeI64(self.account_id)
      oprot.writeFieldEnd()
    if self.month is not None:
      oprot.writeFieldBegin('month', TType.STRING, 10)
      oprot.writeString(self.month)
      oprot.writeFieldEnd()
    if self.account_type_ids is not None:
      oprot.writeFieldBegin('account_type_ids', TType.LIST, 11)
      oprot.writeListBegin(TType.I64, len(self.account_type_ids))
      for iter27 in self.account_type_ids:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Record:
  """
  Attributes:
   - id
   - userid
   - account_id
   - account_type_id
   - action_type
   - biz_sn
   - orig_biz_sn
   - amt
   - refund_amt
   - before_acct_amt
   - biz_time
   - title
   - detail
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'account_id', None, None, ), # 3
    (4, TType.I64, 'account_type_id', None, None, ), # 4
    (5, TType.I32, 'action_type', None, None, ), # 5
    (6, TType.STRING, 'biz_sn', None, None, ), # 6
    (7, TType.STRING, 'orig_biz_sn', None, None, ), # 7
    (8, TType.I64, 'amt', None, None, ), # 8
    (9, TType.I64, 'refund_amt', None, None, ), # 9
    (10, TType.I64, 'before_acct_amt', None, None, ), # 10
    (11, TType.STRING, 'biz_time', None, None, ), # 11
    (12, TType.STRING, 'title', None, None, ), # 12
    (13, TType.STRING, 'detail', None, None, ), # 13
    (14, TType.STRING, 'memo', None, None, ), # 14
  )

  def __init__(self, id=None, userid=None, account_id=None, account_type_id=None, action_type=None, biz_sn=None, orig_biz_sn=None, amt=None, refund_amt=None, before_acct_amt=None, biz_time=None, title=None, detail=None, memo=None,):
    self.id = id
    self.userid = userid
    self.account_id = account_id
    self.account_type_id = account_type_id
    self.action_type = action_type
    self.biz_sn = biz_sn
    self.orig_biz_sn = orig_biz_sn
    self.amt = amt
    self.refund_amt = refund_amt
    self.before_acct_amt = before_acct_amt
    self.biz_time = biz_time
    self.title = title
    self.detail = detail
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.account_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.account_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.action_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.refund_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.before_acct_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.biz_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.detail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Record')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I64, 3)
      oprot.writeI64(self.account_id)
      oprot.writeFieldEnd()
    if self.account_type_id is not None:
      oprot.writeFieldBegin('account_type_id', TType.I64, 4)
      oprot.writeI64(self.account_type_id)
      oprot.writeFieldEnd()
    if self.action_type is not None:
      oprot.writeFieldBegin('action_type', TType.I32, 5)
      oprot.writeI32(self.action_type)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 6)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 7)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 8)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.refund_amt is not None:
      oprot.writeFieldBegin('refund_amt', TType.I64, 9)
      oprot.writeI64(self.refund_amt)
      oprot.writeFieldEnd()
    if self.before_acct_amt is not None:
      oprot.writeFieldBegin('before_acct_amt', TType.I64, 10)
      oprot.writeI64(self.before_acct_amt)
      oprot.writeFieldEnd()
    if self.biz_time is not None:
      oprot.writeFieldBegin('biz_time', TType.STRING, 11)
      oprot.writeString(self.biz_time)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 12)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.detail is not None:
      oprot.writeFieldBegin('detail', TType.STRING, 13)
      oprot.writeString(self.detail)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 14)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Trade:
  """
  Attributes:
   - userid
   - biz_sn
   - orig_biz_sn
   - amt
   - currency
   - trade_time
   - pay_time
   - trade_type
   - card_type
   - memo
   - chnl_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'biz_sn', None, None, ), # 2
    (3, TType.STRING, 'orig_biz_sn', None, None, ), # 3
    (4, TType.I64, 'amt', None, None, ), # 4
    (5, TType.STRING, 'currency', None, "156", ), # 5
    (6, TType.STRING, 'trade_time', None, None, ), # 6
    (7, TType.STRING, 'pay_time', None, None, ), # 7
    (8, TType.STRING, 'trade_type', None, None, ), # 8
    (9, TType.I16, 'card_type', None, None, ), # 9
    (10, TType.STRING, 'memo', None, None, ), # 10
    (11, TType.I32, 'chnl_id', None, None, ), # 11
  )

  def __init__(self, userid=None, biz_sn=None, orig_biz_sn=None, amt=None, currency=thrift_spec[5][4], trade_time=None, pay_time=None, trade_type=None, card_type=None, memo=None, chnl_id=None,):
    self.userid = userid
    self.biz_sn = biz_sn
    self.orig_biz_sn = orig_biz_sn
    self.amt = amt
    self.currency = currency
    self.trade_time = trade_time
    self.pay_time = pay_time
    self.trade_type = trade_type
    self.card_type = card_type
    self.memo = memo
    self.chnl_id = chnl_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.trade_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.pay_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.trade_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.chnl_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Trade')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 2)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 3)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 4)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 5)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.trade_time is not None:
      oprot.writeFieldBegin('trade_time', TType.STRING, 6)
      oprot.writeString(self.trade_time)
      oprot.writeFieldEnd()
    if self.pay_time is not None:
      oprot.writeFieldBegin('pay_time', TType.STRING, 7)
      oprot.writeString(self.pay_time)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.STRING, 8)
      oprot.writeString(self.trade_type)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 9)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 10)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.I32, 11)
      oprot.writeI32(self.chnl_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Transfer:
  """
  Attributes:
   - userid
   - biz_sn
   - orig_biz_sn
   - orig_biz_time
   - from_account_type_id
   - to_account_type_id
   - amt
   - memo
   - orig_action_type
   - biz_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'biz_sn', None, None, ), # 2
    (3, TType.STRING, 'orig_biz_sn', None, "", ), # 3
    (4, TType.STRING, 'orig_biz_time', None, "", ), # 4
    (5, TType.I64, 'from_account_type_id', None, None, ), # 5
    (6, TType.I64, 'to_account_type_id', None, None, ), # 6
    (7, TType.I64, 'amt', None, None, ), # 7
    (8, TType.STRING, 'memo', None, None, ), # 8
    (9, TType.I32, 'orig_action_type', None, None, ), # 9
    (10, TType.STRING, 'biz_time', None, None, ), # 10
  )

  def __init__(self, userid=None, biz_sn=None, orig_biz_sn=thrift_spec[3][4], orig_biz_time=thrift_spec[4][4], from_account_type_id=None, to_account_type_id=None, amt=None, memo=None, orig_action_type=None, biz_time=None,):
    self.userid = userid
    self.biz_sn = biz_sn
    self.orig_biz_sn = orig_biz_sn
    self.orig_biz_time = orig_biz_time
    self.from_account_type_id = from_account_type_id
    self.to_account_type_id = to_account_type_id
    self.amt = amt
    self.memo = memo
    self.orig_action_type = orig_action_type
    self.biz_time = biz_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.orig_biz_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.from_account_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.to_account_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.orig_action_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.biz_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Transfer')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 2)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 3)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.orig_biz_time is not None:
      oprot.writeFieldBegin('orig_biz_time', TType.STRING, 4)
      oprot.writeString(self.orig_biz_time)
      oprot.writeFieldEnd()
    if self.from_account_type_id is not None:
      oprot.writeFieldBegin('from_account_type_id', TType.I64, 5)
      oprot.writeI64(self.from_account_type_id)
      oprot.writeFieldEnd()
    if self.to_account_type_id is not None:
      oprot.writeFieldBegin('to_account_type_id', TType.I64, 6)
      oprot.writeI64(self.to_account_type_id)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 7)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 8)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.orig_action_type is not None:
      oprot.writeFieldBegin('orig_action_type', TType.I32, 9)
      oprot.writeI32(self.orig_action_type)
      oprot.writeFieldEnd()
    if self.biz_time is not None:
      oprot.writeFieldBegin('biz_time', TType.STRING, 10)
      oprot.writeString(self.biz_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Card:
  """
  Attributes:
   - userid
   - name
   - cardno
   - card_type
   - bank_name
   - bank_brch
   - bank_area
   - bank_city
   - bank_code
   - bank_type
   - bank_mobile
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'cardno', None, None, ), # 3
    (4, TType.I16, 'card_type', None, None, ), # 4
    (5, TType.STRING, 'bank_name', None, None, ), # 5
    (6, TType.STRING, 'bank_brch', None, None, ), # 6
    (7, TType.STRING, 'bank_area', None, None, ), # 7
    (8, TType.STRING, 'bank_city', None, None, ), # 8
    (9, TType.STRING, 'bank_code', None, None, ), # 9
    (10, TType.I16, 'bank_type', None, None, ), # 10
    (11, TType.STRING, 'bank_mobile', None, None, ), # 11
    (12, TType.STRING, 'memo', None, None, ), # 12
  )

  def __init__(self, userid=None, name=None, cardno=None, card_type=None, bank_name=None, bank_brch=None, bank_area=None, bank_city=None, bank_code=None, bank_type=None, bank_mobile=None, memo=None,):
    self.userid = userid
    self.name = name
    self.cardno = cardno
    self.card_type = card_type
    self.bank_name = bank_name
    self.bank_brch = bank_brch
    self.bank_area = bank_area
    self.bank_city = bank_city
    self.bank_code = bank_code
    self.bank_type = bank_type
    self.bank_mobile = bank_mobile
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cardno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bank_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bank_brch = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bank_area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bank_city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bank_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.bank_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.bank_mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Card')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.cardno is not None:
      oprot.writeFieldBegin('cardno', TType.STRING, 3)
      oprot.writeString(self.cardno)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 4)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.bank_name is not None:
      oprot.writeFieldBegin('bank_name', TType.STRING, 5)
      oprot.writeString(self.bank_name)
      oprot.writeFieldEnd()
    if self.bank_brch is not None:
      oprot.writeFieldBegin('bank_brch', TType.STRING, 6)
      oprot.writeString(self.bank_brch)
      oprot.writeFieldEnd()
    if self.bank_area is not None:
      oprot.writeFieldBegin('bank_area', TType.STRING, 7)
      oprot.writeString(self.bank_area)
      oprot.writeFieldEnd()
    if self.bank_city is not None:
      oprot.writeFieldBegin('bank_city', TType.STRING, 8)
      oprot.writeString(self.bank_city)
      oprot.writeFieldEnd()
    if self.bank_code is not None:
      oprot.writeFieldBegin('bank_code', TType.STRING, 9)
      oprot.writeString(self.bank_code)
      oprot.writeFieldEnd()
    if self.bank_type is not None:
      oprot.writeFieldBegin('bank_type', TType.I16, 10)
      oprot.writeI16(self.bank_type)
      oprot.writeFieldEnd()
    if self.bank_mobile is not None:
      oprot.writeFieldBegin('bank_mobile', TType.STRING, 11)
      oprot.writeString(self.bank_mobile)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 12)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardChangeArgs:
  """
  Attributes:
   - userid
   - card
   - photos
   - apply_type
   - apply_user
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRUCT, 'card', (Card, Card.thrift_spec), None, ), # 2
    (3, TType.LIST, 'photos', (TType.STRUCT,(Photo, Photo.thrift_spec)), None, ), # 3
    (4, TType.I32, 'apply_type', None, None, ), # 4
    (5, TType.I64, 'apply_user', None, None, ), # 5
  )

  def __init__(self, userid=None, card=None, photos=None, apply_type=None, apply_user=None,):
    self.userid = userid
    self.card = card
    self.photos = photos
    self.apply_type = apply_type
    self.apply_user = apply_user

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.card = Card()
          self.card.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.photos = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = Photo()
            _elem33.read(iprot)
            self.photos.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.apply_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.apply_user = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardChangeArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.card is not None:
      oprot.writeFieldBegin('card', TType.STRUCT, 2)
      self.card.write(oprot)
      oprot.writeFieldEnd()
    if self.photos is not None:
      oprot.writeFieldBegin('photos', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.photos))
      for iter34 in self.photos:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.apply_type is not None:
      oprot.writeFieldBegin('apply_type', TType.I32, 4)
      oprot.writeI32(self.apply_type)
      oprot.writeFieldEnd()
    if self.apply_user is not None:
      oprot.writeFieldBegin('apply_user', TType.I64, 5)
      oprot.writeI64(self.apply_user)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardChangeResp:
  """
  Attributes:
   - userid
   - card
   - status
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRUCT, 'card', (Card, Card.thrift_spec), None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.STRING, 'memo', None, None, ), # 4
  )

  def __init__(self, userid=None, card=None, status=None, memo=None,):
    self.userid = userid
    self.card = card
    self.status = status
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.card = Card()
          self.card.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardChangeResp')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.card is not None:
      oprot.writeFieldBegin('card', TType.STRUCT, 2)
      self.card.write(oprot)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 4)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardQueryArgs:
  """
  Attributes:
   - userids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'userids', (TType.I64,None), None, ), # 1
  )

  def __init__(self, userids=None,):
    self.userids = userids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.userids = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI64();
            self.userids.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardQueryArgs')
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter41 in self.userids:
        oprot.writeI64(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeRatio:
  """
  Attributes:
   - userid
   - trade_type
   - card_type
   - ratio
   - max_fee
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trade_type', None, None, ), # 2
    (3, TType.I16, 'card_type', None, None, ), # 3
    (4, TType.DOUBLE, 'ratio', None, None, ), # 4
    (5, TType.I32, 'max_fee', None, None, ), # 5
  )

  def __init__(self, userid=None, trade_type=None, card_type=None, ratio=None, max_fee=None,):
    self.userid = userid
    self.trade_type = trade_type
    self.card_type = card_type
    self.ratio = ratio
    self.max_fee = max_fee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trade_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.max_fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeRatio')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.STRING, 2)
      oprot.writeString(self.trade_type)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 3)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 4)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    if self.max_fee is not None:
      oprot.writeFieldBegin('max_fee', TType.I32, 5)
      oprot.writeI32(self.max_fee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Fee:
  """
  Attributes:
   - fee
   - ratio
   - max_fee
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fee', None, None, ), # 1
    (2, TType.DOUBLE, 'ratio', None, None, ), # 2
    (3, TType.I32, 'max_fee', None, None, ), # 3
  )

  def __init__(self, fee=None, ratio=None, max_fee=None,):
    self.fee = fee
    self.ratio = ratio
    self.max_fee = max_fee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.max_fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Fee')
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I32, 1)
      oprot.writeI32(self.fee)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 2)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    if self.max_fee is not None:
      oprot.writeFieldBegin('max_fee', TType.I32, 3)
      oprot.writeI32(self.max_fee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeQueryArgs:
  """
  Attributes:
   - userid
   - trade_type
   - card_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'userid', (TType.I64,None), None, ), # 1
    (2, TType.LIST, 'trade_type', (TType.STRING,None), None, ), # 2
    (3, TType.I16, 'card_type', None, None, ), # 3
  )

  def __init__(self, userid=None, trade_type=None, card_type=None,):
    self.userid = userid
    self.trade_type = trade_type
    self.card_type = card_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.userid = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readI64();
            self.userid.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.trade_type = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = iprot.readString();
            self.trade_type.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeQueryArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.userid))
      for iter54 in self.userid:
        oprot.writeI64(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.trade_type))
      for iter55 in self.trade_type:
        oprot.writeString(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 3)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CalculateFeeArgs:
  """
  Attributes:
   - userid
   - trade_type
   - card_type
   - amt
   - chnl_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trade_type', None, None, ), # 2
    (3, TType.I16, 'card_type', None, None, ), # 3
    (4, TType.I64, 'amt', None, None, ), # 4
    (5, TType.I32, 'chnl_id', None, None, ), # 5
  )

  def __init__(self, userid=None, trade_type=None, card_type=None, amt=None, chnl_id=None,):
    self.userid = userid
    self.trade_type = trade_type
    self.card_type = card_type
    self.amt = amt
    self.chnl_id = chnl_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trade_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.chnl_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CalculateFeeArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.STRING, 2)
      oprot.writeString(self.trade_type)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 3)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 4)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.I32, 5)
      oprot.writeI32(self.chnl_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OverseasFeeRatio:
  """
  Attributes:
   - userid
   - airpay_ratio
   - unionpay_ratio
   - alipayhk_ratio
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.DOUBLE, 'airpay_ratio', None, None, ), # 2
    (3, TType.DOUBLE, 'unionpay_ratio', None, None, ), # 3
    (4, TType.DOUBLE, 'alipayhk_ratio', None, None, ), # 4
  )

  def __init__(self, userid=None, airpay_ratio=None, unionpay_ratio=None, alipayhk_ratio=None,):
    self.userid = userid
    self.airpay_ratio = airpay_ratio
    self.unionpay_ratio = unionpay_ratio
    self.alipayhk_ratio = alipayhk_ratio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.airpay_ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.unionpay_ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.alipayhk_ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OverseasFeeRatio')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.airpay_ratio is not None:
      oprot.writeFieldBegin('airpay_ratio', TType.DOUBLE, 2)
      oprot.writeDouble(self.airpay_ratio)
      oprot.writeFieldEnd()
    if self.unionpay_ratio is not None:
      oprot.writeFieldBegin('unionpay_ratio', TType.DOUBLE, 3)
      oprot.writeDouble(self.unionpay_ratio)
      oprot.writeFieldEnd()
    if self.alipayhk_ratio is not None:
      oprot.writeFieldBegin('alipayhk_ratio', TType.DOUBLE, 4)
      oprot.writeDouble(self.alipayhk_ratio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
