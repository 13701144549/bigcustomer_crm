#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Account2
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i16 ping()'
  print '   account_query(AccountQueryArgs query_args)'
  print '   account_record(RecordArgs record_args)'
  print '  i16 account_cancel(Transfer param)'
  print '  Fee trade_payment(Trade trade)'
  print '  Fee trade_cancel(Trade trade)'
  print '  Fee trade_refund(Trade trade)'
  print '  i16 settle(Transfer param)'
  print '  i16 remit(Transfer param)'
  print '  i16 remitback(Transfer param)'
  print '  i16 withhold(Transfer param)'
  print '  i16 frozen(Transfer param)'
  print '  i16 unfrozen(Transfer param)'
  print '  i16 cashdraw(Transfer param)'
  print '  i16 cashdrawback(Transfer param)'
  print '  i16 withdraw(Transfer param)'
  print '  i16 withdrawback(Transfer param)'
  print '  i16 profit(Transfer param)'
  print '  i64 card_change(CardChangeArgs change_args)'
  print '  i64 card_modify(Card card_args)'
  print '  CardChangeResp card_change_query(i64 userid)'
  print '   card_query(CardQueryArgs query_args)'
  print '  i64 fee_ratio_save(FeeRatio fee_ratio)'
  print '   fee_ratio_query(FeeQueryArgs query_args)'
  print '  Fee calculate_fee(CalculateFeeArgs cal_args)'
  print '  i64 overseas_fee_ratio_save(OverseasFeeRatio overseas_fee_ratio)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Account2.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'account_query':
  if len(args) != 1:
    print 'account_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.account_query(eval(args[0]),))

elif cmd == 'account_record':
  if len(args) != 1:
    print 'account_record requires 1 args'
    sys.exit(1)
  pp.pprint(client.account_record(eval(args[0]),))

elif cmd == 'account_cancel':
  if len(args) != 1:
    print 'account_cancel requires 1 args'
    sys.exit(1)
  pp.pprint(client.account_cancel(eval(args[0]),))

elif cmd == 'trade_payment':
  if len(args) != 1:
    print 'trade_payment requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_payment(eval(args[0]),))

elif cmd == 'trade_cancel':
  if len(args) != 1:
    print 'trade_cancel requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_cancel(eval(args[0]),))

elif cmd == 'trade_refund':
  if len(args) != 1:
    print 'trade_refund requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_refund(eval(args[0]),))

elif cmd == 'settle':
  if len(args) != 1:
    print 'settle requires 1 args'
    sys.exit(1)
  pp.pprint(client.settle(eval(args[0]),))

elif cmd == 'remit':
  if len(args) != 1:
    print 'remit requires 1 args'
    sys.exit(1)
  pp.pprint(client.remit(eval(args[0]),))

elif cmd == 'remitback':
  if len(args) != 1:
    print 'remitback requires 1 args'
    sys.exit(1)
  pp.pprint(client.remitback(eval(args[0]),))

elif cmd == 'withhold':
  if len(args) != 1:
    print 'withhold requires 1 args'
    sys.exit(1)
  pp.pprint(client.withhold(eval(args[0]),))

elif cmd == 'frozen':
  if len(args) != 1:
    print 'frozen requires 1 args'
    sys.exit(1)
  pp.pprint(client.frozen(eval(args[0]),))

elif cmd == 'unfrozen':
  if len(args) != 1:
    print 'unfrozen requires 1 args'
    sys.exit(1)
  pp.pprint(client.unfrozen(eval(args[0]),))

elif cmd == 'cashdraw':
  if len(args) != 1:
    print 'cashdraw requires 1 args'
    sys.exit(1)
  pp.pprint(client.cashdraw(eval(args[0]),))

elif cmd == 'cashdrawback':
  if len(args) != 1:
    print 'cashdrawback requires 1 args'
    sys.exit(1)
  pp.pprint(client.cashdrawback(eval(args[0]),))

elif cmd == 'withdraw':
  if len(args) != 1:
    print 'withdraw requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdraw(eval(args[0]),))

elif cmd == 'withdrawback':
  if len(args) != 1:
    print 'withdrawback requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdrawback(eval(args[0]),))

elif cmd == 'profit':
  if len(args) != 1:
    print 'profit requires 1 args'
    sys.exit(1)
  pp.pprint(client.profit(eval(args[0]),))

elif cmd == 'card_change':
  if len(args) != 1:
    print 'card_change requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_change(eval(args[0]),))

elif cmd == 'card_modify':
  if len(args) != 1:
    print 'card_modify requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_modify(eval(args[0]),))

elif cmd == 'card_change_query':
  if len(args) != 1:
    print 'card_change_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_change_query(eval(args[0]),))

elif cmd == 'card_query':
  if len(args) != 1:
    print 'card_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_query(eval(args[0]),))

elif cmd == 'fee_ratio_save':
  if len(args) != 1:
    print 'fee_ratio_save requires 1 args'
    sys.exit(1)
  pp.pprint(client.fee_ratio_save(eval(args[0]),))

elif cmd == 'fee_ratio_query':
  if len(args) != 1:
    print 'fee_ratio_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.fee_ratio_query(eval(args[0]),))

elif cmd == 'calculate_fee':
  if len(args) != 1:
    print 'calculate_fee requires 1 args'
    sys.exit(1)
  pp.pprint(client.calculate_fee(eval(args[0]),))

elif cmd == 'overseas_fee_ratio_save':
  if len(args) != 1:
    print 'overseas_fee_ratio_save requires 1 args'
    sys.exit(1)
  pp.pprint(client.overseas_fee_ratio_save(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
