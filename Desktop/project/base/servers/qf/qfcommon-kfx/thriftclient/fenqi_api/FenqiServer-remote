#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import FenqiServer
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  Opuser opuser_create(Opuser info, i64 admin)'
  print '   opuser_query(OpuserQueryArg q)'
  print '   opuser_get( l)'
  print '  void opuser_update( infos, i64 admin)'
  print '  Store store_create(Store info, i64 admin)'
  print '   store_query(StoreQueryArg q)'
  print '   store_get( l)'
  print '  void store_update( infos, i64 admin)'
  print '  StoreMgr store_mgr_create(StoreMgr info, i64 admin)'
  print '   store_mgr_query(StoreMgrQueryArg q)'
  print '   store_mgr_get( l)'
  print '  void store_mgr_update( infos, i64 admin)'
  print '  District district_create(District info, i64 admin)'
  print '   district_query(DistrictQueryArg q)'
  print '   district_get( l)'
  print '  void district_update( infos, i64 admin)'
  print '  DistrictMgr district_mgr_create(DistrictMgr info, i64 admin)'
  print '   district_mgr_query(DistrictMgrQueryArg q)'
  print '   district_mgr_get( l)'
  print '  void district_mgr_update( infos, i64 admin)'
  print '  Partner partner_create(Partner info, i64 admin)'
  print '   partner_query(PartnerQueryArg q)'
  print '   partner_get( l)'
  print '  void partner_update( infos, i64 admin)'
  print '  Lender lender_create(Lender info, i64 admin)'
  print '   lender_query(LenderQueryArg q)'
  print '   lender_get( l)'
  print '  void lender_update( infos, i64 admin)'
  print '  Cid2user cid2user_create(Cid2user info, i64 admin)'
  print '   cid2user_query(Cid2userQueryArg q)'
  print '   cid2user_get( l)'
  print '  void cid2user_update( infos, i64 admin)'
  print '  LoanRecord loanrecord_create(LoanRecord info, i64 admin)'
  print '   loanrecord_query(LoanRecordArg q)'
  print '   loanrecord_get( l)'
  print '  void loanrecord_update( infos, i64 admin)'
  print '  Borrower borrower_create(Borrower info, i64 admin)'
  print '   borrower_base_query(BorrowerBaseQueryArg q)'
  print '   borrower_base_get( l)'
  print '  void borrower_base_update( infos, i64 admin)'
  print '   borrower_profile_query(BorrowerProfileQueryArg q)'
  print '   borrower_profile_get( l)'
  print '  void borrower_profile_update( infos, i64 admin)'
  print '   borrower_credit_query(BorrowerCreditQueryArg q)'
  print '   borrower_credit_get( l)'
  print '  void borrower_credit_update( infos, i64 admin)'
  print '  BorrowerPartner borrower_partner_create(BorrowerPartner info, i64 admin)'
  print '   borrower_partner_query(BorrowerPartnerQueryArg q)'
  print '   borrower_partner_get( l)'
  print '  void borrower_partner_update( infos, i64 admin)'
  print '  CardBind cardbind_create(CardBind info, i64 admin)'
  print '   cardbind_query(CardBindArg q)'
  print '   cardbind_get( l)'
  print '  void cardbind_update( infos, i64 admin)'
  print '  LoanTrade loantrade_create(LoanTrade info, i64 admin)'
  print '   loantrade_query(LoanTradeArg q)'
  print '   loantrade_get( l)'
  print '  void loantrade_update( infos, i64 admin)'
  print '  RepayPlan repayplan_create(RepayPlan info, i64 admin)'
  print '   repayplan_query(RepayPlanArg q)'
  print '   repayplan_get( l)'
  print '  void repayplan_update( infos, i64 admin)'
  print '  RepayRecord repayrecord_create(RepayRecord info, i64 admin)'
  print '   repayrecord_query(RepayRecordArg q)'
  print '   repayrecord_get( l)'
  print '  void repayrecord_update( infos, i64 admin)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = FenqiServer.Client(protocol)
transport.open()

if cmd == 'opuser_create':
  if len(args) != 2:
    print 'opuser_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.opuser_create(eval(args[0]),eval(args[1]),))

elif cmd == 'opuser_query':
  if len(args) != 1:
    print 'opuser_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.opuser_query(eval(args[0]),))

elif cmd == 'opuser_get':
  if len(args) != 1:
    print 'opuser_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.opuser_get(eval(args[0]),))

elif cmd == 'opuser_update':
  if len(args) != 2:
    print 'opuser_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.opuser_update(eval(args[0]),eval(args[1]),))

elif cmd == 'store_create':
  if len(args) != 2:
    print 'store_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.store_create(eval(args[0]),eval(args[1]),))

elif cmd == 'store_query':
  if len(args) != 1:
    print 'store_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_query(eval(args[0]),))

elif cmd == 'store_get':
  if len(args) != 1:
    print 'store_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_get(eval(args[0]),))

elif cmd == 'store_update':
  if len(args) != 2:
    print 'store_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.store_update(eval(args[0]),eval(args[1]),))

elif cmd == 'store_mgr_create':
  if len(args) != 2:
    print 'store_mgr_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.store_mgr_create(eval(args[0]),eval(args[1]),))

elif cmd == 'store_mgr_query':
  if len(args) != 1:
    print 'store_mgr_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_mgr_query(eval(args[0]),))

elif cmd == 'store_mgr_get':
  if len(args) != 1:
    print 'store_mgr_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_mgr_get(eval(args[0]),))

elif cmd == 'store_mgr_update':
  if len(args) != 2:
    print 'store_mgr_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.store_mgr_update(eval(args[0]),eval(args[1]),))

elif cmd == 'district_create':
  if len(args) != 2:
    print 'district_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.district_create(eval(args[0]),eval(args[1]),))

elif cmd == 'district_query':
  if len(args) != 1:
    print 'district_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.district_query(eval(args[0]),))

elif cmd == 'district_get':
  if len(args) != 1:
    print 'district_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.district_get(eval(args[0]),))

elif cmd == 'district_update':
  if len(args) != 2:
    print 'district_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.district_update(eval(args[0]),eval(args[1]),))

elif cmd == 'district_mgr_create':
  if len(args) != 2:
    print 'district_mgr_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.district_mgr_create(eval(args[0]),eval(args[1]),))

elif cmd == 'district_mgr_query':
  if len(args) != 1:
    print 'district_mgr_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.district_mgr_query(eval(args[0]),))

elif cmd == 'district_mgr_get':
  if len(args) != 1:
    print 'district_mgr_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.district_mgr_get(eval(args[0]),))

elif cmd == 'district_mgr_update':
  if len(args) != 2:
    print 'district_mgr_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.district_mgr_update(eval(args[0]),eval(args[1]),))

elif cmd == 'partner_create':
  if len(args) != 2:
    print 'partner_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.partner_create(eval(args[0]),eval(args[1]),))

elif cmd == 'partner_query':
  if len(args) != 1:
    print 'partner_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.partner_query(eval(args[0]),))

elif cmd == 'partner_get':
  if len(args) != 1:
    print 'partner_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.partner_get(eval(args[0]),))

elif cmd == 'partner_update':
  if len(args) != 2:
    print 'partner_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.partner_update(eval(args[0]),eval(args[1]),))

elif cmd == 'lender_create':
  if len(args) != 2:
    print 'lender_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.lender_create(eval(args[0]),eval(args[1]),))

elif cmd == 'lender_query':
  if len(args) != 1:
    print 'lender_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.lender_query(eval(args[0]),))

elif cmd == 'lender_get':
  if len(args) != 1:
    print 'lender_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.lender_get(eval(args[0]),))

elif cmd == 'lender_update':
  if len(args) != 2:
    print 'lender_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.lender_update(eval(args[0]),eval(args[1]),))

elif cmd == 'cid2user_create':
  if len(args) != 2:
    print 'cid2user_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.cid2user_create(eval(args[0]),eval(args[1]),))

elif cmd == 'cid2user_query':
  if len(args) != 1:
    print 'cid2user_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.cid2user_query(eval(args[0]),))

elif cmd == 'cid2user_get':
  if len(args) != 1:
    print 'cid2user_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.cid2user_get(eval(args[0]),))

elif cmd == 'cid2user_update':
  if len(args) != 2:
    print 'cid2user_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.cid2user_update(eval(args[0]),eval(args[1]),))

elif cmd == 'loanrecord_create':
  if len(args) != 2:
    print 'loanrecord_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.loanrecord_create(eval(args[0]),eval(args[1]),))

elif cmd == 'loanrecord_query':
  if len(args) != 1:
    print 'loanrecord_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.loanrecord_query(eval(args[0]),))

elif cmd == 'loanrecord_get':
  if len(args) != 1:
    print 'loanrecord_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.loanrecord_get(eval(args[0]),))

elif cmd == 'loanrecord_update':
  if len(args) != 2:
    print 'loanrecord_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.loanrecord_update(eval(args[0]),eval(args[1]),))

elif cmd == 'borrower_create':
  if len(args) != 2:
    print 'borrower_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.borrower_create(eval(args[0]),eval(args[1]),))

elif cmd == 'borrower_base_query':
  if len(args) != 1:
    print 'borrower_base_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.borrower_base_query(eval(args[0]),))

elif cmd == 'borrower_base_get':
  if len(args) != 1:
    print 'borrower_base_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.borrower_base_get(eval(args[0]),))

elif cmd == 'borrower_base_update':
  if len(args) != 2:
    print 'borrower_base_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.borrower_base_update(eval(args[0]),eval(args[1]),))

elif cmd == 'borrower_profile_query':
  if len(args) != 1:
    print 'borrower_profile_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.borrower_profile_query(eval(args[0]),))

elif cmd == 'borrower_profile_get':
  if len(args) != 1:
    print 'borrower_profile_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.borrower_profile_get(eval(args[0]),))

elif cmd == 'borrower_profile_update':
  if len(args) != 2:
    print 'borrower_profile_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.borrower_profile_update(eval(args[0]),eval(args[1]),))

elif cmd == 'borrower_credit_query':
  if len(args) != 1:
    print 'borrower_credit_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.borrower_credit_query(eval(args[0]),))

elif cmd == 'borrower_credit_get':
  if len(args) != 1:
    print 'borrower_credit_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.borrower_credit_get(eval(args[0]),))

elif cmd == 'borrower_credit_update':
  if len(args) != 2:
    print 'borrower_credit_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.borrower_credit_update(eval(args[0]),eval(args[1]),))

elif cmd == 'borrower_partner_create':
  if len(args) != 2:
    print 'borrower_partner_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.borrower_partner_create(eval(args[0]),eval(args[1]),))

elif cmd == 'borrower_partner_query':
  if len(args) != 1:
    print 'borrower_partner_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.borrower_partner_query(eval(args[0]),))

elif cmd == 'borrower_partner_get':
  if len(args) != 1:
    print 'borrower_partner_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.borrower_partner_get(eval(args[0]),))

elif cmd == 'borrower_partner_update':
  if len(args) != 2:
    print 'borrower_partner_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.borrower_partner_update(eval(args[0]),eval(args[1]),))

elif cmd == 'cardbind_create':
  if len(args) != 2:
    print 'cardbind_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.cardbind_create(eval(args[0]),eval(args[1]),))

elif cmd == 'cardbind_query':
  if len(args) != 1:
    print 'cardbind_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.cardbind_query(eval(args[0]),))

elif cmd == 'cardbind_get':
  if len(args) != 1:
    print 'cardbind_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.cardbind_get(eval(args[0]),))

elif cmd == 'cardbind_update':
  if len(args) != 2:
    print 'cardbind_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.cardbind_update(eval(args[0]),eval(args[1]),))

elif cmd == 'loantrade_create':
  if len(args) != 2:
    print 'loantrade_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.loantrade_create(eval(args[0]),eval(args[1]),))

elif cmd == 'loantrade_query':
  if len(args) != 1:
    print 'loantrade_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.loantrade_query(eval(args[0]),))

elif cmd == 'loantrade_get':
  if len(args) != 1:
    print 'loantrade_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.loantrade_get(eval(args[0]),))

elif cmd == 'loantrade_update':
  if len(args) != 2:
    print 'loantrade_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.loantrade_update(eval(args[0]),eval(args[1]),))

elif cmd == 'repayplan_create':
  if len(args) != 2:
    print 'repayplan_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.repayplan_create(eval(args[0]),eval(args[1]),))

elif cmd == 'repayplan_query':
  if len(args) != 1:
    print 'repayplan_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.repayplan_query(eval(args[0]),))

elif cmd == 'repayplan_get':
  if len(args) != 1:
    print 'repayplan_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.repayplan_get(eval(args[0]),))

elif cmd == 'repayplan_update':
  if len(args) != 2:
    print 'repayplan_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.repayplan_update(eval(args[0]),eval(args[1]),))

elif cmd == 'repayrecord_create':
  if len(args) != 2:
    print 'repayrecord_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.repayrecord_create(eval(args[0]),eval(args[1]),))

elif cmd == 'repayrecord_query':
  if len(args) != 1:
    print 'repayrecord_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.repayrecord_query(eval(args[0]),))

elif cmd == 'repayrecord_get':
  if len(args) != 1:
    print 'repayrecord_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.repayrecord_get(eval(args[0]),))

elif cmd == 'repayrecord_update':
  if len(args) != 2:
    print 'repayrecord_update requires 2 args'
    sys.exit(1)
  pp.pprint(client.repayrecord_update(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
