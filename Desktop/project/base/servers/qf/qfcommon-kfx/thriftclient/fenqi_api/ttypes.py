#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class USER_STATUS:
  NOT_BIND = 1
  BIND = 2
  ACTIVED = 3
  FORBIDDEN = 4

  _VALUES_TO_NAMES = {
    1: "NOT_BIND",
    2: "BIND",
    3: "ACTIVED",
    4: "FORBIDDEN",
  }

  _NAMES_TO_VALUES = {
    "NOT_BIND": 1,
    "BIND": 2,
    "ACTIVED": 3,
    "FORBIDDEN": 4,
  }

class RUNNING_STATUS:
  RUNNING = 1
  CLOSED = 2

  _VALUES_TO_NAMES = {
    1: "RUNNING",
    2: "CLOSED",
  }

  _NAMES_TO_VALUES = {
    "RUNNING": 1,
    "CLOSED": 2,
  }

class BIND_STATUS:
  BIND = 1
  NOT_BIND = 2

  _VALUES_TO_NAMES = {
    1: "BIND",
    2: "NOT_BIND",
  }

  _NAMES_TO_VALUES = {
    "BIND": 1,
    "NOT_BIND": 2,
  }

class BIND_TYPE:
  COLLECT = 1
  REPAY = 2

  _VALUES_TO_NAMES = {
    1: "COLLECT",
    2: "REPAY",
  }

  _NAMES_TO_VALUES = {
    "COLLECT": 1,
    "REPAY": 2,
  }

class USER_ROLE:
  OPUSER = 1
  STORE_MGR = 3
  DISTRICT_MGR = 5
  PARTNER = 6
  LENDER = 7
  BORROWER = 8

  _VALUES_TO_NAMES = {
    1: "OPUSER",
    3: "STORE_MGR",
    5: "DISTRICT_MGR",
    6: "PARTNER",
    7: "LENDER",
    8: "BORROWER",
  }

  _NAMES_TO_VALUES = {
    "OPUSER": 1,
    "STORE_MGR": 3,
    "DISTRICT_MGR": 5,
    "PARTNER": 6,
    "LENDER": 7,
    "BORROWER": 8,
  }

class BORROWER_STATUS:
  NOT_CREDIT = 1
  REALNAME = 2
  CREDIT_WAIT = 3
  CREDIT_PASS = 4
  CREDIT_FAIL = 5
  CREDIT_FACE = 6

  _VALUES_TO_NAMES = {
    1: "NOT_CREDIT",
    2: "REALNAME",
    3: "CREDIT_WAIT",
    4: "CREDIT_PASS",
    5: "CREDIT_FAIL",
    6: "CREDIT_FACE",
  }

  _NAMES_TO_VALUES = {
    "NOT_CREDIT": 1,
    "REALNAME": 2,
    "CREDIT_WAIT": 3,
    "CREDIT_PASS": 4,
    "CREDIT_FAIL": 5,
    "CREDIT_FACE": 6,
  }

class LOAN_TRADE_STATUS:
  APPLYING = 1
  CREDITING = 2
  REPAYING = 3
  SETTLE = 4
  APPLY_REFUSE = 5
  CREDIT_FAIL = 6
  OVERDUE = 7

  _VALUES_TO_NAMES = {
    1: "APPLYING",
    2: "CREDITING",
    3: "REPAYING",
    4: "SETTLE",
    5: "APPLY_REFUSE",
    6: "CREDIT_FAIL",
    7: "OVERDUE",
  }

  _NAMES_TO_VALUES = {
    "APPLYING": 1,
    "CREDITING": 2,
    "REPAYING": 3,
    "SETTLE": 4,
    "APPLY_REFUSE": 5,
    "CREDIT_FAIL": 6,
    "OVERDUE": 7,
  }

class REPAY_STATUS:
  WAITING = 1
  CLOSE = 2
  OVERDUE = 3
  REPAYING = 4

  _VALUES_TO_NAMES = {
    1: "WAITING",
    2: "CLOSE",
    3: "OVERDUE",
    4: "REPAYING",
  }

  _NAMES_TO_VALUES = {
    "WAITING": 1,
    "CLOSE": 2,
    "OVERDUE": 3,
    "REPAYING": 4,
  }

class LOAN_STATUS:
  APPLYING = 1
  APPROVING = 2
  SIGNING = 3
  SIGNED = 4
  REPAYING = 5
  OVERDUE = 6
  SETTLE = 7
  APPLY_REFUSE = 8
  FIRST_AUDIT = 9
  FIRST_AUDIT_AMOUNT = 10
  PROJECT_END = 11
  GIVE_UP = 12

  _VALUES_TO_NAMES = {
    1: "APPLYING",
    2: "APPROVING",
    3: "SIGNING",
    4: "SIGNED",
    5: "REPAYING",
    6: "OVERDUE",
    7: "SETTLE",
    8: "APPLY_REFUSE",
    9: "FIRST_AUDIT",
    10: "FIRST_AUDIT_AMOUNT",
    11: "PROJECT_END",
    12: "GIVE_UP",
  }

  _NAMES_TO_VALUES = {
    "APPLYING": 1,
    "APPROVING": 2,
    "SIGNING": 3,
    "SIGNED": 4,
    "REPAYING": 5,
    "OVERDUE": 6,
    "SETTLE": 7,
    "APPLY_REFUSE": 8,
    "FIRST_AUDIT": 9,
    "FIRST_AUDIT_AMOUNT": 10,
    "PROJECT_END": 11,
    "GIVE_UP": 12,
  }


class FenqiException(Exception):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FenqiException')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Opuser:
  """
  Attributes:
   - userid
   - store_uid
   - idnumber
   - name
   - status
   - cid
   - utime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'store_uid', None, None, ), # 2
    (3, TType.STRING, 'idnumber', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.I64, 'cid', None, None, ), # 6
    (7, TType.STRING, 'utime', None, None, ), # 7
  )

  def __init__(self, userid=None, store_uid=None, idnumber=None, name=None, status=None, cid=None, utime=None,):
    self.userid = userid
    self.store_uid = store_uid
    self.idnumber = idnumber
    self.name = name
    self.status = status
    self.cid = cid
    self.utime = utime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.store_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.utime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Opuser')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.store_uid is not None:
      oprot.writeFieldBegin('store_uid', TType.I64, 2)
      oprot.writeI64(self.store_uid)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 3)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 6)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.utime is not None:
      oprot.writeFieldBegin('utime', TType.STRING, 7)
      oprot.writeString(self.utime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Store:
  """
  Attributes:
   - userid
   - store_mgr_uid
   - district_id
   - address
   - shop_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'store_mgr_uid', None, None, ), # 2
    (3, TType.I64, 'district_id', None, None, ), # 3
    (4, TType.STRING, 'address', None, None, ), # 4
    (5, TType.STRING, 'shop_name', None, None, ), # 5
  )

  def __init__(self, userid=None, store_mgr_uid=None, district_id=None, address=None, shop_name=None,):
    self.userid = userid
    self.store_mgr_uid = store_mgr_uid
    self.district_id = district_id
    self.address = address
    self.shop_name = shop_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.store_mgr_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.district_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.shop_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Store')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.store_mgr_uid is not None:
      oprot.writeFieldBegin('store_mgr_uid', TType.I64, 2)
      oprot.writeI64(self.store_mgr_uid)
      oprot.writeFieldEnd()
    if self.district_id is not None:
      oprot.writeFieldBegin('district_id', TType.I64, 3)
      oprot.writeI64(self.district_id)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 4)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.shop_name is not None:
      oprot.writeFieldBegin('shop_name', TType.STRING, 5)
      oprot.writeString(self.shop_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreMgr:
  """
  Attributes:
   - userid
   - status
   - name
   - idnumber
   - district_id
   - cid
   - utime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'idnumber', None, None, ), # 4
    (5, TType.I64, 'district_id', None, None, ), # 5
    (6, TType.I64, 'cid', None, None, ), # 6
    (7, TType.STRING, 'utime', None, None, ), # 7
  )

  def __init__(self, userid=None, status=None, name=None, idnumber=None, district_id=None, cid=None, utime=None,):
    self.userid = userid
    self.status = status
    self.name = name
    self.idnumber = idnumber
    self.district_id = district_id
    self.cid = cid
    self.utime = utime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.district_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.utime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreMgr')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 4)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    if self.district_id is not None:
      oprot.writeFieldBegin('district_id', TType.I64, 5)
      oprot.writeI64(self.district_id)
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 6)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.utime is not None:
      oprot.writeFieldBegin('utime', TType.STRING, 7)
      oprot.writeString(self.utime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class District:
  """
  Attributes:
   - id
   - district_mgr_uid
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'district_mgr_uid', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
  )

  def __init__(self, id=None, district_mgr_uid=None, name=None,):
    self.id = id
    self.district_mgr_uid = district_mgr_uid
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.district_mgr_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('District')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.district_mgr_uid is not None:
      oprot.writeFieldBegin('district_mgr_uid', TType.I64, 2)
      oprot.writeI64(self.district_mgr_uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DistrictMgr:
  """
  Attributes:
   - userid
   - partner_uid
   - status
   - name
   - idnumber
   - cid
   - utime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'partner_uid', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.STRING, 'idnumber', None, None, ), # 5
    (6, TType.I64, 'cid', None, None, ), # 6
    (7, TType.STRING, 'utime', None, None, ), # 7
  )

  def __init__(self, userid=None, partner_uid=None, status=None, name=None, idnumber=None, cid=None, utime=None,):
    self.userid = userid
    self.partner_uid = partner_uid
    self.status = status
    self.name = name
    self.idnumber = idnumber
    self.cid = cid
    self.utime = utime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.partner_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.utime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DistrictMgr')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.partner_uid is not None:
      oprot.writeFieldBegin('partner_uid', TType.I64, 2)
      oprot.writeI64(self.partner_uid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 5)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 6)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.utime is not None:
      oprot.writeFieldBegin('utime', TType.STRING, 7)
      oprot.writeString(self.utime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Partner:
  """
  Attributes:
   - userid
   - name
   - status
   - join_dtm
   - contact_name
   - contact_mobile
   - app_key
   - ext
   - saleman_uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.STRING, 'join_dtm', None, None, ), # 4
    (5, TType.STRING, 'contact_name', None, None, ), # 5
    (6, TType.STRING, 'contact_mobile', None, None, ), # 6
    (7, TType.STRING, 'app_key', None, None, ), # 7
    (8, TType.STRING, 'ext', None, None, ), # 8
    (9, TType.I64, 'saleman_uid', None, None, ), # 9
  )

  def __init__(self, userid=None, name=None, status=None, join_dtm=None, contact_name=None, contact_mobile=None, app_key=None, ext=None, saleman_uid=None,):
    self.userid = userid
    self.name = name
    self.status = status
    self.join_dtm = join_dtm
    self.contact_name = contact_name
    self.contact_mobile = contact_mobile
    self.app_key = app_key
    self.ext = ext
    self.saleman_uid = saleman_uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.contact_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.contact_mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.app_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.ext = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.saleman_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Partner')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.join_dtm is not None:
      oprot.writeFieldBegin('join_dtm', TType.STRING, 4)
      oprot.writeString(self.join_dtm)
      oprot.writeFieldEnd()
    if self.contact_name is not None:
      oprot.writeFieldBegin('contact_name', TType.STRING, 5)
      oprot.writeString(self.contact_name)
      oprot.writeFieldEnd()
    if self.contact_mobile is not None:
      oprot.writeFieldBegin('contact_mobile', TType.STRING, 6)
      oprot.writeString(self.contact_mobile)
      oprot.writeFieldEnd()
    if self.app_key is not None:
      oprot.writeFieldBegin('app_key', TType.STRING, 7)
      oprot.writeString(self.app_key)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRING, 8)
      oprot.writeString(self.ext)
      oprot.writeFieldEnd()
    if self.saleman_uid is not None:
      oprot.writeFieldBegin('saleman_uid', TType.I64, 9)
      oprot.writeI64(self.saleman_uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Lender:
  """
  Attributes:
   - userid
   - name
   - status
   - joindtm
   - contact_name
   - contact_mobile
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.STRING, 'joindtm', None, None, ), # 4
    (5, TType.STRING, 'contact_name', None, None, ), # 5
    (6, TType.STRING, 'contact_mobile', None, None, ), # 6
  )

  def __init__(self, userid=None, name=None, status=None, joindtm=None, contact_name=None, contact_mobile=None,):
    self.userid = userid
    self.name = name
    self.status = status
    self.joindtm = joindtm
    self.contact_name = contact_name
    self.contact_mobile = contact_mobile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.joindtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.contact_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.contact_mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Lender')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.joindtm is not None:
      oprot.writeFieldBegin('joindtm', TType.STRING, 4)
      oprot.writeString(self.joindtm)
      oprot.writeFieldEnd()
    if self.contact_name is not None:
      oprot.writeFieldBegin('contact_name', TType.STRING, 5)
      oprot.writeString(self.contact_name)
      oprot.writeFieldEnd()
    if self.contact_mobile is not None:
      oprot.writeFieldBegin('contact_mobile', TType.STRING, 6)
      oprot.writeString(self.contact_mobile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Cid2user:
  """
  Attributes:
   - cid
   - userid
   - role
   - mobile
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cid', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'role', None, None, ), # 3
    (4, TType.I64, 'mobile', None, None, ), # 4
  )

  def __init__(self, cid=None, userid=None, role=None, mobile=None,):
    self.cid = cid
    self.userid = userid
    self.role = role
    self.mobile = mobile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.role = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.mobile = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Cid2user')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 1)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I64, 3)
      oprot.writeI64(self.role)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.I64, 4)
      oprot.writeI64(self.mobile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Borrower:
  """
  Attributes:
   - id
   - status
   - mobile
   - name
   - idnumber
   - is_student
   - contact
   - loan_txamt
   - remain_loan_txamt
   - due_date
   - agreement
   - reason
   - reason_detail
   - face_biz
   - cardbind_id
   - partner_uid
   - extra_userid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    None, # 2
    None, # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.STRING, 'mobile', None, None, ), # 5
    (6, TType.STRING, 'name', None, None, ), # 6
    (7, TType.STRING, 'idnumber', None, None, ), # 7
    (8, TType.I64, 'is_student', None, None, ), # 8
    (9, TType.STRING, 'contact', None, None, ), # 9
    (10, TType.I64, 'loan_txamt', None, None, ), # 10
    (11, TType.I64, 'remain_loan_txamt', None, None, ), # 11
    (12, TType.I64, 'due_date', None, None, ), # 12
    (13, TType.STRING, 'agreement', None, None, ), # 13
    None, # 14
    (15, TType.STRING, 'reason', None, None, ), # 15
    (16, TType.STRING, 'reason_detail', None, None, ), # 16
    (17, TType.STRING, 'face_biz', None, None, ), # 17
    (18, TType.I64, 'cardbind_id', None, None, ), # 18
    (19, TType.I64, 'partner_uid', None, None, ), # 19
    (20, TType.STRING, 'extra_userid', None, None, ), # 20
  )

  def __init__(self, id=None, status=None, mobile=None, name=None, idnumber=None, is_student=None, contact=None, loan_txamt=None, remain_loan_txamt=None, due_date=None, agreement=None, reason=None, reason_detail=None, face_biz=None, cardbind_id=None, partner_uid=None, extra_userid=None,):
    self.id = id
    self.status = status
    self.mobile = mobile
    self.name = name
    self.idnumber = idnumber
    self.is_student = is_student
    self.contact = contact
    self.loan_txamt = loan_txamt
    self.remain_loan_txamt = remain_loan_txamt
    self.due_date = due_date
    self.agreement = agreement
    self.reason = reason
    self.reason_detail = reason_detail
    self.face_biz = face_biz
    self.cardbind_id = cardbind_id
    self.partner_uid = partner_uid
    self.extra_userid = extra_userid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.is_student = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.contact = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.loan_txamt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.remain_loan_txamt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.due_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.agreement = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.reason_detail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.face_biz = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.cardbind_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.partner_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.extra_userid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Borrower')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 5)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 6)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 7)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    if self.is_student is not None:
      oprot.writeFieldBegin('is_student', TType.I64, 8)
      oprot.writeI64(self.is_student)
      oprot.writeFieldEnd()
    if self.contact is not None:
      oprot.writeFieldBegin('contact', TType.STRING, 9)
      oprot.writeString(self.contact)
      oprot.writeFieldEnd()
    if self.loan_txamt is not None:
      oprot.writeFieldBegin('loan_txamt', TType.I64, 10)
      oprot.writeI64(self.loan_txamt)
      oprot.writeFieldEnd()
    if self.remain_loan_txamt is not None:
      oprot.writeFieldBegin('remain_loan_txamt', TType.I64, 11)
      oprot.writeI64(self.remain_loan_txamt)
      oprot.writeFieldEnd()
    if self.due_date is not None:
      oprot.writeFieldBegin('due_date', TType.I64, 12)
      oprot.writeI64(self.due_date)
      oprot.writeFieldEnd()
    if self.agreement is not None:
      oprot.writeFieldBegin('agreement', TType.STRING, 13)
      oprot.writeString(self.agreement)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 15)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.reason_detail is not None:
      oprot.writeFieldBegin('reason_detail', TType.STRING, 16)
      oprot.writeString(self.reason_detail)
      oprot.writeFieldEnd()
    if self.face_biz is not None:
      oprot.writeFieldBegin('face_biz', TType.STRING, 17)
      oprot.writeString(self.face_biz)
      oprot.writeFieldEnd()
    if self.cardbind_id is not None:
      oprot.writeFieldBegin('cardbind_id', TType.I64, 18)
      oprot.writeI64(self.cardbind_id)
      oprot.writeFieldEnd()
    if self.partner_uid is not None:
      oprot.writeFieldBegin('partner_uid', TType.I64, 19)
      oprot.writeI64(self.partner_uid)
      oprot.writeFieldEnd()
    if self.extra_userid is not None:
      oprot.writeFieldBegin('extra_userid', TType.STRING, 20)
      oprot.writeString(self.extra_userid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BorrowerBase:
  """
  Attributes:
   - cid
   - userid
   - status
   - reason
   - reason_detail
   - face_biz
   - cardbind_id
   - step_refuse
   - status_utime
   - ctime
   - partner_uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cid', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
    (5, TType.STRING, 'reason_detail', None, None, ), # 5
    (6, TType.STRING, 'face_biz', None, None, ), # 6
    (7, TType.I64, 'cardbind_id', None, None, ), # 7
    (8, TType.I64, 'step_refuse', None, None, ), # 8
    (9, TType.STRING, 'status_utime', None, None, ), # 9
    (10, TType.STRING, 'ctime', None, None, ), # 10
    (11, TType.I64, 'partner_uid', None, None, ), # 11
  )

  def __init__(self, cid=None, userid=None, status=None, reason=None, reason_detail=None, face_biz=None, cardbind_id=None, step_refuse=None, status_utime=None, ctime=None, partner_uid=None,):
    self.cid = cid
    self.userid = userid
    self.status = status
    self.reason = reason
    self.reason_detail = reason_detail
    self.face_biz = face_biz
    self.cardbind_id = cardbind_id
    self.step_refuse = step_refuse
    self.status_utime = status_utime
    self.ctime = ctime
    self.partner_uid = partner_uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.reason_detail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.face_biz = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.cardbind_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.step_refuse = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.status_utime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.partner_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BorrowerBase')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 1)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.reason_detail is not None:
      oprot.writeFieldBegin('reason_detail', TType.STRING, 5)
      oprot.writeString(self.reason_detail)
      oprot.writeFieldEnd()
    if self.face_biz is not None:
      oprot.writeFieldBegin('face_biz', TType.STRING, 6)
      oprot.writeString(self.face_biz)
      oprot.writeFieldEnd()
    if self.cardbind_id is not None:
      oprot.writeFieldBegin('cardbind_id', TType.I64, 7)
      oprot.writeI64(self.cardbind_id)
      oprot.writeFieldEnd()
    if self.step_refuse is not None:
      oprot.writeFieldBegin('step_refuse', TType.I64, 8)
      oprot.writeI64(self.step_refuse)
      oprot.writeFieldEnd()
    if self.status_utime is not None:
      oprot.writeFieldBegin('status_utime', TType.STRING, 9)
      oprot.writeString(self.status_utime)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 10)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    if self.partner_uid is not None:
      oprot.writeFieldBegin('partner_uid', TType.I64, 11)
      oprot.writeI64(self.partner_uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BorrowerProfile:
  """
  Attributes:
   - mobile
   - name
   - idnumber
   - is_student
   - contact
   - borrower_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mobile', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'idnumber', None, None, ), # 3
    (4, TType.I64, 'is_student', None, None, ), # 4
    (5, TType.STRING, 'contact', None, None, ), # 5
    (6, TType.I64, 'borrower_id', None, None, ), # 6
  )

  def __init__(self, mobile=None, name=None, idnumber=None, is_student=None, contact=None, borrower_id=None,):
    self.mobile = mobile
    self.name = name
    self.idnumber = idnumber
    self.is_student = is_student
    self.contact = contact
    self.borrower_id = borrower_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.is_student = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.contact = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.borrower_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BorrowerProfile')
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 1)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 3)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    if self.is_student is not None:
      oprot.writeFieldBegin('is_student', TType.I64, 4)
      oprot.writeI64(self.is_student)
      oprot.writeFieldEnd()
    if self.contact is not None:
      oprot.writeFieldBegin('contact', TType.STRING, 5)
      oprot.writeString(self.contact)
      oprot.writeFieldEnd()
    if self.borrower_id is not None:
      oprot.writeFieldBegin('borrower_id', TType.I64, 6)
      oprot.writeI64(self.borrower_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BorrowerCredit:
  """
  Attributes:
   - loan_txamt
   - remain_loan_txamt
   - due_date
   - agreement
   - borrower_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'loan_txamt', None, None, ), # 1
    (2, TType.I64, 'remain_loan_txamt', None, None, ), # 2
    (3, TType.I64, 'due_date', None, None, ), # 3
    (4, TType.STRING, 'agreement', None, None, ), # 4
    (5, TType.I64, 'borrower_id', None, None, ), # 5
  )

  def __init__(self, loan_txamt=None, remain_loan_txamt=None, due_date=None, agreement=None, borrower_id=None,):
    self.loan_txamt = loan_txamt
    self.remain_loan_txamt = remain_loan_txamt
    self.due_date = due_date
    self.agreement = agreement
    self.borrower_id = borrower_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.loan_txamt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.remain_loan_txamt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.due_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.agreement = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.borrower_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BorrowerCredit')
    if self.loan_txamt is not None:
      oprot.writeFieldBegin('loan_txamt', TType.I64, 1)
      oprot.writeI64(self.loan_txamt)
      oprot.writeFieldEnd()
    if self.remain_loan_txamt is not None:
      oprot.writeFieldBegin('remain_loan_txamt', TType.I64, 2)
      oprot.writeI64(self.remain_loan_txamt)
      oprot.writeFieldEnd()
    if self.due_date is not None:
      oprot.writeFieldBegin('due_date', TType.I64, 3)
      oprot.writeI64(self.due_date)
      oprot.writeFieldEnd()
    if self.agreement is not None:
      oprot.writeFieldBegin('agreement', TType.STRING, 4)
      oprot.writeString(self.agreement)
      oprot.writeFieldEnd()
    if self.borrower_id is not None:
      oprot.writeFieldBegin('borrower_id', TType.I64, 5)
      oprot.writeI64(self.borrower_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BorrowerPartner:
  """
  Attributes:
   - borrower_id
   - extra_userid
   - partner_uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'borrower_id', None, None, ), # 1
    (2, TType.STRING, 'extra_userid', None, None, ), # 2
    (3, TType.I64, 'partner_uid', None, None, ), # 3
  )

  def __init__(self, borrower_id=None, extra_userid=None, partner_uid=None,):
    self.borrower_id = borrower_id
    self.extra_userid = extra_userid
    self.partner_uid = partner_uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.borrower_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.extra_userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.partner_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BorrowerPartner')
    if self.borrower_id is not None:
      oprot.writeFieldBegin('borrower_id', TType.I64, 1)
      oprot.writeI64(self.borrower_id)
      oprot.writeFieldEnd()
    if self.extra_userid is not None:
      oprot.writeFieldBegin('extra_userid', TType.STRING, 2)
      oprot.writeString(self.extra_userid)
      oprot.writeFieldEnd()
    if self.partner_uid is not None:
      oprot.writeFieldBegin('partner_uid', TType.I64, 3)
      oprot.writeI64(self.partner_uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoanRecord:
  """
  Attributes:
   - userid
   - orderno
   - chnlno
   - lender_uid
   - apply_amt
   - loan_amt
   - status
   - chnl_dtm
   - join_time
   - mobile
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'orderno', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'chnlno', None, None, ), # 4
    (5, TType.I64, 'lender_uid', None, None, ), # 5
    (6, TType.I64, 'apply_amt', None, None, ), # 6
    (7, TType.I64, 'loan_amt', None, None, ), # 7
    (8, TType.I32, 'status', None, None, ), # 8
    (9, TType.STRING, 'chnl_dtm', None, None, ), # 9
    (10, TType.STRING, 'join_time', None, None, ), # 10
    (11, TType.STRING, 'mobile', None, None, ), # 11
  )

  def __init__(self, userid=None, orderno=None, chnlno=None, lender_uid=None, apply_amt=None, loan_amt=None, status=None, chnl_dtm=None, join_time=None, mobile=None,):
    self.userid = userid
    self.orderno = orderno
    self.chnlno = chnlno
    self.lender_uid = lender_uid
    self.apply_amt = apply_amt
    self.loan_amt = loan_amt
    self.status = status
    self.chnl_dtm = chnl_dtm
    self.join_time = join_time
    self.mobile = mobile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.orderno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.chnlno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.lender_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.apply_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.loan_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.chnl_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.join_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoanRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.orderno is not None:
      oprot.writeFieldBegin('orderno', TType.STRING, 2)
      oprot.writeString(self.orderno)
      oprot.writeFieldEnd()
    if self.chnlno is not None:
      oprot.writeFieldBegin('chnlno', TType.STRING, 4)
      oprot.writeString(self.chnlno)
      oprot.writeFieldEnd()
    if self.lender_uid is not None:
      oprot.writeFieldBegin('lender_uid', TType.I64, 5)
      oprot.writeI64(self.lender_uid)
      oprot.writeFieldEnd()
    if self.apply_amt is not None:
      oprot.writeFieldBegin('apply_amt', TType.I64, 6)
      oprot.writeI64(self.apply_amt)
      oprot.writeFieldEnd()
    if self.loan_amt is not None:
      oprot.writeFieldBegin('loan_amt', TType.I64, 7)
      oprot.writeI64(self.loan_amt)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 8)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.chnl_dtm is not None:
      oprot.writeFieldBegin('chnl_dtm', TType.STRING, 9)
      oprot.writeString(self.chnl_dtm)
      oprot.writeFieldEnd()
    if self.join_time is not None:
      oprot.writeFieldBegin('join_time', TType.STRING, 10)
      oprot.writeString(self.join_time)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 11)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardBind:
  """
  Attributes:
   - borrower_id
   - bankname
   - bankuser
   - bankaccount
   - bankmobile
   - brchbank_code
   - bind_status
   - bind_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'borrower_id', None, None, ), # 1
    (2, TType.STRING, 'bankname', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'bankuser', None, None, ), # 4
    (5, TType.STRING, 'bankaccount', None, None, ), # 5
    (6, TType.STRING, 'bankmobile', None, None, ), # 6
    (7, TType.STRING, 'brchbank_code', None, None, ), # 7
    (8, TType.I32, 'bind_status', None, None, ), # 8
    (9, TType.I32, 'bind_type', None, None, ), # 9
  )

  def __init__(self, borrower_id=None, bankname=None, bankuser=None, bankaccount=None, bankmobile=None, brchbank_code=None, bind_status=None, bind_type=None,):
    self.borrower_id = borrower_id
    self.bankname = bankname
    self.bankuser = bankuser
    self.bankaccount = bankaccount
    self.bankmobile = bankmobile
    self.brchbank_code = brchbank_code
    self.bind_status = bind_status
    self.bind_type = bind_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.borrower_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bankname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.bankuser = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bankaccount = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bankmobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.brchbank_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.bind_status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.bind_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardBind')
    if self.borrower_id is not None:
      oprot.writeFieldBegin('borrower_id', TType.I64, 1)
      oprot.writeI64(self.borrower_id)
      oprot.writeFieldEnd()
    if self.bankname is not None:
      oprot.writeFieldBegin('bankname', TType.STRING, 2)
      oprot.writeString(self.bankname)
      oprot.writeFieldEnd()
    if self.bankuser is not None:
      oprot.writeFieldBegin('bankuser', TType.STRING, 4)
      oprot.writeString(self.bankuser)
      oprot.writeFieldEnd()
    if self.bankaccount is not None:
      oprot.writeFieldBegin('bankaccount', TType.STRING, 5)
      oprot.writeString(self.bankaccount)
      oprot.writeFieldEnd()
    if self.bankmobile is not None:
      oprot.writeFieldBegin('bankmobile', TType.STRING, 6)
      oprot.writeString(self.bankmobile)
      oprot.writeFieldEnd()
    if self.brchbank_code is not None:
      oprot.writeFieldBegin('brchbank_code', TType.STRING, 7)
      oprot.writeString(self.brchbank_code)
      oprot.writeFieldEnd()
    if self.bind_status is not None:
      oprot.writeFieldBegin('bind_status', TType.I32, 8)
      oprot.writeI32(self.bind_status)
      oprot.writeFieldEnd()
    if self.bind_type is not None:
      oprot.writeFieldBegin('bind_type', TType.I32, 9)
      oprot.writeI32(self.bind_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoanTrade:
  """
  Attributes:
   - borrower_id
   - lender_uid
   - orderno
   - purpose
   - periods
   - status
   - cardbind_id
   - loan_amt
   - repay_amt
   - repay_way
   - loan_dtm
   - agreement
   - reason
   - disburse_at
   - repay_end_dtm
   - status_utime
   - partner_uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'borrower_id', None, None, ), # 1
    (2, TType.I64, 'lender_uid', None, None, ), # 2
    (3, TType.STRING, 'orderno', None, None, ), # 3
    (4, TType.STRING, 'purpose', None, None, ), # 4
    (5, TType.I32, 'periods', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.I64, 'cardbind_id', None, None, ), # 7
    (8, TType.I64, 'loan_amt', None, None, ), # 8
    (9, TType.I64, 'repay_amt', None, None, ), # 9
    (10, TType.I64, 'repay_way', None, None, ), # 10
    (11, TType.STRING, 'loan_dtm', None, None, ), # 11
    (12, TType.STRING, 'agreement', None, None, ), # 12
    (13, TType.STRING, 'reason', None, None, ), # 13
    (14, TType.I64, 'disburse_at', None, None, ), # 14
    (15, TType.STRING, 'repay_end_dtm', None, None, ), # 15
    (16, TType.STRING, 'status_utime', None, None, ), # 16
    (17, TType.I64, 'partner_uid', None, None, ), # 17
  )

  def __init__(self, borrower_id=None, lender_uid=None, orderno=None, purpose=None, periods=None, status=None, cardbind_id=None, loan_amt=None, repay_amt=None, repay_way=None, loan_dtm=None, agreement=None, reason=None, disburse_at=None, repay_end_dtm=None, status_utime=None, partner_uid=None,):
    self.borrower_id = borrower_id
    self.lender_uid = lender_uid
    self.orderno = orderno
    self.purpose = purpose
    self.periods = periods
    self.status = status
    self.cardbind_id = cardbind_id
    self.loan_amt = loan_amt
    self.repay_amt = repay_amt
    self.repay_way = repay_way
    self.loan_dtm = loan_dtm
    self.agreement = agreement
    self.reason = reason
    self.disburse_at = disburse_at
    self.repay_end_dtm = repay_end_dtm
    self.status_utime = status_utime
    self.partner_uid = partner_uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.borrower_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.lender_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.purpose = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.periods = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.cardbind_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.loan_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.repay_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.repay_way = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.loan_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.agreement = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.disburse_at = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.repay_end_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.status_utime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.partner_uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoanTrade')
    if self.borrower_id is not None:
      oprot.writeFieldBegin('borrower_id', TType.I64, 1)
      oprot.writeI64(self.borrower_id)
      oprot.writeFieldEnd()
    if self.lender_uid is not None:
      oprot.writeFieldBegin('lender_uid', TType.I64, 2)
      oprot.writeI64(self.lender_uid)
      oprot.writeFieldEnd()
    if self.orderno is not None:
      oprot.writeFieldBegin('orderno', TType.STRING, 3)
      oprot.writeString(self.orderno)
      oprot.writeFieldEnd()
    if self.purpose is not None:
      oprot.writeFieldBegin('purpose', TType.STRING, 4)
      oprot.writeString(self.purpose)
      oprot.writeFieldEnd()
    if self.periods is not None:
      oprot.writeFieldBegin('periods', TType.I32, 5)
      oprot.writeI32(self.periods)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.cardbind_id is not None:
      oprot.writeFieldBegin('cardbind_id', TType.I64, 7)
      oprot.writeI64(self.cardbind_id)
      oprot.writeFieldEnd()
    if self.loan_amt is not None:
      oprot.writeFieldBegin('loan_amt', TType.I64, 8)
      oprot.writeI64(self.loan_amt)
      oprot.writeFieldEnd()
    if self.repay_amt is not None:
      oprot.writeFieldBegin('repay_amt', TType.I64, 9)
      oprot.writeI64(self.repay_amt)
      oprot.writeFieldEnd()
    if self.repay_way is not None:
      oprot.writeFieldBegin('repay_way', TType.I64, 10)
      oprot.writeI64(self.repay_way)
      oprot.writeFieldEnd()
    if self.loan_dtm is not None:
      oprot.writeFieldBegin('loan_dtm', TType.STRING, 11)
      oprot.writeString(self.loan_dtm)
      oprot.writeFieldEnd()
    if self.agreement is not None:
      oprot.writeFieldBegin('agreement', TType.STRING, 12)
      oprot.writeString(self.agreement)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 13)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.disburse_at is not None:
      oprot.writeFieldBegin('disburse_at', TType.I64, 14)
      oprot.writeI64(self.disburse_at)
      oprot.writeFieldEnd()
    if self.repay_end_dtm is not None:
      oprot.writeFieldBegin('repay_end_dtm', TType.STRING, 15)
      oprot.writeString(self.repay_end_dtm)
      oprot.writeFieldEnd()
    if self.status_utime is not None:
      oprot.writeFieldBegin('status_utime', TType.STRING, 16)
      oprot.writeString(self.status_utime)
      oprot.writeFieldEnd()
    if self.partner_uid is not None:
      oprot.writeFieldBegin('partner_uid', TType.I64, 17)
      oprot.writeI64(self.partner_uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RepayPlan:
  """
  Attributes:
   - loan_orderno
   - installment_no
   - repay_start_dtm
   - repay_plan_dtm
   - repay_real_dtm
   - status
   - repay_origin_amt
   - repay_interest_amt
   - overdue_amt
   - overdue_day
   - repay_real_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'loan_orderno', None, None, ), # 1
    (2, TType.I64, 'installment_no', None, None, ), # 2
    (3, TType.STRING, 'repay_start_dtm', None, None, ), # 3
    (4, TType.STRING, 'repay_plan_dtm', None, None, ), # 4
    (5, TType.STRING, 'repay_real_dtm', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    None, # 7
    (8, TType.I64, 'repay_origin_amt', None, None, ), # 8
    (9, TType.I64, 'repay_interest_amt', None, None, ), # 9
    (10, TType.I64, 'overdue_amt', None, None, ), # 10
    (11, TType.I64, 'overdue_day', None, None, ), # 11
    (12, TType.I64, 'repay_real_amt', None, None, ), # 12
  )

  def __init__(self, loan_orderno=None, installment_no=None, repay_start_dtm=None, repay_plan_dtm=None, repay_real_dtm=None, status=None, repay_origin_amt=None, repay_interest_amt=None, overdue_amt=None, overdue_day=None, repay_real_amt=None,):
    self.loan_orderno = loan_orderno
    self.installment_no = installment_no
    self.repay_start_dtm = repay_start_dtm
    self.repay_plan_dtm = repay_plan_dtm
    self.repay_real_dtm = repay_real_dtm
    self.status = status
    self.repay_origin_amt = repay_origin_amt
    self.repay_interest_amt = repay_interest_amt
    self.overdue_amt = overdue_amt
    self.overdue_day = overdue_day
    self.repay_real_amt = repay_real_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.loan_orderno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.installment_no = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repay_start_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.repay_plan_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.repay_real_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.repay_origin_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.repay_interest_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.overdue_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.overdue_day = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.repay_real_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RepayPlan')
    if self.loan_orderno is not None:
      oprot.writeFieldBegin('loan_orderno', TType.STRING, 1)
      oprot.writeString(self.loan_orderno)
      oprot.writeFieldEnd()
    if self.installment_no is not None:
      oprot.writeFieldBegin('installment_no', TType.I64, 2)
      oprot.writeI64(self.installment_no)
      oprot.writeFieldEnd()
    if self.repay_start_dtm is not None:
      oprot.writeFieldBegin('repay_start_dtm', TType.STRING, 3)
      oprot.writeString(self.repay_start_dtm)
      oprot.writeFieldEnd()
    if self.repay_plan_dtm is not None:
      oprot.writeFieldBegin('repay_plan_dtm', TType.STRING, 4)
      oprot.writeString(self.repay_plan_dtm)
      oprot.writeFieldEnd()
    if self.repay_real_dtm is not None:
      oprot.writeFieldBegin('repay_real_dtm', TType.STRING, 5)
      oprot.writeString(self.repay_real_dtm)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.repay_origin_amt is not None:
      oprot.writeFieldBegin('repay_origin_amt', TType.I64, 8)
      oprot.writeI64(self.repay_origin_amt)
      oprot.writeFieldEnd()
    if self.repay_interest_amt is not None:
      oprot.writeFieldBegin('repay_interest_amt', TType.I64, 9)
      oprot.writeI64(self.repay_interest_amt)
      oprot.writeFieldEnd()
    if self.overdue_amt is not None:
      oprot.writeFieldBegin('overdue_amt', TType.I64, 10)
      oprot.writeI64(self.overdue_amt)
      oprot.writeFieldEnd()
    if self.overdue_day is not None:
      oprot.writeFieldBegin('overdue_day', TType.I64, 11)
      oprot.writeI64(self.overdue_day)
      oprot.writeFieldEnd()
    if self.repay_real_amt is not None:
      oprot.writeFieldBegin('repay_real_amt', TType.I64, 12)
      oprot.writeI64(self.repay_real_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RepayRecord:
  """
  Attributes:
   - repay_syssn
   - repay_amt
   - cardbind_id
   - repay_method
   - status
   - repay_dtm
   - borrower_id
   - reason
   - repayplan_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'repay_syssn', None, None, ), # 1
    (2, TType.I64, 'repay_amt', None, None, ), # 2
    (3, TType.I64, 'cardbind_id', None, None, ), # 3
    (4, TType.I64, 'repay_method', None, None, ), # 4
    None, # 5
    (6, TType.I64, 'status', None, None, ), # 6
    (7, TType.STRING, 'repay_dtm', None, None, ), # 7
    (8, TType.I64, 'borrower_id', None, None, ), # 8
    (9, TType.STRING, 'reason', None, None, ), # 9
    (10, TType.STRING, 'repayplan_ids', None, None, ), # 10
  )

  def __init__(self, repay_syssn=None, repay_amt=None, cardbind_id=None, repay_method=None, status=None, repay_dtm=None, borrower_id=None, reason=None, repayplan_ids=None,):
    self.repay_syssn = repay_syssn
    self.repay_amt = repay_amt
    self.cardbind_id = cardbind_id
    self.repay_method = repay_method
    self.status = status
    self.repay_dtm = repay_dtm
    self.borrower_id = borrower_id
    self.reason = reason
    self.repayplan_ids = repayplan_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.repay_syssn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.repay_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.cardbind_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.repay_method = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.status = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.repay_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.borrower_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.repayplan_ids = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RepayRecord')
    if self.repay_syssn is not None:
      oprot.writeFieldBegin('repay_syssn', TType.STRING, 1)
      oprot.writeString(self.repay_syssn)
      oprot.writeFieldEnd()
    if self.repay_amt is not None:
      oprot.writeFieldBegin('repay_amt', TType.I64, 2)
      oprot.writeI64(self.repay_amt)
      oprot.writeFieldEnd()
    if self.cardbind_id is not None:
      oprot.writeFieldBegin('cardbind_id', TType.I64, 3)
      oprot.writeI64(self.cardbind_id)
      oprot.writeFieldEnd()
    if self.repay_method is not None:
      oprot.writeFieldBegin('repay_method', TType.I64, 4)
      oprot.writeI64(self.repay_method)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I64, 6)
      oprot.writeI64(self.status)
      oprot.writeFieldEnd()
    if self.repay_dtm is not None:
      oprot.writeFieldBegin('repay_dtm', TType.STRING, 7)
      oprot.writeString(self.repay_dtm)
      oprot.writeFieldEnd()
    if self.borrower_id is not None:
      oprot.writeFieldBegin('borrower_id', TType.I64, 8)
      oprot.writeI64(self.borrower_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 9)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.repayplan_ids is not None:
      oprot.writeFieldBegin('repayplan_ids', TType.STRING, 10)
      oprot.writeString(self.repayplan_ids)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryMeta:
  """
  Attributes:
   - offset
   - count
   - orderby
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'offset', None, 0, ), # 1
    (2, TType.I64, 'count', None, 100, ), # 2
    (3, TType.STRING, 'orderby', None, None, ), # 3
  )

  def __init__(self, offset=thrift_spec[1][4], count=thrift_spec[2][4], orderby=None,):
    self.offset = offset
    self.count = count
    self.orderby = orderby

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderby = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryMeta')
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 1)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.orderby is not None:
      oprot.writeFieldBegin('orderby', TType.STRING, 3)
      oprot.writeString(self.orderby)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OpuserQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - store_uids
   - userids
   - idnumbers
   - name
   - status
   - cids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'store_uids', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'userids', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'idnumbers', (TType.STRING,None), None, ), # 6
    (7, TType.STRING, 'name', None, None, ), # 7
    (8, TType.LIST, 'status', (TType.I32,None), None, ), # 8
    (9, TType.LIST, 'cids', (TType.I64,None), None, ), # 9
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, store_uids=None, userids=None, idnumbers=None, name=None, status=None, cids=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.store_uids = store_uids
    self.userids = userids
    self.idnumbers = idnumbers
    self.name = name
    self.status = status
    self.cids = cids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.store_uids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.store_uids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.userids = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.userids.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.idnumbers = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.idnumbers.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.status = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI32();
            self.status.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.cids = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = iprot.readI64();
            self.cids.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OpuserQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.store_uids is not None:
      oprot.writeFieldBegin('store_uids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.store_uids))
      for iter30 in self.store_uids:
        oprot.writeI64(iter30)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter31 in self.userids:
        oprot.writeI64(iter31)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.idnumbers is not None:
      oprot.writeFieldBegin('idnumbers', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.idnumbers))
      for iter32 in self.idnumbers:
        oprot.writeString(iter32)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 7)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 8)
      oprot.writeListBegin(TType.I32, len(self.status))
      for iter33 in self.status:
        oprot.writeI32(iter33)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cids is not None:
      oprot.writeFieldBegin('cids', TType.LIST, 9)
      oprot.writeListBegin(TType.I64, len(self.cids))
      for iter34 in self.cids:
        oprot.writeI64(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - userids
   - store_mgr_uids
   - district_ids
   - address
   - shop_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'userids', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'store_mgr_uids', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'district_ids', (TType.I64,None), None, ), # 6
    (7, TType.STRING, 'address', None, None, ), # 7
    (8, TType.STRING, 'shop_name', None, None, ), # 8
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, userids=None, store_mgr_uids=None, district_ids=None, address=None, shop_name=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.userids = userids
    self.store_mgr_uids = store_mgr_uids
    self.district_ids = district_ids
    self.address = address
    self.shop_name = shop_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userids = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI64();
            self.userids.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.store_mgr_uids = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = iprot.readI64();
            self.store_mgr_uids.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.district_ids = []
          (_etype50, _size47) = iprot.readListBegin()
          for _i51 in xrange(_size47):
            _elem52 = iprot.readI64();
            self.district_ids.append(_elem52)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.shop_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter53 in self.userids:
        oprot.writeI64(iter53)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.store_mgr_uids is not None:
      oprot.writeFieldBegin('store_mgr_uids', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.store_mgr_uids))
      for iter54 in self.store_mgr_uids:
        oprot.writeI64(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.district_ids is not None:
      oprot.writeFieldBegin('district_ids', TType.LIST, 6)
      oprot.writeListBegin(TType.I64, len(self.district_ids))
      for iter55 in self.district_ids:
        oprot.writeI64(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 7)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.shop_name is not None:
      oprot.writeFieldBegin('shop_name', TType.STRING, 8)
      oprot.writeString(self.shop_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreMgrQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - userids
   - status
   - name
   - idnumbers
   - district_ids
   - cids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'userids', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'status', (TType.I32,None), None, ), # 5
    (6, TType.STRING, 'name', None, None, ), # 6
    (7, TType.LIST, 'idnumbers', (TType.STRING,None), None, ), # 7
    (8, TType.LIST, 'district_ids', (TType.I64,None), None, ), # 8
    (9, TType.LIST, 'cids', (TType.I64,None), None, ), # 9
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, userids=None, status=None, name=None, idnumbers=None, district_ids=None, cids=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.userids = userids
    self.status = status
    self.name = name
    self.idnumbers = idnumbers
    self.district_ids = district_ids
    self.cids = cids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userids = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readI64();
            self.userids.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.status = []
          (_etype65, _size62) = iprot.readListBegin()
          for _i66 in xrange(_size62):
            _elem67 = iprot.readI32();
            self.status.append(_elem67)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.idnumbers = []
          (_etype71, _size68) = iprot.readListBegin()
          for _i72 in xrange(_size68):
            _elem73 = iprot.readString();
            self.idnumbers.append(_elem73)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.district_ids = []
          (_etype77, _size74) = iprot.readListBegin()
          for _i78 in xrange(_size74):
            _elem79 = iprot.readI64();
            self.district_ids.append(_elem79)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.cids = []
          (_etype83, _size80) = iprot.readListBegin()
          for _i84 in xrange(_size80):
            _elem85 = iprot.readI64();
            self.cids.append(_elem85)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreMgrQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter86 in self.userids:
        oprot.writeI64(iter86)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.status))
      for iter87 in self.status:
        oprot.writeI32(iter87)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 6)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.idnumbers is not None:
      oprot.writeFieldBegin('idnumbers', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.idnumbers))
      for iter88 in self.idnumbers:
        oprot.writeString(iter88)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.district_ids is not None:
      oprot.writeFieldBegin('district_ids', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.district_ids))
      for iter89 in self.district_ids:
        oprot.writeI64(iter89)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cids is not None:
      oprot.writeFieldBegin('cids', TType.LIST, 9)
      oprot.writeListBegin(TType.I64, len(self.cids))
      for iter90 in self.cids:
        oprot.writeI64(iter90)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DistrictQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - name
   - district_mgr_uids
   - district_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.LIST, 'district_mgr_uids', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'district_ids', (TType.I64,None), None, ), # 6
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, name=None, district_mgr_uids=None, district_ids=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.name = name
    self.district_mgr_uids = district_mgr_uids
    self.district_ids = district_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.district_mgr_uids = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = iprot.readI64();
            self.district_mgr_uids.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.district_ids = []
          (_etype100, _size97) = iprot.readListBegin()
          for _i101 in xrange(_size97):
            _elem102 = iprot.readI64();
            self.district_ids.append(_elem102)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DistrictQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.district_mgr_uids is not None:
      oprot.writeFieldBegin('district_mgr_uids', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.district_mgr_uids))
      for iter103 in self.district_mgr_uids:
        oprot.writeI64(iter103)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.district_ids is not None:
      oprot.writeFieldBegin('district_ids', TType.LIST, 6)
      oprot.writeListBegin(TType.I64, len(self.district_ids))
      for iter104 in self.district_ids:
        oprot.writeI64(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DistrictMgrQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - userids
   - partner_uids
   - status
   - name
   - idnumbers
   - cids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'userids', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'partner_uids', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'status', (TType.I32,None), None, ), # 6
    (7, TType.STRING, 'name', None, None, ), # 7
    (8, TType.LIST, 'idnumbers', (TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'cids', (TType.I64,None), None, ), # 9
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, userids=None, partner_uids=None, status=None, name=None, idnumbers=None, cids=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.userids = userids
    self.partner_uids = partner_uids
    self.status = status
    self.name = name
    self.idnumbers = idnumbers
    self.cids = cids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userids = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = iprot.readI64();
            self.userids.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.partner_uids = []
          (_etype114, _size111) = iprot.readListBegin()
          for _i115 in xrange(_size111):
            _elem116 = iprot.readI64();
            self.partner_uids.append(_elem116)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.status = []
          (_etype120, _size117) = iprot.readListBegin()
          for _i121 in xrange(_size117):
            _elem122 = iprot.readI32();
            self.status.append(_elem122)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.idnumbers = []
          (_etype126, _size123) = iprot.readListBegin()
          for _i127 in xrange(_size123):
            _elem128 = iprot.readString();
            self.idnumbers.append(_elem128)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.cids = []
          (_etype132, _size129) = iprot.readListBegin()
          for _i133 in xrange(_size129):
            _elem134 = iprot.readI64();
            self.cids.append(_elem134)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DistrictMgrQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter135 in self.userids:
        oprot.writeI64(iter135)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.partner_uids is not None:
      oprot.writeFieldBegin('partner_uids', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.partner_uids))
      for iter136 in self.partner_uids:
        oprot.writeI64(iter136)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.status))
      for iter137 in self.status:
        oprot.writeI32(iter137)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 7)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.idnumbers is not None:
      oprot.writeFieldBegin('idnumbers', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.idnumbers))
      for iter138 in self.idnumbers:
        oprot.writeString(iter138)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cids is not None:
      oprot.writeFieldBegin('cids', TType.LIST, 9)
      oprot.writeListBegin(TType.I64, len(self.cids))
      for iter139 in self.cids:
        oprot.writeI64(iter139)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PartnerQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - userid_list
   - name
   - status_list
   - contact_name
   - contact_mobile_list
   - saleman_uid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.LIST, 'status_list', (TType.I32,None), None, ), # 6
    (7, TType.STRING, 'contact_name', None, None, ), # 7
    (8, TType.LIST, 'contact_mobile_list', (TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'saleman_uid_list', (TType.I64,None), None, ), # 9
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, userid_list=None, name=None, status_list=None, contact_name=None, contact_mobile_list=None, saleman_uid_list=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.userid_list = userid_list
    self.name = name
    self.status_list = status_list
    self.contact_name = contact_name
    self.contact_mobile_list = contact_mobile_list
    self.saleman_uid_list = saleman_uid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype143, _size140) = iprot.readListBegin()
          for _i144 in xrange(_size140):
            _elem145 = iprot.readI64();
            self.userid_list.append(_elem145)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.status_list = []
          (_etype149, _size146) = iprot.readListBegin()
          for _i150 in xrange(_size146):
            _elem151 = iprot.readI32();
            self.status_list.append(_elem151)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.contact_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.contact_mobile_list = []
          (_etype155, _size152) = iprot.readListBegin()
          for _i156 in xrange(_size152):
            _elem157 = iprot.readString();
            self.contact_mobile_list.append(_elem157)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.saleman_uid_list = []
          (_etype161, _size158) = iprot.readListBegin()
          for _i162 in xrange(_size158):
            _elem163 = iprot.readI64();
            self.saleman_uid_list.append(_elem163)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PartnerQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter164 in self.userid_list:
        oprot.writeI64(iter164)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status_list is not None:
      oprot.writeFieldBegin('status_list', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.status_list))
      for iter165 in self.status_list:
        oprot.writeI32(iter165)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.contact_name is not None:
      oprot.writeFieldBegin('contact_name', TType.STRING, 7)
      oprot.writeString(self.contact_name)
      oprot.writeFieldEnd()
    if self.contact_mobile_list is not None:
      oprot.writeFieldBegin('contact_mobile_list', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.contact_mobile_list))
      for iter166 in self.contact_mobile_list:
        oprot.writeString(iter166)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.saleman_uid_list is not None:
      oprot.writeFieldBegin('saleman_uid_list', TType.LIST, 9)
      oprot.writeListBegin(TType.I64, len(self.saleman_uid_list))
      for iter167 in self.saleman_uid_list:
        oprot.writeI64(iter167)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LenderQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - userids
   - name
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'userids', (TType.I64,None), None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.LIST, 'status', (TType.I32,None), None, ), # 6
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, userids=None, name=None, status=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.userids = userids
    self.name = name
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userids = []
          (_etype171, _size168) = iprot.readListBegin()
          for _i172 in xrange(_size168):
            _elem173 = iprot.readI64();
            self.userids.append(_elem173)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.status = []
          (_etype177, _size174) = iprot.readListBegin()
          for _i178 in xrange(_size174):
            _elem179 = iprot.readI32();
            self.status.append(_elem179)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LenderQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter180 in self.userids:
        oprot.writeI64(iter180)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.status))
      for iter181 in self.status:
        oprot.writeI32(iter181)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Cid2userQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - cids
   - userids
   - roles
   - mobiles
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'cids', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'userids', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'roles', (TType.I64,None), None, ), # 6
    (7, TType.LIST, 'mobiles', (TType.I64,None), None, ), # 7
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, cids=None, userids=None, roles=None, mobiles=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.cids = cids
    self.userids = userids
    self.roles = roles
    self.mobiles = mobiles

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.cids = []
          (_etype185, _size182) = iprot.readListBegin()
          for _i186 in xrange(_size182):
            _elem187 = iprot.readI64();
            self.cids.append(_elem187)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.userids = []
          (_etype191, _size188) = iprot.readListBegin()
          for _i192 in xrange(_size188):
            _elem193 = iprot.readI64();
            self.userids.append(_elem193)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.roles = []
          (_etype197, _size194) = iprot.readListBegin()
          for _i198 in xrange(_size194):
            _elem199 = iprot.readI64();
            self.roles.append(_elem199)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.mobiles = []
          (_etype203, _size200) = iprot.readListBegin()
          for _i204 in xrange(_size200):
            _elem205 = iprot.readI64();
            self.mobiles.append(_elem205)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Cid2userQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.cids is not None:
      oprot.writeFieldBegin('cids', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.cids))
      for iter206 in self.cids:
        oprot.writeI64(iter206)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter207 in self.userids:
        oprot.writeI64(iter207)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.roles is not None:
      oprot.writeFieldBegin('roles', TType.LIST, 6)
      oprot.writeListBegin(TType.I64, len(self.roles))
      for iter208 in self.roles:
        oprot.writeI64(iter208)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mobiles is not None:
      oprot.writeFieldBegin('mobiles', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.mobiles))
      for iter209 in self.mobiles:
        oprot.writeI64(iter209)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoanRecordArg:
  """
  Attributes:
   - query_meta
   - s_join_time
   - e_join_time
   - userid_list
   - orderno_list
   - status_list
   - lender_uid_list
   - mobile_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_time', None, None, ), # 2
    (3, TType.STRING, 'e_join_time', None, None, ), # 3
    (4, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'orderno_list', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'status_list', (TType.I32,None), None, ), # 6
    (7, TType.LIST, 'mobile_list', (TType.STRING,None), None, ), # 7
    (8, TType.LIST, 'lender_uid_list', (TType.I64,None), None, ), # 8
  )

  def __init__(self, query_meta=None, s_join_time=None, e_join_time=None, userid_list=None, orderno_list=None, status_list=None, lender_uid_list=None, mobile_list=None,):
    self.query_meta = query_meta
    self.s_join_time = s_join_time
    self.e_join_time = e_join_time
    self.userid_list = userid_list
    self.orderno_list = orderno_list
    self.status_list = status_list
    self.lender_uid_list = lender_uid_list
    self.mobile_list = mobile_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype213, _size210) = iprot.readListBegin()
          for _i214 in xrange(_size210):
            _elem215 = iprot.readI64();
            self.userid_list.append(_elem215)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.orderno_list = []
          (_etype219, _size216) = iprot.readListBegin()
          for _i220 in xrange(_size216):
            _elem221 = iprot.readString();
            self.orderno_list.append(_elem221)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.status_list = []
          (_etype225, _size222) = iprot.readListBegin()
          for _i226 in xrange(_size222):
            _elem227 = iprot.readI32();
            self.status_list.append(_elem227)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.lender_uid_list = []
          (_etype231, _size228) = iprot.readListBegin()
          for _i232 in xrange(_size228):
            _elem233 = iprot.readI64();
            self.lender_uid_list.append(_elem233)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.mobile_list = []
          (_etype237, _size234) = iprot.readListBegin()
          for _i238 in xrange(_size234):
            _elem239 = iprot.readString();
            self.mobile_list.append(_elem239)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoanRecordArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_time is not None:
      oprot.writeFieldBegin('s_join_time', TType.STRING, 2)
      oprot.writeString(self.s_join_time)
      oprot.writeFieldEnd()
    if self.e_join_time is not None:
      oprot.writeFieldBegin('e_join_time', TType.STRING, 3)
      oprot.writeString(self.e_join_time)
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter240 in self.userid_list:
        oprot.writeI64(iter240)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orderno_list is not None:
      oprot.writeFieldBegin('orderno_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.orderno_list))
      for iter241 in self.orderno_list:
        oprot.writeString(iter241)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status_list is not None:
      oprot.writeFieldBegin('status_list', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.status_list))
      for iter242 in self.status_list:
        oprot.writeI32(iter242)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mobile_list is not None:
      oprot.writeFieldBegin('mobile_list', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.mobile_list))
      for iter243 in self.mobile_list:
        oprot.writeString(iter243)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.lender_uid_list is not None:
      oprot.writeFieldBegin('lender_uid_list', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.lender_uid_list))
      for iter244 in self.lender_uid_list:
        oprot.writeI64(iter244)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BorrowerBaseQueryArg:
  """
  Attributes:
   - query_meta
   - s_ctime
   - e_ctime
   - cid_list
   - userid_list
   - status_list
   - partner_uid_list
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_ctime', None, None, ), # 2
    (3, TType.STRING, 'e_ctime', None, None, ), # 3
    (4, TType.LIST, 'cid_list', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'userid_list', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'status_list', (TType.I32,None), None, ), # 6
    (7, TType.LIST, 'partner_uid_list', (TType.I64,None), None, ), # 7
    (8, TType.STRING, 'reason', None, None, ), # 8
  )

  def __init__(self, query_meta=None, s_ctime=None, e_ctime=None, cid_list=None, userid_list=None, status_list=None, partner_uid_list=None, reason=None,):
    self.query_meta = query_meta
    self.s_ctime = s_ctime
    self.e_ctime = e_ctime
    self.cid_list = cid_list
    self.userid_list = userid_list
    self.status_list = status_list
    self.partner_uid_list = partner_uid_list
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.cid_list = []
          (_etype248, _size245) = iprot.readListBegin()
          for _i249 in xrange(_size245):
            _elem250 = iprot.readI64();
            self.cid_list.append(_elem250)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.userid_list = []
          (_etype254, _size251) = iprot.readListBegin()
          for _i255 in xrange(_size251):
            _elem256 = iprot.readI64();
            self.userid_list.append(_elem256)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.status_list = []
          (_etype260, _size257) = iprot.readListBegin()
          for _i261 in xrange(_size257):
            _elem262 = iprot.readI32();
            self.status_list.append(_elem262)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.partner_uid_list = []
          (_etype266, _size263) = iprot.readListBegin()
          for _i267 in xrange(_size263):
            _elem268 = iprot.readI64();
            self.partner_uid_list.append(_elem268)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BorrowerBaseQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_ctime is not None:
      oprot.writeFieldBegin('s_ctime', TType.STRING, 2)
      oprot.writeString(self.s_ctime)
      oprot.writeFieldEnd()
    if self.e_ctime is not None:
      oprot.writeFieldBegin('e_ctime', TType.STRING, 3)
      oprot.writeString(self.e_ctime)
      oprot.writeFieldEnd()
    if self.cid_list is not None:
      oprot.writeFieldBegin('cid_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.cid_list))
      for iter269 in self.cid_list:
        oprot.writeI64(iter269)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userid_list is not None:
      oprot.writeFieldBegin('userid_list', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.userid_list))
      for iter270 in self.userid_list:
        oprot.writeI64(iter270)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status_list is not None:
      oprot.writeFieldBegin('status_list', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.status_list))
      for iter271 in self.status_list:
        oprot.writeI32(iter271)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.partner_uid_list is not None:
      oprot.writeFieldBegin('partner_uid_list', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.partner_uid_list))
      for iter272 in self.partner_uid_list:
        oprot.writeI64(iter272)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 8)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BorrowerProfileQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - mobile_list
   - name
   - idnumber_list
   - borrower_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'mobile_list', (TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.LIST, 'idnumber_list', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'borrower_id_list', (TType.I64,None), None, ), # 7
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, mobile_list=None, name=None, idnumber_list=None, borrower_id_list=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.mobile_list = mobile_list
    self.name = name
    self.idnumber_list = idnumber_list
    self.borrower_id_list = borrower_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.mobile_list = []
          (_etype276, _size273) = iprot.readListBegin()
          for _i277 in xrange(_size273):
            _elem278 = iprot.readString();
            self.mobile_list.append(_elem278)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.idnumber_list = []
          (_etype282, _size279) = iprot.readListBegin()
          for _i283 in xrange(_size279):
            _elem284 = iprot.readString();
            self.idnumber_list.append(_elem284)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.borrower_id_list = []
          (_etype288, _size285) = iprot.readListBegin()
          for _i289 in xrange(_size285):
            _elem290 = iprot.readI64();
            self.borrower_id_list.append(_elem290)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BorrowerProfileQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.mobile_list is not None:
      oprot.writeFieldBegin('mobile_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.mobile_list))
      for iter291 in self.mobile_list:
        oprot.writeString(iter291)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.idnumber_list is not None:
      oprot.writeFieldBegin('idnumber_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.idnumber_list))
      for iter292 in self.idnumber_list:
        oprot.writeString(iter292)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.borrower_id_list is not None:
      oprot.writeFieldBegin('borrower_id_list', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.borrower_id_list))
      for iter293 in self.borrower_id_list:
        oprot.writeI64(iter293)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BorrowerCreditQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - borrower_id_list
   - due_date_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'borrower_id_list', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'due_date_list', (TType.I64,None), None, ), # 5
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, borrower_id_list=None, due_date_list=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.borrower_id_list = borrower_id_list
    self.due_date_list = due_date_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.borrower_id_list = []
          (_etype297, _size294) = iprot.readListBegin()
          for _i298 in xrange(_size294):
            _elem299 = iprot.readI64();
            self.borrower_id_list.append(_elem299)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.due_date_list = []
          (_etype303, _size300) = iprot.readListBegin()
          for _i304 in xrange(_size300):
            _elem305 = iprot.readI64();
            self.due_date_list.append(_elem305)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BorrowerCreditQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.borrower_id_list is not None:
      oprot.writeFieldBegin('borrower_id_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.borrower_id_list))
      for iter306 in self.borrower_id_list:
        oprot.writeI64(iter306)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.due_date_list is not None:
      oprot.writeFieldBegin('due_date_list', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.due_date_list))
      for iter307 in self.due_date_list:
        oprot.writeI64(iter307)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BorrowerPartnerQueryArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - borrower_id_list
   - extra_userid_list
   - partner_uid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'borrower_id_list', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'extra_userid_list', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'partner_uid_list', (TType.I64,None), None, ), # 6
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, borrower_id_list=None, extra_userid_list=None, partner_uid_list=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.borrower_id_list = borrower_id_list
    self.extra_userid_list = extra_userid_list
    self.partner_uid_list = partner_uid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.borrower_id_list = []
          (_etype311, _size308) = iprot.readListBegin()
          for _i312 in xrange(_size308):
            _elem313 = iprot.readI64();
            self.borrower_id_list.append(_elem313)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.extra_userid_list = []
          (_etype317, _size314) = iprot.readListBegin()
          for _i318 in xrange(_size314):
            _elem319 = iprot.readString();
            self.extra_userid_list.append(_elem319)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.partner_uid_list = []
          (_etype323, _size320) = iprot.readListBegin()
          for _i324 in xrange(_size320):
            _elem325 = iprot.readI64();
            self.partner_uid_list.append(_elem325)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BorrowerPartnerQueryArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.borrower_id_list is not None:
      oprot.writeFieldBegin('borrower_id_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.borrower_id_list))
      for iter326 in self.borrower_id_list:
        oprot.writeI64(iter326)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.extra_userid_list is not None:
      oprot.writeFieldBegin('extra_userid_list', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.extra_userid_list))
      for iter327 in self.extra_userid_list:
        oprot.writeString(iter327)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.partner_uid_list is not None:
      oprot.writeFieldBegin('partner_uid_list', TType.LIST, 6)
      oprot.writeListBegin(TType.I64, len(self.partner_uid_list))
      for iter328 in self.partner_uid_list:
        oprot.writeI64(iter328)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardBindArg:
  """
  Attributes:
   - query_meta
   - s_join_dtm
   - e_join_dtm
   - borrower_id_list
   - bind_status_list
   - bankname
   - bankuser
   - bind_type_list
   - bankaccount_list
   - bankmobile_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_join_dtm', None, None, ), # 2
    (3, TType.STRING, 'e_join_dtm', None, None, ), # 3
    (4, TType.LIST, 'borrower_id_list', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'bind_status_list', (TType.I64,None), None, ), # 5
    (6, TType.STRING, 'bankname', None, None, ), # 6
    (7, TType.STRING, 'bankuser', None, None, ), # 7
    (8, TType.LIST, 'bind_type_list', (TType.I64,None), None, ), # 8
    (9, TType.LIST, 'bankaccount_list', (TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'bankmobile_list', (TType.STRING,None), None, ), # 10
  )

  def __init__(self, query_meta=None, s_join_dtm=None, e_join_dtm=None, borrower_id_list=None, bind_status_list=None, bankname=None, bankuser=None, bind_type_list=None, bankaccount_list=None, bankmobile_list=None,):
    self.query_meta = query_meta
    self.s_join_dtm = s_join_dtm
    self.e_join_dtm = e_join_dtm
    self.borrower_id_list = borrower_id_list
    self.bind_status_list = bind_status_list
    self.bankname = bankname
    self.bankuser = bankuser
    self.bind_type_list = bind_type_list
    self.bankaccount_list = bankaccount_list
    self.bankmobile_list = bankmobile_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_join_dtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.borrower_id_list = []
          (_etype332, _size329) = iprot.readListBegin()
          for _i333 in xrange(_size329):
            _elem334 = iprot.readI64();
            self.borrower_id_list.append(_elem334)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.bind_status_list = []
          (_etype338, _size335) = iprot.readListBegin()
          for _i339 in xrange(_size335):
            _elem340 = iprot.readI64();
            self.bind_status_list.append(_elem340)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bankname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bankuser = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.bind_type_list = []
          (_etype344, _size341) = iprot.readListBegin()
          for _i345 in xrange(_size341):
            _elem346 = iprot.readI64();
            self.bind_type_list.append(_elem346)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.bankaccount_list = []
          (_etype350, _size347) = iprot.readListBegin()
          for _i351 in xrange(_size347):
            _elem352 = iprot.readString();
            self.bankaccount_list.append(_elem352)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.bankmobile_list = []
          (_etype356, _size353) = iprot.readListBegin()
          for _i357 in xrange(_size353):
            _elem358 = iprot.readString();
            self.bankmobile_list.append(_elem358)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardBindArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_join_dtm is not None:
      oprot.writeFieldBegin('s_join_dtm', TType.STRING, 2)
      oprot.writeString(self.s_join_dtm)
      oprot.writeFieldEnd()
    if self.e_join_dtm is not None:
      oprot.writeFieldBegin('e_join_dtm', TType.STRING, 3)
      oprot.writeString(self.e_join_dtm)
      oprot.writeFieldEnd()
    if self.borrower_id_list is not None:
      oprot.writeFieldBegin('borrower_id_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.borrower_id_list))
      for iter359 in self.borrower_id_list:
        oprot.writeI64(iter359)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bind_status_list is not None:
      oprot.writeFieldBegin('bind_status_list', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.bind_status_list))
      for iter360 in self.bind_status_list:
        oprot.writeI64(iter360)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bankname is not None:
      oprot.writeFieldBegin('bankname', TType.STRING, 6)
      oprot.writeString(self.bankname)
      oprot.writeFieldEnd()
    if self.bankuser is not None:
      oprot.writeFieldBegin('bankuser', TType.STRING, 7)
      oprot.writeString(self.bankuser)
      oprot.writeFieldEnd()
    if self.bind_type_list is not None:
      oprot.writeFieldBegin('bind_type_list', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.bind_type_list))
      for iter361 in self.bind_type_list:
        oprot.writeI64(iter361)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bankaccount_list is not None:
      oprot.writeFieldBegin('bankaccount_list', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.bankaccount_list))
      for iter362 in self.bankaccount_list:
        oprot.writeString(iter362)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bankmobile_list is not None:
      oprot.writeFieldBegin('bankmobile_list', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.bankmobile_list))
      for iter363 in self.bankmobile_list:
        oprot.writeString(iter363)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoanTradeArg:
  """
  Attributes:
   - query_meta
   - s_ctime
   - e_ctime
   - borrower_id_list
   - lender_uid_list
   - orderno_list
   - purpose
   - periods_list
   - status_list
   - partner_uid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_ctime', None, None, ), # 2
    (3, TType.STRING, 'e_ctime', None, None, ), # 3
    (4, TType.LIST, 'borrower_id_list', (TType.I64,None), None, ), # 4
    (5, TType.LIST, 'lender_uid_list', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'orderno_list', (TType.STRING,None), None, ), # 6
    (7, TType.STRING, 'purpose', None, None, ), # 7
    (8, TType.LIST, 'periods_list', (TType.I32,None), None, ), # 8
    (9, TType.LIST, 'status_list', (TType.I32,None), None, ), # 9
    (10, TType.LIST, 'partner_uid_list', (TType.I64,None), None, ), # 10
  )

  def __init__(self, query_meta=None, s_ctime=None, e_ctime=None, borrower_id_list=None, lender_uid_list=None, orderno_list=None, purpose=None, periods_list=None, status_list=None, partner_uid_list=None,):
    self.query_meta = query_meta
    self.s_ctime = s_ctime
    self.e_ctime = e_ctime
    self.borrower_id_list = borrower_id_list
    self.lender_uid_list = lender_uid_list
    self.orderno_list = orderno_list
    self.purpose = purpose
    self.periods_list = periods_list
    self.status_list = status_list
    self.partner_uid_list = partner_uid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.borrower_id_list = []
          (_etype367, _size364) = iprot.readListBegin()
          for _i368 in xrange(_size364):
            _elem369 = iprot.readI64();
            self.borrower_id_list.append(_elem369)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.lender_uid_list = []
          (_etype373, _size370) = iprot.readListBegin()
          for _i374 in xrange(_size370):
            _elem375 = iprot.readI64();
            self.lender_uid_list.append(_elem375)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.orderno_list = []
          (_etype379, _size376) = iprot.readListBegin()
          for _i380 in xrange(_size376):
            _elem381 = iprot.readString();
            self.orderno_list.append(_elem381)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.purpose = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.periods_list = []
          (_etype385, _size382) = iprot.readListBegin()
          for _i386 in xrange(_size382):
            _elem387 = iprot.readI32();
            self.periods_list.append(_elem387)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.status_list = []
          (_etype391, _size388) = iprot.readListBegin()
          for _i392 in xrange(_size388):
            _elem393 = iprot.readI32();
            self.status_list.append(_elem393)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.partner_uid_list = []
          (_etype397, _size394) = iprot.readListBegin()
          for _i398 in xrange(_size394):
            _elem399 = iprot.readI64();
            self.partner_uid_list.append(_elem399)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoanTradeArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_ctime is not None:
      oprot.writeFieldBegin('s_ctime', TType.STRING, 2)
      oprot.writeString(self.s_ctime)
      oprot.writeFieldEnd()
    if self.e_ctime is not None:
      oprot.writeFieldBegin('e_ctime', TType.STRING, 3)
      oprot.writeString(self.e_ctime)
      oprot.writeFieldEnd()
    if self.borrower_id_list is not None:
      oprot.writeFieldBegin('borrower_id_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.borrower_id_list))
      for iter400 in self.borrower_id_list:
        oprot.writeI64(iter400)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.lender_uid_list is not None:
      oprot.writeFieldBegin('lender_uid_list', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.lender_uid_list))
      for iter401 in self.lender_uid_list:
        oprot.writeI64(iter401)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orderno_list is not None:
      oprot.writeFieldBegin('orderno_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.orderno_list))
      for iter402 in self.orderno_list:
        oprot.writeString(iter402)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.purpose is not None:
      oprot.writeFieldBegin('purpose', TType.STRING, 7)
      oprot.writeString(self.purpose)
      oprot.writeFieldEnd()
    if self.periods_list is not None:
      oprot.writeFieldBegin('periods_list', TType.LIST, 8)
      oprot.writeListBegin(TType.I32, len(self.periods_list))
      for iter403 in self.periods_list:
        oprot.writeI32(iter403)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status_list is not None:
      oprot.writeFieldBegin('status_list', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.status_list))
      for iter404 in self.status_list:
        oprot.writeI32(iter404)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.partner_uid_list is not None:
      oprot.writeFieldBegin('partner_uid_list', TType.LIST, 10)
      oprot.writeListBegin(TType.I64, len(self.partner_uid_list))
      for iter405 in self.partner_uid_list:
        oprot.writeI64(iter405)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RepayPlanArg:
  """
  Attributes:
   - query_meta
   - s_ctime
   - e_ctime
   - loan_orderno_list
   - installment_no_list
   - status_list
   - repay_syssn_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_ctime', None, None, ), # 2
    (3, TType.STRING, 'e_ctime', None, None, ), # 3
    (4, TType.LIST, 'loan_orderno_list', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'installment_no_list', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'status_list', (TType.I32,None), None, ), # 6
    (7, TType.LIST, 'repay_syssn_list', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, query_meta=None, s_ctime=None, e_ctime=None, loan_orderno_list=None, installment_no_list=None, status_list=None, repay_syssn_list=None,):
    self.query_meta = query_meta
    self.s_ctime = s_ctime
    self.e_ctime = e_ctime
    self.loan_orderno_list = loan_orderno_list
    self.installment_no_list = installment_no_list
    self.status_list = status_list
    self.repay_syssn_list = repay_syssn_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.loan_orderno_list = []
          (_etype409, _size406) = iprot.readListBegin()
          for _i410 in xrange(_size406):
            _elem411 = iprot.readString();
            self.loan_orderno_list.append(_elem411)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.installment_no_list = []
          (_etype415, _size412) = iprot.readListBegin()
          for _i416 in xrange(_size412):
            _elem417 = iprot.readI64();
            self.installment_no_list.append(_elem417)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.status_list = []
          (_etype421, _size418) = iprot.readListBegin()
          for _i422 in xrange(_size418):
            _elem423 = iprot.readI32();
            self.status_list.append(_elem423)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.repay_syssn_list = []
          (_etype427, _size424) = iprot.readListBegin()
          for _i428 in xrange(_size424):
            _elem429 = iprot.readString();
            self.repay_syssn_list.append(_elem429)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RepayPlanArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_ctime is not None:
      oprot.writeFieldBegin('s_ctime', TType.STRING, 2)
      oprot.writeString(self.s_ctime)
      oprot.writeFieldEnd()
    if self.e_ctime is not None:
      oprot.writeFieldBegin('e_ctime', TType.STRING, 3)
      oprot.writeString(self.e_ctime)
      oprot.writeFieldEnd()
    if self.loan_orderno_list is not None:
      oprot.writeFieldBegin('loan_orderno_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.loan_orderno_list))
      for iter430 in self.loan_orderno_list:
        oprot.writeString(iter430)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.installment_no_list is not None:
      oprot.writeFieldBegin('installment_no_list', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.installment_no_list))
      for iter431 in self.installment_no_list:
        oprot.writeI64(iter431)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status_list is not None:
      oprot.writeFieldBegin('status_list', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.status_list))
      for iter432 in self.status_list:
        oprot.writeI32(iter432)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.repay_syssn_list is not None:
      oprot.writeFieldBegin('repay_syssn_list', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.repay_syssn_list))
      for iter433 in self.repay_syssn_list:
        oprot.writeString(iter433)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RepayRecordArg:
  """
  Attributes:
   - query_meta
   - s_ctime
   - e_ctime
   - repay_syssn_list
   - borrower_id_list
   - repay_method_list
   - status_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'query_meta', (QueryMeta, QueryMeta.thrift_spec), None, ), # 1
    (2, TType.STRING, 's_ctime', None, None, ), # 2
    (3, TType.STRING, 'e_ctime', None, None, ), # 3
    (4, TType.LIST, 'repay_syssn_list', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'borrower_id_list', (TType.I64,None), None, ), # 5
    (6, TType.LIST, 'repay_method_list', (TType.I64,None), None, ), # 6
    (7, TType.LIST, 'status_list', (TType.I64,None), None, ), # 7
  )

  def __init__(self, query_meta=None, s_ctime=None, e_ctime=None, repay_syssn_list=None, borrower_id_list=None, repay_method_list=None, status_list=None,):
    self.query_meta = query_meta
    self.s_ctime = s_ctime
    self.e_ctime = e_ctime
    self.repay_syssn_list = repay_syssn_list
    self.borrower_id_list = borrower_id_list
    self.repay_method_list = repay_method_list
    self.status_list = status_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.query_meta = QueryMeta()
          self.query_meta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.s_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.e_ctime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.repay_syssn_list = []
          (_etype437, _size434) = iprot.readListBegin()
          for _i438 in xrange(_size434):
            _elem439 = iprot.readString();
            self.repay_syssn_list.append(_elem439)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.borrower_id_list = []
          (_etype443, _size440) = iprot.readListBegin()
          for _i444 in xrange(_size440):
            _elem445 = iprot.readI64();
            self.borrower_id_list.append(_elem445)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.repay_method_list = []
          (_etype449, _size446) = iprot.readListBegin()
          for _i450 in xrange(_size446):
            _elem451 = iprot.readI64();
            self.repay_method_list.append(_elem451)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.status_list = []
          (_etype455, _size452) = iprot.readListBegin()
          for _i456 in xrange(_size452):
            _elem457 = iprot.readI64();
            self.status_list.append(_elem457)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RepayRecordArg')
    if self.query_meta is not None:
      oprot.writeFieldBegin('query_meta', TType.STRUCT, 1)
      self.query_meta.write(oprot)
      oprot.writeFieldEnd()
    if self.s_ctime is not None:
      oprot.writeFieldBegin('s_ctime', TType.STRING, 2)
      oprot.writeString(self.s_ctime)
      oprot.writeFieldEnd()
    if self.e_ctime is not None:
      oprot.writeFieldBegin('e_ctime', TType.STRING, 3)
      oprot.writeString(self.e_ctime)
      oprot.writeFieldEnd()
    if self.repay_syssn_list is not None:
      oprot.writeFieldBegin('repay_syssn_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.repay_syssn_list))
      for iter458 in self.repay_syssn_list:
        oprot.writeString(iter458)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.borrower_id_list is not None:
      oprot.writeFieldBegin('borrower_id_list', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.borrower_id_list))
      for iter459 in self.borrower_id_list:
        oprot.writeI64(iter459)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.repay_method_list is not None:
      oprot.writeFieldBegin('repay_method_list', TType.LIST, 6)
      oprot.writeListBegin(TType.I64, len(self.repay_method_list))
      for iter460 in self.repay_method_list:
        oprot.writeI64(iter460)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status_list is not None:
      oprot.writeFieldBegin('status_list', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.status_list))
      for iter461 in self.status_list:
        oprot.writeI64(iter461)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.query_meta is None:
      raise TProtocol.TProtocolException(message='Required field query_meta is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
