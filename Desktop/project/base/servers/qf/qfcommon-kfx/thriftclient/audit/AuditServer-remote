#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from audit import AuditServer
from audit.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i16 ping()')
  print('  i16 add_audit(Audit audit)')
  print('  i32 audit_api(string id, string type, string modify)')
  print('   app_api( uid_list, i64 chnlcode)')
  print('  i32 update_sales(i32 userid, i32 type, string name, string licensenumber, string licensephoto, string checkstand, string checkin, i32 sls_uid, string nickname, i32 usertype, string shopphoto)')
  print('  i32 update_sales_actv(i64 userid, string params)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AuditServer.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'add_audit':
  if len(args) != 1:
    print('add_audit requires 1 args')
    sys.exit(1)
  pp.pprint(client.add_audit(eval(args[0]),))

elif cmd == 'audit_api':
  if len(args) != 3:
    print('audit_api requires 3 args')
    sys.exit(1)
  pp.pprint(client.audit_api(args[0],args[1],args[2],))

elif cmd == 'app_api':
  if len(args) != 2:
    print('app_api requires 2 args')
    sys.exit(1)
  pp.pprint(client.app_api(eval(args[0]),eval(args[1]),))

elif cmd == 'update_sales':
  if len(args) != 11:
    print('update_sales requires 11 args')
    sys.exit(1)
  pp.pprint(client.update_sales(eval(args[0]),eval(args[1]),args[2],args[3],args[4],args[5],args[6],eval(args[7]),args[8],eval(args[9]),args[10],))

elif cmd == 'update_sales_actv':
  if len(args) != 2:
    print('update_sales_actv requires 2 args')
    sys.exit(1)
  pp.pprint(client.update_sales_actv(eval(args[0]),args[1],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
