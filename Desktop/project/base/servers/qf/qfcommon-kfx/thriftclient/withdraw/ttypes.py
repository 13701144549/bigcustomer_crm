#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ServerError(Exception):
  """
  Attributes:
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, code=None, msg=None,):
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerError')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Card:
  """
  Attributes:
   - userid
   - name
   - cardno
   - card_type
   - bank_name
   - bank_brch
   - bank_area
   - bank_city
   - bank_code
   - bank_type
   - bank_mobile
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'cardno', None, None, ), # 3
    (4, TType.I16, 'card_type', None, None, ), # 4
    (5, TType.STRING, 'bank_name', None, None, ), # 5
    (6, TType.STRING, 'bank_brch', None, None, ), # 6
    (7, TType.STRING, 'bank_area', None, None, ), # 7
    (8, TType.STRING, 'bank_city', None, None, ), # 8
    (9, TType.STRING, 'bank_code', None, None, ), # 9
    (10, TType.I16, 'bank_type', None, None, ), # 10
    (11, TType.STRING, 'bank_mobile', None, None, ), # 11
    (12, TType.STRING, 'memo', None, None, ), # 12
  )

  def __init__(self, userid=None, name=None, cardno=None, card_type=None, bank_name=None, bank_brch=None, bank_area=None, bank_city=None, bank_code=None, bank_type=None, bank_mobile=None, memo=None,):
    self.userid = userid
    self.name = name
    self.cardno = cardno
    self.card_type = card_type
    self.bank_name = bank_name
    self.bank_brch = bank_brch
    self.bank_area = bank_area
    self.bank_city = bank_city
    self.bank_code = bank_code
    self.bank_type = bank_type
    self.bank_mobile = bank_mobile
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cardno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bank_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bank_brch = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bank_area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bank_city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bank_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.bank_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.bank_mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Card')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.cardno is not None:
      oprot.writeFieldBegin('cardno', TType.STRING, 3)
      oprot.writeString(self.cardno)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 4)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.bank_name is not None:
      oprot.writeFieldBegin('bank_name', TType.STRING, 5)
      oprot.writeString(self.bank_name)
      oprot.writeFieldEnd()
    if self.bank_brch is not None:
      oprot.writeFieldBegin('bank_brch', TType.STRING, 6)
      oprot.writeString(self.bank_brch)
      oprot.writeFieldEnd()
    if self.bank_area is not None:
      oprot.writeFieldBegin('bank_area', TType.STRING, 7)
      oprot.writeString(self.bank_area)
      oprot.writeFieldEnd()
    if self.bank_city is not None:
      oprot.writeFieldBegin('bank_city', TType.STRING, 8)
      oprot.writeString(self.bank_city)
      oprot.writeFieldEnd()
    if self.bank_code is not None:
      oprot.writeFieldBegin('bank_code', TType.STRING, 9)
      oprot.writeString(self.bank_code)
      oprot.writeFieldEnd()
    if self.bank_type is not None:
      oprot.writeFieldBegin('bank_type', TType.I16, 10)
      oprot.writeI16(self.bank_type)
      oprot.writeFieldEnd()
    if self.bank_mobile is not None:
      oprot.writeFieldBegin('bank_mobile', TType.STRING, 11)
      oprot.writeString(self.bank_mobile)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 12)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithdrawDetailArgs:
  """
  Attributes:
   - userid
   - start_time
   - end_time
   - pos
   - count
   - status
   - ids
   - month
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'start_time', None, None, ), # 2
    (3, TType.STRING, 'end_time', None, None, ), # 3
    (4, TType.I32, 'pos', None, 0, ), # 4
    (5, TType.I32, 'count', None, 20, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.LIST, 'ids', (TType.STRING,None), None, ), # 7
    (8, TType.STRING, 'month', None, "", ), # 8
  )

  def __init__(self, userid=None, start_time=None, end_time=None, pos=thrift_spec[4][4], count=thrift_spec[5][4], status=None, ids=None, month=thrift_spec[8][4],):
    self.userid = userid
    self.start_time = start_time
    self.end_time = end_time
    self.pos = pos
    self.count = count
    self.status = status
    self.ids = ids
    self.month = month

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.ids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.ids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.month = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithdrawDetailArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 2)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 3)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 4)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.ids is not None:
      oprot.writeFieldBegin('ids', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.ids))
      for iter6 in self.ids:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.month is not None:
      oprot.writeFieldBegin('month', TType.STRING, 8)
      oprot.writeString(self.month)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProfitRecordArgs:
  """
  Attributes:
   - userid
   - start_date
   - end_date
   - pos
   - count
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'start_date', None, None, ), # 2
    (3, TType.STRING, 'end_date', None, None, ), # 3
    (4, TType.I32, 'pos', None, 0, ), # 4
    (5, TType.I32, 'count', None, 20, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
  )

  def __init__(self, userid=None, start_date=None, end_date=None, pos=thrift_spec[4][4], count=thrift_spec[5][4], status=None,):
    self.userid = userid
    self.start_date = start_date
    self.end_date = end_date
    self.pos = pos
    self.count = count
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.end_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProfitRecordArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 2)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 3)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 4)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithdrawDetail:
  """
  Attributes:
   - id
   - userid
   - biz_sn
   - amt
   - fee
   - ratio
   - card
   - currency
   - withdraw_time
   - success_time
   - status
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRING, 'biz_sn', None, None, ), # 3
    (4, TType.I64, 'amt', None, None, ), # 4
    (5, TType.I32, 'fee', None, None, ), # 5
    (6, TType.DOUBLE, 'ratio', None, None, ), # 6
    (7, TType.STRUCT, 'card', (Card, Card.thrift_spec), None, ), # 7
    (8, TType.STRING, 'currency', None, "156", ), # 8
    (9, TType.STRING, 'withdraw_time', None, None, ), # 9
    (10, TType.STRING, 'success_time', None, None, ), # 10
    (11, TType.I32, 'status', None, None, ), # 11
    (12, TType.STRING, 'memo', None, None, ), # 12
  )

  def __init__(self, id=None, userid=None, biz_sn=None, amt=None, fee=None, ratio=None, card=None, currency=thrift_spec[8][4], withdraw_time=None, success_time=None, status=None, memo=None,):
    self.id = id
    self.userid = userid
    self.biz_sn = biz_sn
    self.amt = amt
    self.fee = fee
    self.ratio = ratio
    self.card = card
    self.currency = currency
    self.withdraw_time = withdraw_time
    self.success_time = success_time
    self.status = status
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.card = Card()
          self.card.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.withdraw_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.success_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithdrawDetail')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 3)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 4)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I32, 5)
      oprot.writeI32(self.fee)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 6)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    if self.card is not None:
      oprot.writeFieldBegin('card', TType.STRUCT, 7)
      self.card.write(oprot)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 8)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.withdraw_time is not None:
      oprot.writeFieldBegin('withdraw_time', TType.STRING, 9)
      oprot.writeString(self.withdraw_time)
      oprot.writeFieldEnd()
    if self.success_time is not None:
      oprot.writeFieldBegin('success_time', TType.STRING, 10)
      oprot.writeString(self.success_time)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 11)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 12)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProfitRecord:
  """
  Attributes:
   - id
   - userid
   - mchid
   - available_amt
   - freeze_amt
   - sysfreeze_amt
   - day_profit
   - week_profit
   - month_profit
   - total_profit
   - profit_date
   - status
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRING, 'mchid', None, None, ), # 3
    (4, TType.I64, 'available_amt', None, None, ), # 4
    (5, TType.I64, 'freeze_amt', None, None, ), # 5
    (6, TType.I64, 'sysfreeze_amt', None, None, ), # 6
    (7, TType.I64, 'day_profit', None, None, ), # 7
    (8, TType.I64, 'week_profit', None, None, ), # 8
    (9, TType.I64, 'month_profit', None, None, ), # 9
    (10, TType.I64, 'total_profit', None, None, ), # 10
    (11, TType.STRING, 'profit_date', None, None, ), # 11
    (12, TType.I32, 'status', None, None, ), # 12
    (13, TType.STRING, 'memo', None, None, ), # 13
  )

  def __init__(self, id=None, userid=None, mchid=None, available_amt=None, freeze_amt=None, sysfreeze_amt=None, day_profit=None, week_profit=None, month_profit=None, total_profit=None, profit_date=None, status=None, memo=None,):
    self.id = id
    self.userid = userid
    self.mchid = mchid
    self.available_amt = available_amt
    self.freeze_amt = freeze_amt
    self.sysfreeze_amt = sysfreeze_amt
    self.day_profit = day_profit
    self.week_profit = week_profit
    self.month_profit = month_profit
    self.total_profit = total_profit
    self.profit_date = profit_date
    self.status = status
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mchid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.available_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.freeze_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.sysfreeze_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.day_profit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.week_profit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.month_profit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.total_profit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.profit_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProfitRecord')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.mchid is not None:
      oprot.writeFieldBegin('mchid', TType.STRING, 3)
      oprot.writeString(self.mchid)
      oprot.writeFieldEnd()
    if self.available_amt is not None:
      oprot.writeFieldBegin('available_amt', TType.I64, 4)
      oprot.writeI64(self.available_amt)
      oprot.writeFieldEnd()
    if self.freeze_amt is not None:
      oprot.writeFieldBegin('freeze_amt', TType.I64, 5)
      oprot.writeI64(self.freeze_amt)
      oprot.writeFieldEnd()
    if self.sysfreeze_amt is not None:
      oprot.writeFieldBegin('sysfreeze_amt', TType.I64, 6)
      oprot.writeI64(self.sysfreeze_amt)
      oprot.writeFieldEnd()
    if self.day_profit is not None:
      oprot.writeFieldBegin('day_profit', TType.I64, 7)
      oprot.writeI64(self.day_profit)
      oprot.writeFieldEnd()
    if self.week_profit is not None:
      oprot.writeFieldBegin('week_profit', TType.I64, 8)
      oprot.writeI64(self.week_profit)
      oprot.writeFieldEnd()
    if self.month_profit is not None:
      oprot.writeFieldBegin('month_profit', TType.I64, 9)
      oprot.writeI64(self.month_profit)
      oprot.writeFieldEnd()
    if self.total_profit is not None:
      oprot.writeFieldBegin('total_profit', TType.I64, 10)
      oprot.writeI64(self.total_profit)
      oprot.writeFieldEnd()
    if self.profit_date is not None:
      oprot.writeFieldBegin('profit_date', TType.STRING, 11)
      oprot.writeString(self.profit_date)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 12)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 13)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithdrawArgs:
  """
  Attributes:
   - userid
   - chnl_id
   - card
   - cert_name
   - cert_type
   - cert_no
   - auth_code
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'chnl_id', None, None, ), # 2
    (3, TType.STRUCT, 'card', (Card, Card.thrift_spec), None, ), # 3
    (4, TType.STRING, 'cert_name', None, None, ), # 4
    (5, TType.STRING, 'cert_type', None, None, ), # 5
    (6, TType.STRING, 'cert_no', None, None, ), # 6
    (7, TType.STRING, 'auth_code', None, None, ), # 7
  )

  def __init__(self, userid=None, chnl_id=None, card=None, cert_name=None, cert_type=None, cert_no=None, auth_code=None,):
    self.userid = userid
    self.chnl_id = chnl_id
    self.card = card
    self.cert_name = cert_name
    self.cert_type = cert_type
    self.cert_no = cert_no
    self.auth_code = auth_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.chnl_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.card = Card()
          self.card.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cert_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.cert_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cert_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.auth_code = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithdrawArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.I64, 2)
      oprot.writeI64(self.chnl_id)
      oprot.writeFieldEnd()
    if self.card is not None:
      oprot.writeFieldBegin('card', TType.STRUCT, 3)
      self.card.write(oprot)
      oprot.writeFieldEnd()
    if self.cert_name is not None:
      oprot.writeFieldBegin('cert_name', TType.STRING, 4)
      oprot.writeString(self.cert_name)
      oprot.writeFieldEnd()
    if self.cert_type is not None:
      oprot.writeFieldBegin('cert_type', TType.STRING, 5)
      oprot.writeString(self.cert_type)
      oprot.writeFieldEnd()
    if self.cert_no is not None:
      oprot.writeFieldBegin('cert_no', TType.STRING, 6)
      oprot.writeString(self.cert_no)
      oprot.writeFieldEnd()
    if self.auth_code is not None:
      oprot.writeFieldBegin('auth_code', TType.STRING, 7)
      oprot.writeString(self.auth_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Budget:
  """
  Attributes:
   - userid
   - amt
   - currency
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'amt', None, None, ), # 2
    (3, TType.STRING, 'currency', None, "156", ), # 3
    (4, TType.I16, 'status', None, None, ), # 4
  )

  def __init__(self, userid=None, amt=None, currency=thrift_spec[3][4], status=None,):
    self.userid = userid
    self.amt = amt
    self.currency = currency
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Budget')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 2)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 3)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 4)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
